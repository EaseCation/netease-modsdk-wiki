{
    "client.component.playerViewCompClient.PlayerViewCompClient": [
        {
            "name": "GetPerspective", 
            "path": "client.component.playerViewCompClient.PlayerViewCompClient", 
            "desc": "获取当前的视角模式", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "0：第一人称视角；1：第三人称视角；2：前视第三人称视角"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetPerspective", 
            "path": "client.component.playerViewCompClient.PlayerViewCompClient", 
            "desc": "设置视角模式", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "0：第一人称视角；1：第三人称视角；2：前视第三人称视角", 
                    "param_name": "persp", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "LockPerspective", 
            "path": "client.component.playerViewCompClient.PlayerViewCompClient", 
            "desc": "锁定玩家的视角模式", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "0：第一人称视角；1：第三人称视角；2：前视第三人称视角 其他值：解除锁定", 
                    "param_name": "lock", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否锁定成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetUIProfile", 
            "path": "client.component.playerViewCompClient.PlayerViewCompClient", 
            "desc": "获取\"UI 档案\"模式", 
            "doc_class_path": [
                "游戏设置"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "0表示经典模式，1表示Pocket模式"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetUIProfile", 
            "path": "client.component.playerViewCompClient.PlayerViewCompClient", 
            "desc": "设置\"UI 档案\"模式", 
            "doc_class_path": [
                "游戏设置"
            ], 
            "param": [
                {
                    "param_comment": "0表示经典模式，1表示Pocket模式", 
                    "param_name": "profileType", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置\"UI 档案\"模式", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetToggleOption", 
            "path": "client.component.playerViewCompClient.PlayerViewCompClient", 
            "desc": "修改开关型设置的接口", 
            "doc_class_path": [
                "游戏设置"
            ], 
            "param": [
                {
                    "param_comment": "[OptionId枚举](../枚举值/OptionId.md)", 
                    "param_name": "optionId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否打开开关，True为开，False为关", 
                    "param_name": "isOn", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "修改开关型设置的接口", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSplitControlCanChange", 
            "path": "client.component.playerViewCompClient.PlayerViewCompClient", 
            "desc": "设置是否允许使用准星瞄准按钮", 
            "doc_class_path": [
                "游戏设置"
            ], 
            "param": [
                {
                    "param_comment": "是否允许", 
                    "param_name": "canChange", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置是否允许使用准星瞄准按钮(设了不允许就不能在设置里修改)", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetToggleOption", 
            "path": "client.component.playerViewCompClient.PlayerViewCompClient", 
            "desc": "获得某个开关设置值的接口", 
            "doc_class_path": [
                "游戏设置"
            ], 
            "param": [
                {
                    "param_comment": "[OptionId枚举](../枚举值/OptionId.md)", 
                    "param_name": "optionId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "-1：类型不支持；0：开关关闭； 1: 开关打开；"
            }, 
            "state": [
                {
                    "comment": "获得某个开关设置值的接口", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HighlightBoxSelection", 
            "path": "client.component.playerViewCompClient.PlayerViewCompClient", 
            "desc": "镜头移动时高亮当前视角中心所指的方块", 
            "doc_class_path": [
                "游戏设置"
            ], 
            "param": [
                {
                    "param_comment": "是否高亮，True为高亮，False为不高亮，默认为不高亮", 
                    "param_name": "isHighlight", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "镜头移动时高亮当前视角中心所指的方块", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetControllerLayout", 
            "path": "client.component.playerViewCompClient.PlayerViewCompClient", 
            "desc": "获取玩家控制器绑定映射", 
            "doc_class_path": [
                "游戏设置"
            ], 
            "param": [
                {
                    "param_comment": "选择获取的控制器映射类型，0为键盘鼠标，1为游戏手柄", 
                    "param_name": "layoutType", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "按键映射字典，操作名：按键枚举值，详见[GamepadKeyType枚举](../枚举值/GamepadKeyType.md)和[KeyBoardType枚举](../枚举值/KeyBoardType.md)"
            }, 
            "state": [
                {
                    "comment": "获取玩家控制器绑定映射", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetSliderOption", 
            "path": "client.component.playerViewCompClient.PlayerViewCompClient", 
            "desc": "获得某个滑动条设置选项的值", 
            "doc_class_path": [
                "游戏设置"
            ], 
            "param": [
                {
                    "param_comment": "[SliderOptionId枚举](../枚举值/SliderOptionId.md)", 
                    "param_name": "optionId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "-1：类型不支持；返回值范围详见[SliderOptionId枚举](../枚举值/SliderOptionId.md)"
            }, 
            "state": [
                {
                    "comment": "获得某个滑动条设置选项的值", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "ljj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSliderOption", 
            "path": "client.component.playerViewCompClient.PlayerViewCompClient", 
            "desc": "设置某个滑动条设置选项的值", 
            "doc_class_path": [
                "游戏设置"
            ], 
            "param": [
                {
                    "param_comment": "[SliderOptionId枚举](../枚举值/SliderOptionId.md)", 
                    "param_name": "optionId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "值范围详见[SliderOptionId枚举](../枚举值/SliderOptionId.md)", 
                    "param_name": "value", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置某个滑动条设置选项的值", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "ljj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetPlayerFovScale", 
            "path": "client.component.playerViewCompClient.PlayerViewCompClient", 
            "desc": "将渲染实际使用的fov变为设置中的fov乘以fovScale,fovScale越接近0，其效果越接近原版望远镜效果", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "有效范围为[0,100]", 
                    "param_name": "fovScale", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "新增设置fov倍率功能", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "liruizhi"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.tagCompServer.TagComponentServer": [
        {
            "name": "GetEntityTags", 
            "path": "server.component.tagCompServer.TagComponentServer", 
            "desc": "获取实体标签列表", 
            "doc_class_path": [
                "实体/标签"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "标签列表"
            }, 
            "state": [
                {
                    "comment": "获取实体标签列表", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddEntityTag", 
            "path": "server.component.tagCompServer.TagComponentServer", 
            "desc": "增加实体标签", 
            "doc_class_path": [
                "实体/标签"
            ], 
            "param": [
                {
                    "param_comment": "标签名", 
                    "param_name": "tag", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加实体标签", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RemoveEntityTag", 
            "path": "server.component.tagCompServer.TagComponentServer", 
            "desc": "移除实体某个指定的标签", 
            "doc_class_path": [
                "实体/标签"
            ], 
            "param": [
                {
                    "param_comment": "标签名", 
                    "param_name": "tag", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "移除实体某个指定的标签", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "EntityHasTag", 
            "path": "server.component.tagCompServer.TagComponentServer", 
            "desc": "判断实体是否存在某个指定的标签", 
            "doc_class_path": [
                "实体/标签"
            ], 
            "param": [
                {
                    "param_comment": "标签名", 
                    "param_name": "tag", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否包含标签"
            }, 
            "state": [
                {
                    "comment": "判断实体是否存在某个指定的标签", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.ui.controls.minimapUIControl.MiniMapUIControl": [
        {
            "name": "ZoomIn", 
            "path": "client.ui.controls.minimapUIControl.MiniMapUIControl", 
            "desc": "放大地图", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "在原有基础上的增量值，可以控制放大速度，默认为0.05", 
                    "param_name": "value", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "放大地图", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ZoomOut", 
            "path": "client.ui.controls.minimapUIControl.MiniMapUIControl", 
            "desc": "缩小地图", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "在原有基础上的减少值，可以控制缩小速度，默认为0.05", 
                    "param_name": "value", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "缩小地图", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ZoomReset", 
            "path": "client.ui.controls.minimapUIControl.MiniMapUIControl", 
            "desc": "恢复地图放缩大小为默认值", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "恢复地图放缩大小为默认值", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetHighestY", 
            "path": "client.ui.controls.minimapUIControl.MiniMapUIControl", 
            "desc": "设置绘制地图的最大高度", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "绘制高度值", 
                    "param_name": "highestY", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "设置绘制地图的最大高度", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddEntityMarker", 
            "path": "client.ui.controls.minimapUIControl.MiniMapUIControl", 
            "desc": "增加实体位置标记", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "实体Id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "头顶ICON贴图，如textures/blocks/border", 
                    "param_name": "texturePath", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "贴图大小，默认为(4,4)", 
                    "param_name": "size", 
                    "param_type": "tuple(float,float)"
                }, 
                {
                    "param_comment": "是否启用实体朝向，默认为False", 
                    "param_name": "enableRotation", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否翻转实体Z轴旋转，默认为False", 
                    "param_name": "isRevertZRot", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否增加成功"
            }, 
            "state": [
                {
                    "comment": "增加实体位置标记", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddEntityTextMarker", 
            "path": "client.ui.controls.minimapUIControl.MiniMapUIControl", 
            "desc": "在小地图上增加实体文本标记", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "实体Id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "文本的内容，可以支持[样式代码](https://zh.minecraft.wiki/w/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81)（§可以设置文字的颜色、格式等，该种用法更加灵活多变）", 
                    "param_name": "text", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "文本缩放倍数，等于文本控件json中的font_scale_factor参数，默认缩放倍数为1.0", 
                    "param_name": "scale", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否增加成功"
            }, 
            "state": [
                {
                    "comment": "增加实体文本标记", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddStaticMarker", 
            "path": "client.ui.controls.minimapUIControl.MiniMapUIControl", 
            "desc": "增加地图上静态位置的标记", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "标记Id", 
                    "param_name": "key", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "地图位置二维坐标(x,z)", 
                    "param_name": "vec2", 
                    "param_type": "tuple(float,float)"
                }, 
                {
                    "param_comment": "贴图路径", 
                    "param_name": "texturePath", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "贴图大小，默认为(4,4)", 
                    "param_name": "size", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否增加成功"
            }, 
            "state": [
                {
                    "comment": "增加地图上静态位置的标记", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddStaticTextMarker", 
            "path": "client.ui.controls.minimapUIControl.MiniMapUIControl", 
            "desc": "在小地图上增加静态文本的标记", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "标记Id", 
                    "param_name": "key", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "地图位置二维坐标(x,z)", 
                    "param_name": "vec2", 
                    "param_type": "tuple(float,float)"
                }, 
                {
                    "param_comment": "文本的内容，可以支持[样式代码](https://zh.minecraft.wiki/w/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81)（§可以设置文字的颜色、格式等，该种用法更加灵活多变）", 
                    "param_name": "text", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "文本缩放倍数，等于文本控件json中的font_scale_factor参数，默认缩放倍数为1.0", 
                    "param_name": "scale", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否增加成功"
            }, 
            "state": [
                {
                    "comment": "增加地图上静态文本的标记", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveEntityMarker", 
            "path": "client.ui.controls.minimapUIControl.MiniMapUIControl", 
            "desc": "删除实体位置标记", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "实体Id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "删除实体位置标记", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveEntityTextMarker", 
            "path": "client.ui.controls.minimapUIControl.MiniMapUIControl", 
            "desc": "在小地图上删除实体文本标记", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "实体Id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "删除实体文本标记", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveStaticMarker", 
            "path": "client.ui.controls.minimapUIControl.MiniMapUIControl", 
            "desc": "删除静态位置标记", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "标记的Id", 
                    "param_name": "key", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "删除静态位置标记", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveStaticTextMarker", 
            "path": "client.ui.controls.minimapUIControl.MiniMapUIControl", 
            "desc": "在小地图上删除静态文本标记", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "标记Id", 
                    "param_name": "key", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "删除静态文本标记", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RepaintMiniMap", 
            "path": "client.ui.controls.minimapUIControl.MiniMapUIControl", 
            "desc": "重新绘制小地图", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "重新绘制小地图", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lidi"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.attrCompServer.AttrCompServer": [
        {
            "name": "SetAttrValue", 
            "path": "server.component.attrCompServer.AttrCompServer", 
            "desc": "设置实体的引擎属性", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "[AttrType枚举](../../枚举值/AttrType.md)", 
                    "param_name": "attrType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "属性值", 
                    "param_name": "value", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "是否同时设置默认值，1会同时设置默认值，0则不会，缺省时默认为1", 
                    "param_name": "setDefault", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "新增类型说明", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "jishaobin"
                }, 
                {
                    "comment": "新增对AttrType.LAVA_SPEED的支持，可设置实体在岩浆中的移动速度", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "设置值超过float表示范围时返回False", 
                    "operation": "调整", 
                    "version": "2.3", 
                    "author": "wangdingdong"
                }, 
                {
                    "comment": "新增对AttrType.FOLLOW_RANGE,AttrType.KNOCKBACK_RESISTANCE,AttrType.JUMP_STRENGTH的支持", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xsf"
                }, 
                {
                    "comment": "新增对AttrType.ARMOR的支持", 
                    "operation": "调整", 
                    "version": "3.0", 
                    "author": "qyk"
                }, 
                {
                    "comment": "新增setDefault参数", 
                    "operation": "调整", 
                    "version": "3.1", 
                    "author": "xgb"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetAttrValue", 
            "path": "server.component.attrCompServer.AttrCompServer", 
            "desc": "获取实体的引擎属性", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "[AttrType枚举](../../枚举值/AttrType.md)", 
                    "param_name": "attrType", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "属性结果"
            }, 
            "state": [
                {
                    "comment": "新增ABSORPTION(伤害吸收生命值)类型支持", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "jishaobin"
                }, 
                {
                    "comment": "新增对AttrType.LAVA_SPEED的支持，可获取实体在岩浆中的移动速度", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "新增对AttrType.FOLLOW_RANGE,AttrType.KNOCKBACK_RESISTANCE,AttrType.JUMP_STRENGTH,AttrType.ARMOR的支持", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetAttrMaxValue", 
            "path": "server.component.attrCompServer.AttrCompServer", 
            "desc": "设置实体的引擎属性的最大值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "[AttrType枚举](../../枚举值/AttrType.md)", 
                    "param_name": "type", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "属性值", 
                    "param_name": "value", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "新增类型说明", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "jishaobin"
                }, 
                {
                    "comment": "新增对AttrType.LAVA_SPEED的支持，可设置实体在岩浆中的最大移动速度", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "设置值超过float表示范围时返回False", 
                    "operation": "调整", 
                    "version": "2.3", 
                    "author": "wangdingdong"
                }, 
                {
                    "comment": "新增对AttrType.FOLLOW_RANGE,AttrType.KNOCKBACK_RESISTANCE,AttrType.JUMP_STRENGTH的支持", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xsf"
                }, 
                {
                    "comment": "补充说明SetAttrMaxValue会同时修改默认值", 
                    "operation": "调整", 
                    "version": "3.1", 
                    "author": "xgb"
                }, 
                {
                    "comment": "支持设置伤害吸收", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetAttrMaxValue", 
            "path": "server.component.attrCompServer.AttrCompServer", 
            "desc": "获取实体的引擎属性的最大值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "[AttrType枚举](../../枚举值/AttrType.md)", 
                    "param_name": "type", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "属性值结果"
            }, 
            "state": [
                {
                    "comment": "新增ABSORPTION(伤害吸收生命值)类型支持", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "jishaobin"
                }, 
                {
                    "comment": "新增对AttrType.FOLLOW_RANGE,AttrType.KNOCKBACK_RESISTANCE,AttrType.JUMP_STRENGTH的支持", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsEntityOnFire", 
            "path": "server.component.attrCompServer.AttrCompServer", 
            "desc": "获取实体是否着火", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否着火"
            }, 
            "state": [
                {
                    "comment": "获取实体是否着火", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetEntityOnFire", 
            "path": "server.component.attrCompServer.AttrCompServer", 
            "desc": "设置实体着火", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "着火时间（单位：秒），当传入参数seconds小于等于0时，将让着火的实体灭火", 
                    "param_name": "seconds", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "着火状态下每秒扣的血量,不传的话默认是1", 
                    "param_name": "burn_damage", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "当传入参数seconds小于等于0时，将让着火的实体灭火", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "lidi"
                }, 
                {
                    "comment": "新增参数burn_damage，可设置实体着火状态下每秒扣的血量", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "guanmingyu"
                }, 
                {
                    "comment": "调整说明，可通过事件[OnFireHurtEvent](../事件/实体/OnFireHurtEvent.md)取消着火伤害", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "设置实体是否着火", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetStepHeight", 
            "path": "server.component.attrCompServer.AttrCompServer", 
            "desc": "设置玩家前进非跳跃状态下能上的最大台阶高度, 默认值为0.5625，1的话表示能上一个台阶", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "最大高度，需要大于0", 
                    "param_name": "stepHeight", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家前进非跳跃状态下能上的最大台阶高度", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "sutao"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetStepHeight", 
            "path": "server.component.attrCompServer.AttrCompServer", 
            "desc": "返回玩家前进非跳跃状态下能上的最大台阶高度", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "台阶高度"
            }, 
            "state": [
                {
                    "comment": "返回玩家前进非跳跃状态下能上的最大台阶高度", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "sutao"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "ResetStepHeight", 
            "path": "server.component.attrCompServer.AttrCompServer", 
            "desc": "恢复引擎默认玩家前进非跳跃状态下能上的最大台阶高度", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "恢复引擎默认玩家前进非跳跃状态下能上的最大台阶高度，即恢复为原来的0.5625", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "sutao"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetTypeFamily", 
            "path": "server.component.attrCompServer.AttrCompServer", 
            "desc": "获取生物行为包字段 type_family", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "type_family列表，例['cow', 'mob']"
            }, 
            "state": [
                {
                    "comment": "获取生物行为包字段 type_family", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPersistent", 
            "path": "server.component.attrCompServer.AttrCompServer", 
            "desc": "设置实体不会因为离玩家太远而被[清除](https://zh.minecraft.wiki/w/%E7%94%9F%E6%88%90#%E6%B8%85%E9%99%A4)", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "设置为True时，则实体不会被清除", 
                    "param_name": "persistent", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "设置实体不会因为离玩家太远而被[清除](https://zh.minecraft.wiki/w/%E7%94%9F%E6%88%90#%E6%B8%85%E9%99%A4)", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "ResetToDefaultValue", 
            "path": "server.component.attrCompServer.AttrCompServer", 
            "desc": "重置实体引擎属性到默认值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "[AttrType枚举](../../枚举值/AttrType.md)", 
                    "param_name": "type", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "新增重置实体引擎属性到默认值接口", 
                    "operation": "新增", 
                    "version": "3.1", 
                    "author": "xgb"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "ResetToMaxValue", 
            "path": "server.component.attrCompServer.AttrCompServer", 
            "desc": "重置实体引擎属性到最大值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "[AttrType枚举](../../枚举值/AttrType.md)", 
                    "param_name": "type", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "新增重置实体引擎属性到最大值接口", 
                    "operation": "新增", 
                    "version": "3.1", 
                    "author": "xgb"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.actorMotionCompServer.ActorMotionComponentServer": [
        {
            "name": "SetMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "设置生物（不含玩家）的瞬时移动方向向量", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "世界坐标系下的向量，该方向为世界坐标系下的向量，以x,z,y三个轴的正方向为正值，可以通过当前生物的rot组件判断目前玩家面向的方向，可在开发模式下打开F3观察数值变化。", 
                    "param_name": "motion", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置生物瞬时移动方向向量", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "增加备注：在damageEvent事件里面使用该接口时，需把damageEvent事件回调的knock参数设置为False", 
                    "operation": "调整", 
                    "version": "1.24", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "设置玩家的瞬时移动方向向量(可解决SetMotion闪现问题)", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "世界坐标系下的向量，该方向为世界坐标系下的向量，以x,z,y三个轴的正方向为正值，可以通过当前生物的rot组件判断目前玩家面向的方向，可在开发模式下打开F3观察数值变化。", 
                    "param_name": "motion", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家瞬时移动方向向量", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "获取生物（含玩家）的瞬时移动方向向量", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "瞬时移动方向向量，异常时返回None"
            }, 
            "state": [
                {
                    "comment": "获取生物的瞬时移动方向向量", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "ResetMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "重置生物（不含玩家）的瞬时移动方向向量", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "重置生物的瞬时移动方向向量", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddEntityTrackMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "给实体（不含玩家）添加轨迹运动器", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "轨迹终点", 
                    "param_name": "targetPos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "到达终点所需要的时间", 
                    "param_name": "duraTime", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "轨迹起点，默认为None，表示以调用[StartEntityMotion](#StartEntityMotion)的位置作为起点。", 
                    "param_name": "startPos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "是否使用相对坐标设置起点和终点的位置以及朝向，默认为False。", 
                    "param_name": "relativeCoord", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否循环，若设为True，则实体会在起点和终点之间往复运动，默认为False。", 
                    "param_name": "isLoop", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "实体到达targetPos时的朝向，受参数relativeCoord影响，默认为None，表示使用调用[StartEntityMotion](#StartEntityMotion)时的朝向。", 
                    "param_name": "targetRot", 
                    "param_type": "tuple(float,float)"
                }, 
                {
                    "param_comment": "实体到达startPos时的朝向，受参数relativeCoord影响，默认为None，表示使用调用[StartEntityMotion](#StartEntityMotion)时的朝向。", 
                    "param_name": "startRot", 
                    "param_type": "tuple(float,float)"
                }, 
                {
                    "param_comment": "是否使用运动中的速度方向作为朝向，默认为False，若为True，则参数targetRot和startRot无效", 
                    "param_name": "useVelocityDir", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "时间变化函数, 默认值为serverApi.GetMinecraftEnum().TimeEaseType.linear, 参数不在枚举值中也当作linear", 
                    "param_name": "ease", 
                    "param_type": "TimeEaseType"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "运动器ID，添加失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "给实体（不含玩家）轨迹运动器添加朝向控制", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "wangdingdong"
                }, 
                {
                    "comment": "给实体（不含玩家）添加轨迹运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }, 
                {
                    "comment": "增加插值类型", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xusifan"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddEntityVelocityMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "给实体（不含玩家）添加速度运动器", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "速度，包含大小、方向", 
                    "param_name": "velocity", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "加速度，包含大小、方向，默认为None，表示没有加速度", 
                    "param_name": "accelerate", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "是否使用当前速度的方向作为此刻实体的朝向，默认为True", 
                    "param_name": "useVelocityDir", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "运动器ID，添加失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "给实体（不含玩家）添加速度运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddEntityAroundPointMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "给实体（不含玩家）添加对点环绕运动器", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "要环绕的圆心点坐标", 
                    "param_name": "center", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "圆周运动的角速度（弧度/秒）", 
                    "param_name": "angularVelocity", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "圆周运动的轴，决定了在哪个平面上做圆周运动，默认为(0, 1, 0)", 
                    "param_name": "axis", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "是否在运动器生效时锁定实体的朝向，不锁定则实体的朝向会随着运动而改变，默认为False。", 
                    "param_name": "lockDir", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "停止该运动器所需要的弧度，当stopRad为0时，该运动器会一直运行，默认为0", 
                    "param_name": "stopRad", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "运动器ID，添加失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "给实体（不含玩家）添加对点环绕运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddEntityAroundEntityMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "给实体（不含玩家）添加对实体环绕运动器", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "要环绕的某个实体的ID", 
                    "param_name": "eID", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "圆周运动的角速度（弧度/秒）", 
                    "param_name": "angularVelocity", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "圆周运动的轴，决定了在哪个平面上做圆周运动，默认为(0, 1, 0)", 
                    "param_name": "axis", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "是否在运动器生效时锁定实体的朝向，不锁定则实体的朝向会随着运动而改变，默认为False。", 
                    "param_name": "lockDir", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "停止该运动器所需要的弧度，当stopRad为0时，该运动器会一直运行，默认为0", 
                    "param_name": "stopRad", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "环绕半径，当设置为-1时环绕运动器使用启动时与目标的距离作为半径，当设置为非负数时表示按设定的值作为环绕半径，默认为-1", 
                    "param_name": "radius", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "运动器ID，添加失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "给实体（不含玩家）添加对实体环绕运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }, 
                {
                    "comment": "对实体环绕运动器可以指定半径", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntityMotions", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "获取实体（不含玩家）身上的所有运动器", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "运动器集合，key值代表运动器mID，value值代表运动器类型0：轨迹运动器、1：速度运动器、2：环绕运动器"
            }, 
            "state": [
                {
                    "comment": "获取实体（不含玩家）身上所有运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RemoveEntityMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "移除实体（不含玩家）身上的运动器", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "要移除的某个运动器的ID", 
                    "param_name": "motionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功移除"
            }, 
            "state": [
                {
                    "comment": "移除实体（不含玩家）身上的运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StartEntityMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "启动实体（不含玩家）身上的某个运动器", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "要启动的某个运动器的ID", 
                    "param_name": "motionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功启动"
            }, 
            "state": [
                {
                    "comment": "启动实体（不含玩家）身上的某个运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StopEntityMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "停止实体（不含玩家）身上的某个运动器", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "要停止的某个运动器的ID", 
                    "param_name": "motionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功停止"
            }, 
            "state": [
                {
                    "comment": "停止实体（不含玩家）身上的某个运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddPlayerTrackMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "给玩家添加轨迹运动器", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "轨迹终点", 
                    "param_name": "targetPos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "到达终点所需要的时间", 
                    "param_name": "duraTime", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "轨迹起点，默认为None，表示以调用[StartPlayerMotion](#StartPlayerMotion)的位置作为起点。", 
                    "param_name": "startPos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "是否使用相对坐标设置起点和终点的位置以及朝向，默认为False。", 
                    "param_name": "relativeCoord", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否循环，若设为True，则玩家会在起点和终点之间往复运动，默认为False。", 
                    "param_name": "isLoop", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "玩家到达targetPos时的朝向，受参数relativeCoord影响，默认为None，表示使用调用[StartPlayerMotion](#StartPlayerMotion)时的朝向。", 
                    "param_name": "targetRot", 
                    "param_type": "tuple(float,float)"
                }, 
                {
                    "param_comment": "玩家到达startPos时的朝向，受参数relativeCoord影响，默认为None，表示使用调用[StartPlayerMotion](#StartPlayerMotion)时的朝向。", 
                    "param_name": "startRot", 
                    "param_type": "tuple(float,float)"
                }, 
                {
                    "param_comment": "是否使用运动中的速度方向作为朝向，默认为False，若为True，则参数targetRot和startRot无效", 
                    "param_name": "useVelocityDir", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "时间变化函数, 默认值为serverApi.GetMinecraftEnum().TimeEaseType.linear, 参数不在枚举值中也当作linear", 
                    "param_name": "ease", 
                    "param_type": "TimeEaseType"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "运动器ID，添加失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "给玩家轨迹运动器添加朝向控制", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "wangdingdong"
                }, 
                {
                    "comment": "给玩家添加轨迹运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }, 
                {
                    "comment": "增加插值类型", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xusifan"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddPlayerVelocityMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "给玩家添加速度运动器", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "速度，包含大小、方向", 
                    "param_name": "velocity", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "加速度，包含大小、方向，默认为None，表示没有加速度", 
                    "param_name": "accelerate", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "是否使用当前速度的方向作为此刻实体的朝向，默认为True", 
                    "param_name": "useVelocityDir", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "运动器ID，添加失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "给玩家添加速度运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddPlayerAroundPointMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "给玩家添加对点环绕运动器", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "要环绕的圆心点坐标", 
                    "param_name": "center", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "圆周运动的角速度（弧度/秒）", 
                    "param_name": "angularVelocity", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "圆周运动的轴，决定了在哪个平面上做圆周运动，默认为(0, 1, 0)", 
                    "param_name": "axis", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "是否在运动器生效时锁定实体的朝向，不锁定则玩家的朝向会随着运动而改变，默认为False。", 
                    "param_name": "lockDir", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "停止该运动器所需要的弧度，当stopRad为0时，该运动器会一直运行，默认为0", 
                    "param_name": "stopRad", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "运动器ID，添加失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "给玩家添加对点环绕运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddPlayerAroundEntityMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "给玩家添加对实体环绕运动器", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "要环绕的某个实体的ID", 
                    "param_name": "eID", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "圆周运动的角速度（弧度/秒）", 
                    "param_name": "angularVelocity", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "圆周运动的轴，决定了在哪个平面上做圆周运动，默认为(0, 1, 0)", 
                    "param_name": "axis", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "是否在运动器生效时锁定实体的朝向，不锁定则实体的朝向会随着运动而改变，默认为False。", 
                    "param_name": "lockDir", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "停止该运动器所需要的弧度，当stopRad为0时，该运动器会一直运行，默认为0", 
                    "param_name": "stopRad", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "环绕半径，当设置为-1时环绕运动器使用当前与目标的距离作为半径，当设置为非负数时表示按设定的值作为环绕半径，默认为-1", 
                    "param_name": "radius", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "运动器ID，添加失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "给玩家添加对实体环绕运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }, 
                {
                    "comment": "对实体环绕运动器可以指定半径", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerMotions", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "获取玩家身上的所有运动器", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "运动器集合，key值代表运动器mID，value值代表运动器类型0：轨迹运动器、1：速度运动器、2：环绕运动器"
            }, 
            "state": [
                {
                    "comment": "获取玩家身上所有运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RemovePlayerMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "移除玩家身上的运动器", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "要移除的某个运动器的ID", 
                    "param_name": "motionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功移除"
            }, 
            "state": [
                {
                    "comment": "移除玩家身上的运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StartPlayerMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "启动玩家身上的某个运动器", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "要启动的某个运动器的ID", 
                    "param_name": "motionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功启动"
            }, 
            "state": [
                {
                    "comment": "启动玩家身上的某个运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StopPlayerMotion", 
            "path": "server.component.actorMotionCompServer.ActorMotionComponentServer", 
            "desc": "停止玩家身上的某个运动器", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "要停止的某个运动器的ID", 
                    "param_name": "motionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功停止"
            }, 
            "state": [
                {
                    "comment": "停止玩家身上的某个运动器", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.blockEntityExDataCompServer.BlockEntityExDataCompServer": [
        {
            "name": "GetBlockEntityData", 
            "path": "server.component.blockEntityExDataCompServer.BlockEntityExDataCompServer", 
            "desc": "用于获取可操作某个自定义方块实体数据的对象，操作方式与dict类似", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "维度", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "BlockEntityData或None", 
                "return_comment": "可操作该方块实体内数据的对象"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "client.component.rotCompClient.RotComponentClient": [
        {
            "name": "GetRot", 
            "path": "client.component.rotCompClient.RotComponentClient", 
            "desc": "获取实体头与水平方向的俯仰角度和竖直方向的旋转角度，获得角度后可用GetDirFromRot接口转换为朝向的单位向量 <a href=\"../../../../mcguide/20-玩法开发/10-基本概念/10-Vector3.html\">MC坐标系说明</a>", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "俯仰角度及绕竖直方向旋转的角度，单位是角度"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetRot", 
            "path": "client.component.rotCompClient.RotComponentClient", 
            "desc": "设置实体头与水平方向的俯仰角度和竖直方向的旋转角度 <a href=\"../../../../mcguide/20-玩法开发/10-基本概念/10-Vector3.html\">MC坐标系说明</a>", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "俯仰角度及绕竖直方向旋转的角度，单位是角度", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetBodyRot", 
            "path": "client.component.rotCompClient.RotComponentClient", 
            "desc": "获取实体的身体的角度", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "身体绕竖直方向的角度，单位是角度，如果没有身体，返回为0"
            }, 
            "state": [
                {
                    "comment": "获取实体的身体角度", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "guoxun"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "LockLocalPlayerRot", 
            "path": "client.component.rotCompClient.RotComponentClient", 
            "desc": "在分离摄像机时，锁定本地玩家的头部角度", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "传入True为锁定本地玩家头部角度<br>传入False为解锁本地玩家头部角度", 
                    "param_name": "lock", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True：设置成功<br>False：设置失败"
            }, 
            "state": [
                {
                    "comment": "在分离摄像机时，锁定本地玩家的头部角度", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "liaoyi"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetPlayerLookAtPos", 
            "path": "client.component.rotCompClient.RotComponentClient", 
            "desc": "设置本地玩家看向某个位置", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "要看向的目标位置", 
                    "param_name": "targetPos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "俯仰角方向旋转的角速度（每帧），最小为0.2", 
                    "param_name": "pitchStep", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "偏航角方向旋转的角速度（每帧），最小为0.2", 
                    "param_name": "yawStep", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "转向目标角度时是否屏蔽玩家操作，默认为True<br>True:屏蔽玩家操作，此时玩家无法转向、移动<br>False:不屏蔽玩家操作，此时如果玩家有移动、镜头转向操作将会打断通过本接口设置的转向", 
                    "param_name": "blockInput", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功，True为成功，False为失败"
            }, 
            "state": [
                {
                    "comment": "设置本地玩家看向某个位置", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "liaoyi"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.ui.controls.baseUIControl.BaseUIControl": [
        {
            "name": "SetPosition", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置控件相对父节点的坐标", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "该控件相对父节点的坐标信息，第一项为横轴，第二项为纵轴", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetFullSize", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置控件的大小，支持比例形式以及绝对值", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "设置的轴向，可选的值有[\"x\",\"y\"]，\"x\"表示设置控件的宽度，\"y\"表示设置控件的高度", 
                    "param_name": "axis", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "设置的参数，具体见备注", 
                    "param_name": "paramDict", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置控件的大小，支持百分比以及绝对值", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetFullSize", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "获取控件的大小，支持百分比以及绝对值", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "要获取的轴向，可选的值有[\"x\",\"y\"]，\"x\"表示获取控件的宽度，\"y\"表示获取控件的高度", 
                    "param_name": "axis", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "控件的大小信息，详见备注"
            }, 
            "state": [
                {
                    "comment": "获取控件的大小，支持比例值以及绝对值", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetFullPosition", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置控件的锚点坐标（全局坐标），支持比例值以及绝对值", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "设置的轴向，可选的值有[\"x\",\"y\"]，\"x\"表示设置控件锚点的x坐标，\"y\"表示设置控件锚点的y坐标", 
                    "param_name": "axis", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "设置的参数，具体见备注", 
                    "param_name": "paramDict", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置控件的锚点坐标（全局坐标），支持比例值以及绝对值", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetFullPosition", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "获取控件的锚点坐标，支持比例值以及绝对值", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "要获取的轴向，可选的值有[\"x\",\"y\"]，\"x\"表示获取控件的x坐标，\"y\"表示获取控件的y坐标", 
                    "param_name": "axis", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "控件的大小信息，详见备注"
            }, 
            "state": [
                {
                    "comment": "获取控件的锚点坐标，支持比例值以及绝对值", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetAnchorFrom", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置控件相对于父节点的锚点", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "相对于父节点的锚点，可选的值详见备注", 
                    "param_name": "anchorFrom", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置控件相对于父节点的锚点", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetAnchorFrom", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "判断控件相对于父节点的哪个锚点来计算位置与大小", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "控件计算位置大小所依赖的父节点锚点位置信息，具体返回值的意义可参考SetAnchorFrom接口的备注"
            }, 
            "state": [
                {
                    "comment": "判断控件相对于父节点的哪个锚点来计算位置与大小", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetAnchorTo", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置控件自身锚点位置", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "控件自身锚点位置，可选的值详见备注", 
                    "param_name": "anchorTo", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置控件自身锚点位置", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetAnchorTo", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "获取控件自身锚点位置信息", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "该控件自身锚点位置信息，具体返回值的意义可参考SetAnchorTo接口的备注"
            }, 
            "state": [
                {
                    "comment": "获取控件自身锚点位置信息", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetClipOffset", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置控件的裁剪偏移信息", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "该控件的裁剪偏移信息，第一项为横轴，第二项为纵轴", 
                    "param_name": "clipOffset", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置控件的裁剪偏移信息", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetClipOffset", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "获取控件的裁剪偏移信息", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "该控件的裁剪偏移信息，第一项为横轴，第二项为纵轴"
            }, 
            "state": [
                {
                    "comment": "获取控件的裁剪偏移信息", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetClipsChildren", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置控件是否开启裁剪内容", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "True表示开启，False表示关闭", 
                    "param_name": "clipsChildren", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置控件是否开启裁剪内容", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetClipsChildren", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "根据控件路径返回某控件是否开启裁剪内容", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "该控件是否已开启裁剪内容"
            }, 
            "state": [
                {
                    "comment": "根据控件路径返回某控件是否开启裁剪内容", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetMaxSize", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置控件所允许的最大的大小值", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "该控件所允许的最大的大小值，第一项为横轴，第二项为纵轴", 
                    "param_name": "maxSize", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置控件所允许的最大的大小值", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetMaxSize", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "获取控件所允许的最大的大小值", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "该控件所允许的最大的大小值，第一项为横轴，第二项为纵轴"
            }, 
            "state": [
                {
                    "comment": "获取控件所允许的最大的大小值", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetMinSize", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置控件所允许的最小的大小值", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "该控件所允许的大小值，第一项为横轴，第二项为纵轴", 
                    "param_name": "minSize", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置控件所允许的最小的大小值", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetMinSize", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "获取控件所允许的最小的大小值", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "该控件所允许的最小的大小值，第一项为横轴，第二项为纵轴"
            }, 
            "state": [
                {
                    "comment": "获取控件所允许的最小的大小值", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPosition", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "获取控件相对父节点的坐标", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "该控件相对父节点的坐标信息，第一项为横轴，第二项为纵轴"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetGlobalPosition", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "获取控件全局坐标", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "该控件全局坐标信息，第一项为横轴，第二项为纵轴"
            }, 
            "state": [
                {
                    "comment": "获取控件全局坐标", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSize", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置控件的大小", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "该控件的大小信息，第一项为横轴，第二项为纵轴", 
                    "param_name": "size", 
                    "param_type": "tuple(float,float)"
                }, 
                {
                    "param_comment": "是否同时调整子控件尺寸，默认为False", 
                    "param_name": "resizeChildren", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetSize", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "获取控件的大小", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "该控件的大小信息，第一项为横轴，第二项为纵轴"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetVisible", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "根据控件路径选择是否显示某控件，可以通过传入空字符串（\"\"）的方式来调整整个JSON的显示/隐藏", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "False为隐藏该控件，True为显示该控件", 
                    "param_name": "visible", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否需要强制刷新，默认值为True。置True则按照马上进行刷新，新的visible状态生效。置False，则需要再次调用UpdateScreen使新状态生效。如有大量SetVisible操作且非在同一帧执行，建议设置为False,需要更新时再调用UpdateScreen接口刷新界面及相关控件数据", 
                    "param_name": "forceUpdate", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }, 
                {
                    "comment": "添加说明可以通过传入空字符串（\"\"）的方式来调整整个JSON的显示/隐藏", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "xltang"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetVisible", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "根据控件路径返回某控件是否已显示", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "该控件是否已显示"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetTouchEnable", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置控件是否可点击交互", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "False为不响应，True为恢复响应", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetAlpha", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置节点的透明度，仅对image和label控件生效", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "透明度，取值0-1之间，0表示完全透明，1表示完全不透明", 
                    "param_name": "alpha", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }, 
                {
                    "comment": "设置控件透明度", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "lidi"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetLayer", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置控件节点的层级，可以通过传入空字符串（\"\"）的方式来调整整个JSON的基础层级", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "设置层级", 
                    "param_name": "layer", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否需要同步刷新，默认值为True。置True为游戏在同一帧根据该控件的层级进行相关计算，置False则在下一帧进行计算。如同一帧有大量SetLayer操作建议置False，操作结束后调用一次ScreenNode.UpdateScreen接口刷新界面及相关控件数据", 
                    "param_name": "syncRefresh", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否需要强制刷新，默认值为True。置True则按照syncRefresh逻辑进行同步或者下一帧刷新，置False则当前帧和下一帧均不刷新，需要手动调用UpdateScreen进行刷新。如有大量SetLayer操作且非在同一帧执行，建议设置为False,需要更新时再调用UpdateScreen接口刷新界面及相关控件数据", 
                    "param_name": "forceUpdate", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "外放SetLayer接口", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "panlei"
                }, 
                {
                    "comment": "添加说明可以通过传入空字符串（\"\"）的方式来调整整个JSON的基础层级", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "xltang"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPath", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "返回当前控件的相对路径，路径从画布节点开始算起", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "当前控件的相对路径，路径从画布节点开始算起"
            }, 
            "state": [
                {
                    "comment": "返回当前控件的相对路径，路径从画布节点开始算起", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "hdy"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetChildByName", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "根据子控件的名称获取BaseUIControl实例", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "子节点名称", 
                    "param_name": "childName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "BaseUIControl", 
                "return_comment": "子控件的BaseUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetChildByPath", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "根据相对路径获取BaseUIControl实例", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "相对当前BaseUIControl路径的路径", 
                    "param_name": "childPath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "BaseUIControl", 
                "return_comment": "子控件的BaseUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "resetAnimation", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "重置该控件的动画", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "重置该控件的动画", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "PauseAnimation", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "暂停动画，暂停后的动画会停在当前的状态", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "动画的属性名称，默认值为\"all\"，表示暂停所有动画，不为\"all\"的时候表示单个动画的暂停，比如propertyName==\"size\"时，表示暂停尺寸属性上的动画", 
                    "param_name": "propertyName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否暂停成功"
            }, 
            "state": [
                {
                    "comment": "暂停动画，暂停后的动画会停在当前的状态", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "PlayAnimation", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "继续播放动画，从动画当前状态开始播放", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "动画的属性名称，默认值为\"all\"，表示播放所有动画，不为\"all\"的时候表示单个动画的播放，比如propertyName==\"size\"时，表示播放尺寸属性上的动画", 
                    "param_name": "propertyName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否播放成功"
            }, 
            "state": [
                {
                    "comment": "继续播放动画，从动画当前状态开始播放", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "StopAnimation", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "停止动画，动画将恢复到第一段动画片段的from状态", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "动画的属性名称，默认值为\"all\"，表示停止所有动画，不为\"all\"的时候表示单个动画的停止，比如propertyName==\"size\"时，表示停止尺寸属性上的动画", 
                    "param_name": "propertyName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否停止成功"
            }, 
            "state": [
                {
                    "comment": "停止动画，动画将恢复到第一段动画片段的from状态", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetAnimation", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "给单一属性设置动画，已有重复的会设置失败，需要先remove", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "要设置的动画的属性名称，无默认值，值必须为单一属性（不能填\"all\"）", 
                    "param_name": "propertyName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画的命名空间，类似于自定义控件，动画也是可以定义到某个命名空间的，详见备注", 
                    "param_name": "namespace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画的名称，详见备注", 
                    "param_name": "animName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画添加后是否自动播放，默认值为False，表示不进行播放", 
                    "param_name": "autoPlay", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否添加成功"
            }, 
            "state": [
                {
                    "comment": "给单一属性设置动画，每次设置都会覆盖上一次的设置", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveAnimation", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "删除单一属性的动画，删除后的值与当前状态有关，建议删除后重新设置该属性值", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "要删除动画的属性名称，无默认值，值必须为单一属性（不能填\"all\"）", 
                    "param_name": "propertyName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "删除单一属性的动画，删除后的值与当前状态有关，建议删除后重新设置该属性值", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetAnimEndCallback", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置动画播放结束后的回调，每次设置都会覆盖上一次的设置", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "动画的名称，请不要包含动画的命名空间", 
                    "param_name": "animName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "回调，无参数无返回值的函数", 
                    "param_name": "func", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置动画播放结束后的回调，每次设置都会覆盖上一次的设置", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveAnimEndCallback", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "移除动画播放结束后的回调", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "动画的名称，请不要包含动画的命名空间", 
                    "param_name": "animName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否移除成功"
            }, 
            "state": [
                {
                    "comment": "移除动画播放结束后的回调", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "IsAnimEndCallbackRegistered", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "控件是否对名称为animName的动画进行了注册回调", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "动画的名称，请不要包含动画的命名空间", 
                    "param_name": "animName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否对名称为animName的动画进行了注册回调"
            }, 
            "state": [
                {
                    "comment": "控件是否对名称为animName的动画进行了注册回调", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asLabel", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为LabelUIControl实例，如当前控件非Label类型则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "LabelUIControl", 
                "return_comment": "LabelUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asButton", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为ButtonUIControl实例，如当前控件非button类型则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "ButtonUIControl", 
                "return_comment": "ButtonUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asImage", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为ImageUIControl实例，如当前控件非image类型则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "ImageUIControl", 
                "return_comment": "ImageUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asGrid", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为GridUIControl实例，如当前控件非grid类型则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "GridUIControl", 
                "return_comment": "GridUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asScrollView", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为ScrollViewUIControl实例，如当前控件非scrollview类型则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "ScrollViewUIControl", 
                "return_comment": "ScrollViewUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asSwitchToggle", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为SwitchToggleUIControl实例，如当前控件非panel类型或非toggle则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "SwitchToggleUIControl", 
                "return_comment": "SwitchToggleUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asTextEditBox", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为TextEditBoxUIControl实例，如当前控件非editbox类型则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "TextEditBoxUIControl", 
                "return_comment": "TextEditBoxUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asProgressBar", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为ProgressBarUIControl实例，如当前控件非panel类型则返回None", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "进度条填充图片路径，默认为\"/filled_progress_bar\",该参数影响该控件API的效果", 
                    "param_name": "fillImagePath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "ProgressBarUIControl", 
                "return_comment": "ProgressBarUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asNeteasePaperDoll", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为NeteasePaperDollUIControl实例，如当前控件非custom类型则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "NeteasePaperDollUIControl", 
                "return_comment": "NeteasePaperDollUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asMiniMap", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为MiniMapUIControl实例，如当前控件非小地图类型则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "MiniMapUIControl", 
                "return_comment": "MiniMapUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.22.nodoc", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asSlider", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为SliderUIControl实例，如当前控件非滑动条类型则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "SliderUIControl", 
                "return_comment": "SliderUIControl"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.23.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asItemRenderer", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为ItemRenderer实例，如当前控件非custom类型则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "ItemRendererUIControl", 
                "return_comment": "ItemRendererUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.24.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asNeteaseComboBox", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为NeteaseComboBoxUIControl实例，如当前控件非panel类型则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "NeteaseComboBoxUIControl", 
                "return_comment": "NeteaseComboBoxUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asStackPanel", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为StackPanelUIControl实例，如当前控件非stackPanel类型则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "StackPanelUIControl", 
                "return_comment": "StackPanelUIControl实例"
            }, 
            "state": [
                {
                    "comment": "将当前BaseUIControl转换为StackPanelUIControl实例", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asInputPanel", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为InputPanelUIControl实例，如当前控件非inputPanel类型则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "InputPanelUIControl", 
                "return_comment": "InputPanelUIControl实例"
            }, 
            "state": [
                {
                    "comment": "将当前BaseUIControl转换为InputPanelUIControl实例", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "asSelectionWheel", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "将当前BaseUIControl转换为SelectionWheelUIControl实例，如当前控件非selectionWheel类型则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "SelectionWheelUIControl", 
                "return_comment": "SelectionWheelUIControl实例"
            }, 
            "state": [
                {
                    "comment": "将当前BaseUIControl转换为SelectionWheelUIControl实例", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPropertyBag", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "获取PropertyBag", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "PropertyBag"
            }, 
            "state": [
                {
                    "comment": "获取PropertyBag", 
                    "operation": "新增", 
                    "version": "3.4", 
                    "author": "qiuyukun"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetPropertyBag", 
            "path": "client.ui.controls.baseUIControl.BaseUIControl", 
            "desc": "设置PropertyBag,将使用字典中的每个值来覆盖原本PropertyBag中的值", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "需要设置的属性字典，字典键值对的值仅支持设置字符串、数字、布尔值类型，其余类型会导致设置失败", 
                    "param_name": "params", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置PropertyBag", 
                    "operation": "新增", 
                    "version": "3.4", 
                    "author": "qiuyukun"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.blockStateCompServer.BlockStateComponentServer": [
        {
            "name": "GetBlockStates", 
            "path": "server.component.blockStateCompServer.BlockStateComponentServer", 
            "desc": "获取<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#方块状态\">方块状态</a>", 
            "doc_class_path": [
                "方块/方块状态与附加值"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "方块状态，异常时为None"
            }, 
            "state": [
                {
                    "comment": "获取方块状态", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "新增dimensionId参数，默认为-1，传入非负值时不依赖playerId，可获取对应维度的常加载区块内方块状态", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "基岩版1.19更新后，部分包含多个种类的方块（例如，羊毛类，珊瑚类，栅栏类等类型的方块）被拆分成单独的方块，拥有新的identifier及方块附加值，因此原来的方块附加值及部分方块状态不再适用，也请注意尽量使用新的方块identifier。", 
                    "operation": "调整", 
                    "version": "2.12", 
                    "author": "xjr"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetBlockStates", 
            "path": "server.component.blockStateCompServer.BlockStateComponentServer", 
            "desc": "设置<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#方块状态\">方块状态</a>", 
            "doc_class_path": [
                "方块/方块状态与附加值"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "方块状态", 
                    "param_name": "data", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置方块状态", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "增加参数dimensionId，默认为-1，传入非负值时不依赖playerId，可设置对应维度的常加载区块内方块状态", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "基岩版1.19更新后，部分包含多个种类的方块（例如，羊毛类，珊瑚类，栅栏类等类型的方块）被拆分成单独的方块，拥有新的identifier及方块附加值，因此原来的方块附加值及部分方块状态不再适用，也请注意尽量使用新的方块identifier。", 
                    "operation": "调整", 
                    "version": "2.12", 
                    "author": "xjr"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlockAuxValueFromStates", 
            "path": "server.component.blockStateCompServer.BlockStateComponentServer", 
            "desc": "根据方块名称和<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#方块状态\">方块状态</a>获取方块附加值AuxValue", 
            "doc_class_path": [
                "方块/方块状态与附加值"
            ], 
            "param": [
                {
                    "param_comment": "方块名称", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块状态", 
                    "param_name": "states", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "方块附加值AuxValue，异常时为-1"
            }, 
            "state": [
                {
                    "comment": "根据方块名称和<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#方块状态\">方块状态</a>获取方块附加值AuxValue", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "基岩版1.19更新后，部分包含多个种类的方块（例如，羊毛类，珊瑚类，栅栏类等类型的方块）被拆分成单独的方块，拥有新的identifier及方块附加值，因此原来的方块附加值及部分方块状态不再适用，也请注意尽量使用新的方块identifier。", 
                    "operation": "调整", 
                    "version": "2.12", 
                    "author": "xjr"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlockStatesFromAuxValue", 
            "path": "server.component.blockStateCompServer.BlockStateComponentServer", 
            "desc": "根据方块名称和方块附加值AuxValue获取<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#方块状态\">方块状态</a>", 
            "doc_class_path": [
                "方块/方块状态与附加值"
            ], 
            "param": [
                {
                    "param_comment": "方块名称", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块附加值AuxValue", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "方块状态，异常时为None"
            }, 
            "state": [
                {
                    "comment": "根据方块名称和方块附加值AuxValue获取方块状态", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "基岩版1.19更新后，部分包含多个种类的方块（例如，羊毛类，珊瑚类，栅栏类等类型的方块）被拆分成单独的方块，拥有新的identifier及方块附加值，因此原来的方块附加值及部分方块状态不再适用，也请注意尽量使用新的方块identifier。", 
                    "operation": "调整", 
                    "version": "2.12", 
                    "author": "xjr"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.exDataCompServer.ExDataCompServer": [
        {
            "name": "SetExtraData", 
            "path": "server.component.exDataCompServer.ExDataCompServer", 
            "desc": "用于设置实体的自定义数据或者世界的自定义数据，数据以键值对的形式保存。设置实体数据时使用对应实体id创建组件，设置世界数据时使用levelId创建组件", 
            "doc_class_path": [
                "实体/自定义数据", 
                "世界/自定义数据"
            ], 
            "param": [
                {
                    "param_comment": "自定义key", 
                    "param_name": "key", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "key对应的值，支持python基本数据类型", 
                    "param_name": "value", 
                    "param_type": "any"
                }, 
                {
                    "param_comment": "默认自动保存，默认为True，如果批量设置数据，请将该参数设置为False，同时在设置数据完毕时调用SaveExtraData接口", 
                    "param_name": "autoSave", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "新增参数autoSave，可设置是否自动保存数据，默认为True", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SaveExtraData", 
            "path": "server.component.exDataCompServer.ExDataCompServer", 
            "desc": "用于保存实体的自定义数据或者世界的自定义数据", 
            "doc_class_path": [
                "实体/自定义数据", 
                "世界/自定义数据"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "保存结果"
            }, 
            "state": [
                {
                    "comment": "保存实体的自定义数据或者世界的自定义数据", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "CleanExtraData", 
            "path": "server.component.exDataCompServer.ExDataCompServer", 
            "desc": "清除实体的自定义数据或者世界的自定义数据，清除实体数据时使用对应实体id创建组件，清除世界数据时使用levelId创建组件", 
            "doc_class_path": [
                "实体/自定义数据", 
                "世界/自定义数据"
            ], 
            "param": [
                {
                    "param_comment": "自定义key", 
                    "param_name": "key", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "清理指定key的实体数据/全局数据，数据存放到leveldb。", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetExtraData", 
            "path": "server.component.exDataCompServer.ExDataCompServer", 
            "desc": "获取实体的自定义数据或者世界的自定义数据，某个键所对应的值。获取实体数据时使用对应实体id创建组件，获取世界数据时使用levelId创建组件", 
            "doc_class_path": [
                "实体/自定义数据", 
                "世界/自定义数据"
            ], 
            "param": [
                {
                    "param_comment": "自定义key", 
                    "param_name": "key", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "any", 
                "return_comment": "key对应的值"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetWholeExtraData", 
            "path": "server.component.exDataCompServer.ExDataCompServer", 
            "desc": "获取完整的实体的自定义数据或者世界的自定义数据，获取实体数据时使用对应实体id创建组件，获取世界数据时使用levelId创建组件", 
            "doc_class_path": [
                "实体/自定义数据", 
                "世界/自定义数据"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict或None", 
                "return_comment": "获取指定实体或者全局的额外存储数据字典，假如没有任何额外存储数据，那么返回None或者空字典"
            }, 
            "state": [
                {
                    "comment": "获取完整的实体数据/全局数据字典，数据存放到leveldb。", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.blockCompServer.BlockCompServer": [
        {
            "name": "RegisterBlockPatterns", 
            "path": "server.component.blockCompServer.BlockCompServer", 
            "desc": "注册特殊方块组合", 
            "doc_class_path": [
                "世界/方块组合"
            ], 
            "param": [
                {
                    "param_comment": "方块组合位置", 
                    "param_name": "pattern", 
                    "param_type": "list(str)"
                }, 
                {
                    "param_comment": "方块组合类型", 
                    "param_name": "defines", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "合成结果", 
                    "param_name": "result_actor_name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "已有相同pattern以及defines组合的合成时返回False", 
                    "operation": "调整", 
                    "version": "2.3", 
                    "author": "wdd"
                }, 
                {
                    "comment": "支持具体方块匹配/通配，namespace:name:aux_value，当aux_value不填或者填*时为通配，如果有具体aux_value时只匹配特定方块", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "CreateMicroBlockResStr", 
            "path": "server.component.blockCompServer.BlockCompServer", 
            "desc": "生成微缩方块资源Json字符串", 
            "doc_class_path": [
                "世界/方块组合"
            ], 
            "param": [
                {
                    "param_comment": "微缩方块唯一标识", 
                    "param_name": "identifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "微缩起始坐标", 
                    "param_name": "start", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "微缩结束坐标", 
                    "param_name": "end", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "默认为None，微缩方块颜色对应表", 
                    "param_name": "colorMap", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "默认为False，是否合并同类型方块", 
                    "param_name": "isMerge", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "默认为空字符串，微缩方块图标，需要定义在 terrain_texture.json 中", 
                    "param_name": "icon", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "生成的微缩方块的资源字符串"
            }, 
            "state": [
                {
                    "comment": "创建微缩方块资源字符串", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "guoxun"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlankBlockPalette", 
            "path": "server.component.blockCompServer.BlockCompServer", 
            "desc": "获取一个空白的方块调色板。", 
            "doc_class_path": [
                "世界/方块组合"
            ], 
            "param": [], 
            "return": {
                "return_type": "BlockPaletteComponent", 
                "return_comment": "返回生成的方块调色板实例，如获取失败则返回None"
            }, 
            "state": [
                {
                    "comment": "获取一个空白的方块调色板", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlockPaletteFromPosList", 
            "path": "server.component.blockCompServer.BlockCompServer", 
            "desc": "根据输入的方块位置列表创建并获取一个方块调色板，方块调色板用于描述和记录世界中的多个方块的组合。创建的方块调色板包含了这个位置列表中的所有方块及其相对位置。", 
            "doc_class_path": [
                "世界/方块组合"
            ], 
            "param": [
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "方块位置列表", 
                    "param_name": "posList", 
                    "param_type": "list(tuple(int,int,int))"
                }
            ], 
            "return": {
                "return_type": "BlockPaletteComponent", 
                "return_comment": "返回生成的方块调色板实例，如创建失败则返回None"
            }, 
            "state": [
                {
                    "comment": "根据输入的方块位置列表创建并获取一个方块调色板", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlockPaletteBetweenPos", 
            "path": "server.component.blockCompServer.BlockCompServer", 
            "desc": "根据输入的两个方块位置创建并获取一个方块调色板，方块调色板用于描述和记录世界中的多个方块的组合。这个方块调色板包含了这两个位置之间的所有方块及其相对位置。", 
            "doc_class_path": [
                "世界/方块组合"
            ], 
            "param": [
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "起始方块位置", 
                    "param_name": "startBlockPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "终点方块位置", 
                    "param_name": "endBlockPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "生成的方块调色板中是否剔除起始方块位置和终点方块位置之间多余的空气方块，默认true。值为True时，方块调色板中不记录这两个位置范围内多余的空气方块；值为False时，方块调色板中将记录这两个位置范围内多余的空气方块。", 
                    "param_name": "eliminateAir", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "BlockPaletteComponent", 
                "return_comment": "返回生成的方块调色板实例，如创建失败则返回None。如果输入的两个方块位置之间全是空气，在eliminateAir为False情况下，则返回一个包含所有空气方块的方块调色板，而在eliminateAir为True情况下，则直接返回None。"
            }, 
            "state": [
                {
                    "comment": "根据输入的两个方块位置创建并获取一个方块调色板", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }, 
                {
                    "comment": "增加eliminateAir参数，可决定生成的方块调色板中是否剔除多余的空气方块。", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetBlockByBlockPalette", 
            "path": "server.component.blockCompServer.BlockCompServer", 
            "desc": "根据输入的方块调色板内容，将调色板内记录的所有方块设置为实际的方块。", 
            "doc_class_path": [
                "世界/方块组合"
            ], 
            "param": [
                {
                    "param_comment": "方块调色板，由GetBlockPaletteBetweenPos以及GetBlockPaletteFromPosList接口获取", 
                    "param_name": "blockPalette", 
                    "param_type": "BlockPaletteComponent"
                }, 
                {
                    "param_comment": "方块所在维度。如果输入的数值小于0，则使用entityId获取设置方块的区块。", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "设置方块的原点位置，将以这个位置作为原点设置方块", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块组合体的旋转，旋转方向为绕设置方块的原点位置所在的y轴进行旋转，旋转角度仅支持-270,-180,-90,0,90,180,270。如果传入的不是这些值，将取其中最接近输入值的数值。", 
                    "param_name": "rotation", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "冲突模式枚举，可选参数，默认为0。在生成过程中，遇到生成的位置有其他方块的情况时，那么将会根据冲突模式来进行处理。可以输入的值为:0,1,2, 分别代表: 0: 替换地图中的方块，1: 跳过这个方块，2: 放弃之后的生成过程。", 
                    "param_name": "conflictMode", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "生成过程是否成功，无法完成整个生成过程返回False，完成整个生成过程则返回True。如果冲突模式为2时，遇到冲突方块时放弃之后的生成过程，这时候接口也会返回False。"
            }, 
            "state": [
                {
                    "comment": "根据输入的方块调色板内容，将调色板内记录的所有方块设置为实际的方块。", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.effectCompClient.EffectComponentClient": [
        {
            "name": "GetAllEffects", 
            "path": "client.component.effectCompClient.EffectComponentClient", 
            "desc": "获取实体当前所有状态效果", 
            "doc_class_path": [
                "实体/状态效果"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(dict)或None", 
                "return_comment": "状态效果信息字典的list。无状态效果时返回None"
            }, 
            "state": [
                {
                    "comment": "获取实体当前所有状态效果", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "huangxiaojie03"
                }, 
                {
                    "comment": "增加浮点型持续时间", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HasEffect", 
            "path": "client.component.effectCompClient.EffectComponentClient", 
            "desc": "获取实体是否存在当前状态效果", 
            "doc_class_path": [
                "实体/状态效果"
            ], 
            "param": [
                {
                    "param_comment": "状态效果名称字符串，包括自定义状态效果和原版状态效果，原版状态效果可在wiki查询", 
                    "param_name": "effectName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回是否存在状态效果"
            }, 
            "state": [
                {
                    "comment": "获取实体是否存在当前状态效果", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.posCompClient.PosComponentClient": [
        {
            "name": "GetPos", 
            "path": "client.component.posCompClient.PosComponentClient", 
            "desc": "获取实体位置", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "实体的坐标"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetFootPos", 
            "path": "client.component.posCompClient.PosComponentClient", 
            "desc": "获取实体脚所在的位置", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "位置信息"
            }, 
            "state": [
                {
                    "comment": "获取实体脚底的位置", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "liaoyi"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.biomeCompServer.BiomeCompServer": [
        {
            "name": "SetBiomeInfo", 
            "path": "server.component.biomeCompServer.BiomeCompServer", 
            "desc": "设置群系天气相关参数", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "群系名字", 
                    "param_name": "biomeName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "积雪堆积量的最小值和最大值,最小值必须小于最大值", 
                    "param_name": "snowAccumulation", 
                    "param_type": "tuple(float,float)"
                }, 
                {
                    "param_comment": "温度,小于等于0.15时将会下雪,大于1没有特殊意义", 
                    "param_name": "temperature", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "降雨(雪)强度,会影响湿度", 
                    "param_name": "downfall", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "是否降雨(雪),只有为True时才会下雨(雪)", 
                    "param_name": "isRain", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置群系天气相关参数,受引擎限制,目前snowAccumulation参数没有效果,downfall目前只影响湿度", 
                    "operation": "新增", 
                    "version": "3.0", 
                    "author": "qyk"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBiomeInfo", 
            "path": "server.component.biomeCompServer.BiomeCompServer", 
            "desc": "获取群系天气相关参数", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "群系名字", 
                    "param_name": "biomeName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "群系天气相关参数,获取失败返回None"
            }, 
            "state": [
                {
                    "comment": "获取群系天气相关参数", 
                    "operation": "新增", 
                    "version": "3.0", 
                    "author": "qyk"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBiomeName", 
            "path": "server.component.biomeCompServer.BiomeCompServer", 
            "desc": "获取某一位置所属的生物群系信息", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "指定位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "维度id", 
                    "param_name": "dimId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "该位置所属生物群系name"
            }, 
            "state": [
                {
                    "comment": "修复了在mod有自定义下界的情况下，获取原版下界未加载区块变成自定义下界群系的问题。", 
                    "operation": "修复", 
                    "version": "1.24", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "支持自定义下界/自定义末地使用", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "添加维度参数，并支持获取未加载区块的群系，不再需要使用playerId创建comp", 
                    "operation": "调整", 
                    "version": "1.19", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetBiomeByPos", 
            "path": "server.component.biomeCompServer.BiomeCompServer", 
            "desc": "设置某一位置所属的生物群系信息", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "指定位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "指定生物群系名称", 
                    "param_name": "biomeName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "维度id", 
                    "param_name": "dimId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "增加设置生物群系接口", 
                    "operation": "新增", 
                    "version": "3.0", 
                    "author": "bailei"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetBiomeByPosList", 
            "path": "server.component.biomeCompServer.BiomeCompServer", 
            "desc": "设置所有列表中位置所属的生物群系信息", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "要设置的位置列表", 
                    "param_name": "posList", 
                    "param_type": "list(tuple(int,int,int))"
                }, 
                {
                    "param_comment": "指定生物群系名称", 
                    "param_name": "biomeName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "维度id", 
                    "param_name": "dimId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "设置状态信息"
            }, 
            "state": [
                {
                    "comment": "增加设置生物群系接口", 
                    "operation": "新增", 
                    "version": "3.0", 
                    "author": "bailei"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetBiomeByVolume", 
            "path": "server.component.biomeCompServer.BiomeCompServer", 
            "desc": "设置长方体空间中所属的生物群系信息", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "长方体中最小的位置坐标", 
                    "param_name": "minPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "长方体中最大的位置坐标", 
                    "param_name": "maxPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "指定生物群系名称", 
                    "param_name": "biomeName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "维度id", 
                    "param_name": "dimId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否全部都成功，有任何部分空间设置失败都会返回False"
            }, 
            "state": [
                {
                    "comment": "增加设置生物群系接口", 
                    "operation": "新增", 
                    "version": "3.0", 
                    "author": "bailei"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.blockCompClient.BlockCompClient": [
        {
            "name": "GetBlankBlockPalette", 
            "path": "client.component.blockCompClient.BlockCompClient", 
            "desc": "获取一个空白的方块调色板。", 
            "doc_class_path": [
                "世界/方块组合"
            ], 
            "param": [], 
            "return": {
                "return_type": "BlockPaletteComponent", 
                "return_comment": "返回生成的方块调色板实例，如获取失败则返回None"
            }, 
            "state": [
                {
                    "comment": "获取一个空白的方块调色板", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBlockPaletteFromPosList", 
            "path": "client.component.blockCompClient.BlockCompClient", 
            "desc": "根据输入的方块位置列表创建并获取一个方块调色板，方块调色板用于描述和记录世界中的多个方块的组合。创建的方块调色板包含了这个位置列表中的所有方块及其相对位置。", 
            "doc_class_path": [
                "世界/方块组合"
            ], 
            "param": [
                {
                    "param_comment": "方块位置列表", 
                    "param_name": "posList", 
                    "param_type": "list(tuple(int,int,int))"
                }
            ], 
            "return": {
                "return_type": "BlockPaletteComponent", 
                "return_comment": "返回生成的方块调色板实例，如创建失败则返回None"
            }, 
            "state": [
                {
                    "comment": "根据输入的方块位置列表创建并获取一个方块调色板", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBlockPaletteBetweenPos", 
            "path": "client.component.blockCompClient.BlockCompClient", 
            "desc": "根据输入的两个位置创建并获取一个方块调色板，该接口会搜索这两个位置之间的所有方块创建方块调色板，方块调色板用于描述和记录世界中的多个方块的组合。这个方块调色板包含了这两个位置之间的所有方块及其相对位置。", 
            "doc_class_path": [
                "世界/方块组合"
            ], 
            "param": [
                {
                    "param_comment": "起始位置", 
                    "param_name": "startPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "终点位置", 
                    "param_name": "endPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "生成的方块调色板中是否剔除起始位置和终点位置之间多余的空气方块，默认True。值为True时，方块调色板中不记录这两个位置范围内多余的空气方块；值为False时，方块调色板中将记录这两个位置范围内多余的空气方块。", 
                    "param_name": "eliminateAir", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "BlockPaletteComponent", 
                "return_comment": "返回生成的方块调色板实例，如创建失败则返回None。如果输入的两个方块位置之间全是空气，在eliminateAir为False情况下，则返回一个包含所有空气方块的方块调色板，而在eliminateAir为True情况下，则直接返回None。"
            }, 
            "state": [
                {
                    "comment": "根据输入的两个位置创建并获取一个方块调色板", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }, 
                {
                    "comment": "增加eliminateAir参数，可决定生成的方块调色板中是否剔除多余的空气方块。", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.achievementCompClient.AchievementCompClient": [
        {
            "name": "SetAchievementGatePosition", 
            "path": "client.component.achievementCompClient.AchievementCompClient", 
            "desc": "设置自定义成就系统的入口按钮位置", 
            "doc_class_path": [
                "自定义UI/自定义成就系统"
            ], 
            "param": [
                {
                    "param_comment": "横轴坐标", 
                    "param_name": "x", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "竖轴坐标", 
                    "param_name": "y", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置自定义成就系统的入口按钮位置", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetAchievementGatePosition", 
            "path": "client.component.achievementCompClient.AchievementCompClient", 
            "desc": "获取自定义成就系统的入口按钮位置", 
            "doc_class_path": [
                "自定义UI/自定义成就系统"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "坐标信息，tuple(横轴坐标，竖轴坐标)，获取失败返回None"
            }, 
            "state": [
                {
                    "comment": "获取自定义成就系统的入口按钮位置", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.achievementCompServer.AchievementCompServer": [
        {
            "name": "GetNodeDetailInfo", 
            "path": "server.component.achievementCompServer.AchievementCompServer", 
            "desc": "获取对应玩家的对应节点信息", 
            "doc_class_path": [
                "自定义UI/自定义成就系统"
            ], 
            "param": [
                {
                    "param_comment": "玩家ID", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "节点ID", 
                    "param_name": "nodeId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "获取成功为对应玩家的对应节点的所有信息，包括json内的所有信息，外加一个“progress”属性用来存储该玩家该节点的进度，失败为None"
            }, 
            "state": [
                {
                    "comment": "获取自定义成就系统的成就节点信息的接口", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetNodeFinish", 
            "path": "server.component.achievementCompServer.AchievementCompServer", 
            "desc": "设置对应玩家的对应成就节点完成", 
            "doc_class_path": [
                "自定义UI/自定义成就系统"
            ], 
            "param": [
                {
                    "param_comment": "玩家ID", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "节点ID", 
                    "param_name": "nodeId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "请求回调函数,如果节点的json配置了为云节点，则调用此接口必须填写此参数，否则无法传到云端", 
                    "param_name": "callback", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "用于返回存储更新后的数据的函数，用于云成就节点，返回值必须为str类型，可选", 
                    "param_name": "getExtra", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功，当为云成就上报的时候，True表示上报了，具体情况请查阅callback函数的参数信息，False表示未上报"
            }, 
            "state": [
                {
                    "comment": "设置自定成就系统某个成就节点完成的接口", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddNodeProgress", 
            "path": "server.component.achievementCompServer.AchievementCompServer", 
            "desc": "增加对应玩家的对应成就节点的成就进度", 
            "doc_class_path": [
                "自定义UI/自定义成就系统"
            ], 
            "param": [
                {
                    "param_comment": "玩家ID", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "节点ID", 
                    "param_name": "nodeId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "增加该节点进度的值,只能填写大于0的正整数", 
                    "param_name": "delta", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "请求回调函数,如果节点的json配置了为云节点，则调用此接口必须填写此参数，否则无法传到云端", 
                    "param_name": "callback", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "用于返回存储更新后的数据的函数，用于云成就节点，返回值必须为str类型，可选", 
                    "param_name": "getExtra", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功，当为云成就上报的时候，True表示上报了，具体情况请查阅callback函数的参数信息，False表示未上报"
            }, 
            "state": [
                {
                    "comment": "添加自定义成就系统成就节点进度的接口", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetChildrenNode", 
            "path": "server.component.achievementCompServer.AchievementCompServer", 
            "desc": "获得该成就节点的下一级所有孩子节点的list", 
            "doc_class_path": [
                "自定义UI/自定义成就系统"
            ], 
            "param": [
                {
                    "param_comment": "节点ID", 
                    "param_name": "nodeId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "返回值为是否设置成功，成功为该节点的下一级所有孩子节点的list，失败为None"
            }, 
            "state": [
                {
                    "comment": "获得自定义成就系统中某成就节点的下一级所有孩子节点的接口", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "LobbyGetAchievementStorage", 
            "path": "server.component.achievementCompServer.AchievementCompServer", 
            "desc": "获取成就节点的存储的数据。", 
            "doc_class_path": [
                "成就"
            ], 
            "param": [
                {
                    "param_comment": "请求回调函数", 
                    "param_name": "callback", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "玩家playerId", 
                    "param_name": "playerId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "获取云成就存储进度的数据接口", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "cxz"
                }, 
                {
                    "comment": "支持在网络服使用", 
                    "operation": "调整", 
                    "version": "2.7", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "LobbySetAchievementStorage", 
            "path": "server.component.achievementCompServer.AchievementCompServer", 
            "desc": "添加成就节点的进度。", 
            "doc_class_path": [
                "成就"
            ], 
            "param": [
                {
                    "param_comment": "请求回调函数", 
                    "param_name": "callback", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "玩家playerId", 
                    "param_name": "playerId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "成就节点ID", 
                    "param_name": "nodeId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "进度值的变化量（必须大于0）", 
                    "param_name": "delta", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "用于返回存储更新后的数据的函数，返回值必须为str类型，可选", 
                    "param_name": "getExtraData", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "添加云成就成就进度的数据接口", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "cxz"
                }, 
                {
                    "comment": "支持在网络服使用", 
                    "operation": "调整", 
                    "version": "2.7", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.commandCompServer.CommandCompServer": [
        {
            "name": "SetCommand", 
            "path": "server.component.commandCompServer.CommandCompServer", 
            "desc": "使用游戏内指令", 
            "doc_class_path": [
                "世界/指令"
            ], 
            "param": [
                {
                    "param_comment": "指令", 
                    "param_name": "cmdStr", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "实体Id:可选，如果不设置，则随机选择玩家", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否输出到聊天窗口：可选，默认False，如果为True的话，指令正确时，才会和聊天框输入原生指令一样输出返回信息。只有当该参数为True的时候会触发OnCommandOutputServerEvent与OnCommandOutputClientEvent", 
                    "param_name": "showOutput", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "命令是否执行成功"
            }, 
            "state": [
                {
                    "comment": "当命令执行成功时返回True，否则返回False", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "xltang"
                }, 
                {
                    "comment": "支持任意实体entityId", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "chenyuekai"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetCommandPermissionLevel", 
            "path": "server.component.commandCompServer.CommandCompServer", 
            "desc": "返回设定使用/op命令时OP的权限等级（对应server.properties中的op-permission-level配置）", 
            "doc_class_path": [
                "世界/指令"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "权限等级：1-OP可以绕过重生点保护；2-OP可以使用所有单人游戏作弊命令；3-OP可以使用大多数多人游戏中独有的命令；4-OP可以使用所有命令"
            }, 
            "state": [
                {
                    "comment": "返回设定使用/op命令时OP的权限等级", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetCommandPermissionLevel", 
            "path": "server.component.commandCompServer.CommandCompServer", 
            "desc": "设置当玩家使用/op命令时OP的权限等级（对应server.properties中的op-permission-level配置）", 
            "doc_class_path": [
                "世界/指令"
            ], 
            "param": [
                {
                    "param_comment": "权限等级：1-OP可以绕过重生点保护；2-OP可以使用所有单人游戏作弊命令；3-OP可以使用大多数多人游戏中独有的命令；4-OP可以使用所有命令", 
                    "param_name": "opLevel", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "命令是否执行成功"
            }, 
            "state": [
                {
                    "comment": "设置当玩家使用/op命令时OP的权限等级", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetDefaultPlayerPermissionLevel", 
            "path": "server.component.commandCompServer.CommandCompServer", 
            "desc": "返回新玩家加入时的权限身份（对应server.properties中的default-player-permission-level配置）", 
            "doc_class_path": [
                "世界/指令"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "权限身份：0-Visitor；1-Member；2-Operator；3-自定义"
            }, 
            "state": [
                {
                    "comment": "返回新玩家加入时的权限身份", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetDefaultPlayerPermissionLevel", 
            "path": "server.component.commandCompServer.CommandCompServer", 
            "desc": "设置新玩家加入时的权限身份（对应server.properties中的default-player-permission-level配置）", 
            "doc_class_path": [
                "世界/指令"
            ], 
            "param": [
                {
                    "param_comment": "权限身份：0-Visitor；1-Member；2-Operator；3-自定义", 
                    "param_name": "opLevel", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "命令是否执行成功"
            }, 
            "state": [
                {
                    "comment": "设置新玩家加入时的权限身份", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.system.serverSystem.ServerSystem": [
        {
            "name": "BroadcastToAllClient", 
            "path": "server.system.serverSystem.ServerSystem", 
            "desc": "服务器广播事件到所有客户端", 
            "doc_class_path": [
                "通用/事件"
            ], 
            "param": [
                {
                    "param_comment": "事件名", 
                    "param_name": "eventName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "事件参数，一般用CreateEventData的返回值", 
                    "param_name": "eventData", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "NotifyToMultiClients", 
            "path": "server.system.serverSystem.ServerSystem", 
            "desc": "服务器发送事件到指定一批客户端，相比于在for循环内使用NotifyToClient性能更好", 
            "doc_class_path": [
                "通用/事件"
            ], 
            "param": [
                {
                    "param_comment": "客户端对应的playerId列表，playerId为玩家的entityId", 
                    "param_name": "targetIdList", 
                    "param_type": "list(str)"
                }, 
                {
                    "param_comment": "事件名", 
                    "param_name": "eventName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "事件参数，一般用CreateEventData的返回值", 
                    "param_name": "eventData", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": " 服务器发送事件到指定一批客户端", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "NotifyToClient", 
            "path": "server.system.serverSystem.ServerSystem", 
            "desc": "服务器发送事件到指定客户端", 
            "doc_class_path": [
                "通用/事件"
            ], 
            "param": [
                {
                    "param_comment": "客户端对应的Id，一般就是玩家Id", 
                    "param_name": "targetId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "事件名", 
                    "param_name": "eventName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "事件参数，一般用CreateEventData的返回值", 
                    "param_name": "eventData", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "CreateEngineEntityByNBT", 
            "path": "server.system.serverSystem.ServerSystem", 
            "desc": "根据nbt数据创建实体", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "实体nbt数据，可以通过EntityDefinitionsCompServer.GetEntityNBTTags获取", 
                    "param_name": "nbtDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "生成坐标,如果为空,则读取nbt中的Pos", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)或None"
                }, 
                {
                    "param_comment": "生成旋转,如果为空,则读取nbt中的Rotation", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float)或None"
                }, 
                {
                    "param_comment": "生成维度,默认为0", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否为npc，默认值为False。npc不会移动、转向、存盘。", 
                    "param_name": "isNpc", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否创建为全局实体，默认为None。None表示沿用nbt中是否为全局实体。设置为True或False表示覆盖nbt中的属性。全局实体不会因为玩家视野、加载范围限制而被卸载，行为与tick会一直跑，但不代表会一直存在，依然会受[清除](https://minecraft.fandom.com/zh/wiki/%E7%94%9F%E6%88%90#.E5.9F.BA.E5.B2.A9.E7.89.88_2)等原生逻辑影响，比如如果对有minecraft:despawn组件的生物创建全局实体，则还需要设置SetPersistent，否则离远后实体仍然会消失。全局实体会影响游戏性能，建议整个存档内同时存在的数量不超过10个。", 
                    "param_name": "isGlobal", 
                    "param_type": "None或bool"
                }
            ], 
            "return": {
                "return_type": "str或None", 
                "return_comment": "实体Id或者None"
            }, 
            "state": [
                {
                    "comment": "根据nbt数据创建实体", 
                    "operation": "新增", 
                    "version": "3.0", 
                    "author": "qyk"
                }, 
                {
                    "comment": "新增isGlobal参数，可创建全局实体，不受视野范围限制", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "CreateEngineEntityByTypeStr", 
            "path": "server.system.serverSystem.ServerSystem", 
            "desc": "创建指定identifier的实体", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "实体identifier，例如'minecraft:husk'", 
                    "param_name": "engineTypeStr", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "生成坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "（上下角度，左右角度）实体水平方向的俯仰角度和竖直方向的旋转角度，单位是角度而不是弧度。<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/10-Vector3.html\">MC坐标系说明</a>", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float)"
                }, 
                {
                    "param_comment": "生成的维度，默认值为0（0为主世界，1为地狱，2为末地）", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否为npc，默认值为False。npc不会移动、转向、存盘。", 
                    "param_name": "isNpc", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否创建为全局实体，默认为False。全局实体不会因为玩家视野、加载范围限制而被卸载，行为与tick会一直跑，但不代表会一直存在，依然会受[清除](https://minecraft.fandom.com/zh/wiki/%E7%94%9F%E6%88%90#.E5.9F.BA.E5.B2.A9.E7.89.88_2)等原生逻辑影响，比如如果对有minecraft:despawn组件的生物创建全局实体，则还需要设置SetPersistent，否则离远后实体仍然会消失。全局实体会影响游戏性能，建议整个存档内同时存在的数量不超过10个。", 
                    "param_name": "isGlobal", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "str或None", 
                "return_comment": "实体Id或者None"
            }, 
            "state": [
                {
                    "comment": "新增isGlobal参数，可创建全局实体，不受视野范围限制", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "CreateEngineItemEntity", 
            "path": "server.system.serverSystem.ServerSystem", 
            "desc": "用于创建物品实体（即掉落物），返回物品实体的entityId", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "设置dimension，默认为主世界", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "生成坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "str或None", 
                "return_comment": "实体Id或者None"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "DestroyEntity", 
            "path": "server.system.serverSystem.ServerSystem", 
            "desc": "销毁实体", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "销毁的实体ID", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否销毁成功"
            }, 
            "state": [
                {
                    "comment": "增加销毁实体返回值", 
                    "operation": "调整", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.ui.controls.neteasePaperDollUIControl.NeteasePaperDollUIControl": [
        {
            "name": "GetModelId", 
            "path": "client.ui.controls.neteasePaperDollUIControl.NeteasePaperDollUIControl", 
            "desc": "获取渲染的骨骼模型Id", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "骨骼模型Id，失败或者不存在返回-1"
            }, 
            "state": [
                {
                    "comment": "获取渲染的骨骼模型Id", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RenderEntity", 
            "path": "client.ui.controls.neteasePaperDollUIControl.NeteasePaperDollUIControl", 
            "desc": "渲染实体", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "渲染参数，详细说明请见备注", 
                    "param_name": "params", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "支持设置query.mod.变量", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "渲染实体", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }, 
                {
                    "comment": "param新增rotation_axis参数", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "cxz"
                }, 
                {
                    "comment": "支持使用实体identifier进行渲染", 
                    "operation": "调整", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }, 
                {
                    "comment": "支持设置x轴、z轴初始旋转", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "chenyuekai"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RenderSkeletonModel", 
            "path": "client.ui.controls.neteasePaperDollUIControl.NeteasePaperDollUIControl", 
            "desc": "渲染骨骼模型（不依赖实体）", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "渲染参数，详细说明请见备注", 
                    "param_name": "params", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "渲染骨骼模型（不依赖实体）", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }, 
                {
                    "comment": "param新增rotation_axis参数", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "cxz"
                }, 
                {
                    "comment": "新增light_direction参数，可以控制骨骼模型在纸娃娃中的打光方向", 
                    "operation": "调整", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }, 
                {
                    "comment": "支持设置x轴、z轴初始旋转", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "chenyuekai"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RenderBlockGeometryModel", 
            "path": "client.ui.controls.neteasePaperDollUIControl.NeteasePaperDollUIControl", 
            "desc": "渲染网格体模型", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "渲染参数，详细说明请见备注", 
                    "param_name": "params", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "渲染网格体模型", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "jishaobin"
                }, 
                {
                    "comment": "param新增rotation_axis参数", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "cxz"
                }, 
                {
                    "comment": "支持设置x轴、z轴初始旋转", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "chenyuekai"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.lootCompServer.LootComponentServer": [
        {
            "name": "GetLootItems", 
            "path": "server.component.lootCompServer.LootComponentServer", 
            "desc": "指定战利品表获取一次战利品，返回的物品与json定义的概率有关", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "战利品表的路径", 
                    "param_name": "lootPath", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "模拟被击杀的实体ID，默认为\"-1\"", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "模拟击杀该实体的实体ID，默认为\"-1\"", 
                    "param_name": "killerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "模拟击杀该实体的玩家的幸运值，默认为0.0", 
                    "param_name": "luck", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "是否获取UserData，默认为False", 
                    "param_name": "getUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "根据战利品表随机生成的物品字典列表"
            }, 
            "state": [
                {
                    "comment": "指定战利品表获取一次战利品", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.aiCommandCompServer.AiCommandComponentServer": [
        {
            "name": "Enable", 
            "path": "server.component.aiCommandCompServer.AiCommandComponentServer", 
            "desc": "启用官方魔法指令功能。需要在ClientLoadAddonsFinishServerEvent事件中调用。仅在联机大厅中生效。", 
            "doc_class_path": [
                "实体/魔法指令"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "启用结果"
            }, 
            "state": [
                {
                    "comment": "启用官方魔法指令功能", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "wj"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "Disable", 
            "path": "server.component.aiCommandCompServer.AiCommandComponentServer", 
            "desc": "关闭官方魔法指令功能。需要在ClientLoadAddonsFinishServerEvent事件中调用。仅在联机大厅中生效。", 
            "doc_class_path": [
                "实体/魔法指令"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "关闭结果"
            }, 
            "state": [
                {
                    "comment": "关闭官方魔法指令功能", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "wj"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.projectileCompServer.ProjectileComponentServer": [
        {
            "name": "CreateProjectileEntity", 
            "path": "server.component.projectileCompServer.ProjectileComponentServer", 
            "desc": "创建抛射物（直接发射）", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "创建者Id", 
                    "param_name": "spawnerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "创建抛射物的identifier，如minecraft:snowball", 
                    "param_name": "entityIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "默认为None，详细说明请见备注", 
                    "param_name": "param", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "创建抛射物的Id，失败时为“-1”"
            }, 
            "state": [
                {
                    "comment": "创建抛射物（直接发射）", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "增加auxvalue字段，支持定义原生弓箭、喷溅药水auxvalue值", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.tameCompServer.TameComponentServer": [
        {
            "name": "GetOwnerId", 
            "path": "server.component.tameCompServer.TameComponentServer", 
            "desc": "获取驯服生物的主人id", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "主人id，不存在时返回None"
            }, 
            "state": [
                {
                    "comment": "现在主人实体未在世界内加载也可以返回id", 
                    "operation": "调整", 
                    "version": "2.9", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetEntityTamed", 
            "path": "server.component.tameCompServer.TameComponentServer", 
            "desc": "设置生物驯服，需要配合 entityEvent组件使用。该类驯服不包含骑乘功能。", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "驯服玩家Id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "被驯服的生物Id", 
                    "param_name": "tamedId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "client.component.frameAniTransComp.FrameAniTransComp": [
        {
            "name": "GetPos", 
            "path": "client.component.frameAniTransComp.FrameAniTransComp", 
            "desc": "获取序列帧特效的位置", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "返回序列帧特效的世界坐标位置。"
            }, 
            "state": [
                {
                    "comment": "获取序列帧特效的世界坐标位置。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetPos", 
            "path": "client.component.frameAniTransComp.FrameAniTransComp", 
            "desc": "设置序列帧的位置", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "世界坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetRot", 
            "path": "client.component.frameAniTransComp.FrameAniTransComp", 
            "desc": "获取序列帧特效的旋转角度", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "返回序列帧特效的旋转角度。"
            }, 
            "state": [
                {
                    "comment": "获取序列帧特效的旋转角度。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetRot", 
            "path": "client.component.frameAniTransComp.FrameAniTransComp", 
            "desc": "设置序列帧的旋转", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "按顺序绕局部坐标系的+x，-y，+z轴旋转的角度", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetRotUseZXY", 
            "path": "client.component.frameAniTransComp.FrameAniTransComp", 
            "desc": "设置序列帧的旋转，旋转顺序按照绕z,x,y轴旋转", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "绕局部坐标系的+z，+x，+y轴旋转的角度，旋转顺序按照绕z,x,y轴旋转。", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置序列帧的旋转，旋转顺序按照绕z,x,y轴旋转", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetScale", 
            "path": "client.component.frameAniTransComp.FrameAniTransComp", 
            "desc": "获取序列帧特效的缩放值", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "返回序列帧特效的缩放值。"
            }, 
            "state": [
                {
                    "comment": "获取序列帧特效的缩放值。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetScale", 
            "path": "client.component.frameAniTransComp.FrameAniTransComp", 
            "desc": "设置序列帧的缩放", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "对于平面序列帧，第一个参数为贴图横向上的缩放，第二个参数为纵向上的缩放，第三个参数无用。对于环状序列帧，为三个坐标轴上的缩放", 
                    "param_name": "scale", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }
    ], 
    "server.component.moveToCompServer.MoveToComponentServer": [
        {
            "name": "SetMoveSetting", 
            "path": "server.component.moveToCompServer.MoveToComponentServer", 
            "desc": "寻路组件", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "寻路目标位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "移动速度，指正常移动速度的倍率。如1.0表示正常速度，2.0表示两倍速", 
                    "param_name": "speed", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "寻路算法最大迭代次数 默认200", 
                    "param_name": "maxIteration", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "寻路结束回调函数", 
                    "param_name": "callback", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "现在支持游泳，爬墙与飞行生物", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.particleEntityBindComp.ParticleEntityBindComp": [
        {
            "name": "Bind", 
            "path": "client.component.particleEntityBindComp.ParticleEntityBindComp", 
            "desc": "绑定entity", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [
                {
                    "param_comment": "绑定的entity的ID", 
                    "param_name": "bindEntityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "绑定的偏移量，相对绑定entity脚下中心", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "绑定的旋转角度", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "默认不开启，开启后可以使特效的旋转角度准确设置为参照玩家的相对角度", 
                    "param_name": "correction", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "如果实体是由CreateClientEntityByTypeStr接口创建的,则需要传入True.默认为False", 
                    "param_name": "isClientEntity", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增是否是纯客户端实体参数", 
                    "operation": "调整", 
                    "version": "3.3", 
                    "author": "qyk"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.entityEventCompServer.EntityEventComponentServer": [
        {
            "name": "AddActorComponentGroup", 
            "path": "server.component.entityEventCompServer.EntityEventComponentServer", 
            "desc": "给指定实体添加实体json中配置的ComponentGroup", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "实体行为包中定义的component_group的键名", 
                    "param_name": "groupName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "指令是否成功发出"
            }, 
            "state": [
                {
                    "comment": "给指定实体添加实体json中配置的ComponentGroup", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RemoveActorComponentGroup", 
            "path": "server.component.entityEventCompServer.EntityEventComponentServer", 
            "desc": "移除指定实体在实体json中配置的ComponentGroup", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "实体行为包中定义的component_group的键名", 
                    "param_name": "groupName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "指令是否成功发出"
            }, 
            "state": [
                {
                    "comment": "移除指定实体在实体json中配置的ComponentGroup", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddActorComponent", 
            "path": "server.component.entityEventCompServer.EntityEventComponentServer", 
            "desc": "给指定实体自定义添加实体Component", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "实体行为包中定义的component的键名", 
                    "param_name": "componentName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "实体行为包中定义的component的值的json", 
                    "param_name": "componentValue", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "指令是否成功发出"
            }, 
            "state": [
                {
                    "comment": "给指定实体自定义添加实体Component", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "chenzhikun"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RemoveActorComponent", 
            "path": "server.component.entityEventCompServer.EntityEventComponentServer", 
            "desc": "删除指定实体的指定Component", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "实体行为包中定义的component的键名", 
                    "param_name": "componentName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "指令是否成功发出"
            }, 
            "state": [
                {
                    "comment": "删除指定实体的指定Component", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "chenzhikun"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetComponents", 
            "path": "server.component.entityEventCompServer.EntityEventComponentServer", 
            "desc": "获取指定实体的生效Components", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "指定实体的生效Components"
            }, 
            "state": [
                {
                    "comment": "获取指定实体的生效Components", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "chenzhikun"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "TriggerCustomEvent", 
            "path": "server.component.entityEventCompServer.EntityEventComponentServer", 
            "desc": "触发生物自定义事件", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "生物Id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "事件名称", 
                    "param_name": "eventName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "client.component.brightnessCompClient.BrightnessCompClient": [
        {
            "name": "SetBrightness", 
            "path": "client.component.brightnessCompClient.BrightnessCompClient", 
            "desc": "设置实体的亮度", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "0：纯黑<br>1：正常亮度<br>1-14：较亮甚至纯白<br>超过14：通常为纯白，即使数值改变也没有明显变化", 
                    "param_name": "brightness", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True:设置成功  False:设置失败"
            }, 
            "state": [], 
            "side": "客户端"
        }
    ], 
    "server.component.actionCompServer.ActionCompServer": [
        {
            "name": "SetAttackTarget", 
            "path": "server.component.actionCompServer.ActionCompServer", 
            "desc": "设置仇恨目标", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "目标实体id", 
                    "param_name": "targetId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "ResetAttackTarget", 
            "path": "server.component.actionCompServer.ActionCompServer", 
            "desc": "清除仇恨目标", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetAttackTarget", 
            "path": "server.component.actionCompServer.ActionCompServer", 
            "desc": "获取仇恨目标", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "返回仇恨目标的实体id。如果传入的实体id所对应的实体没有仇恨目标，则返回-1。如果传入的实体id所对应的实体不存在，则返回None。"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetMobKnockback", 
            "path": "server.component.actionCompServer.ActionCompServer", 
            "desc": "设置击退的初始速度，需要考虑阻力的影响", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "x轴方向，用來控制角度", 
                    "param_name": "xd", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "z轴方向，用來控制角度", 
                    "param_name": "zd", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "用来控制水平方向的初速度", 
                    "param_name": "power", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "竖直方向的初速度", 
                    "param_name": "height", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "向上速度阈值，当实体本身已经有向上的速度时需要考虑这个值，用来确保最终向上的速度不会超过heightCap", 
                    "param_name": "heightCap", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "None", 
                "return_comment": "无返回值"
            }, 
            "state": [
                {
                    "comment": "增加备注：在damageEvent事件里面使用该接口时，需把damageEvent事件回调的knock参数设置为False", 
                    "operation": "调整", 
                    "version": "1.24", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.bulletAttributesCompServer.BulletAttributesComponentServer": [
        {
            "name": "GetSourceEntityId", 
            "path": "server.component.bulletAttributesCompServer.BulletAttributesComponentServer", 
            "desc": "获取抛射物发射者实体id", 
            "doc_class_path": [
                "实体/抛射物"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "抛射物发射者实体id"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "server.component.modAttrCompServer.ModAttrComponentServer": [
        {
            "name": "SetAttr", 
            "path": "server.component.modAttrCompServer.ModAttrComponentServer", 
            "desc": "设置属性值。服务端设置后会自动同步到客户端，可以用客户端的GetAttr获取。默认不会存档，需要存档的话可以设置needRestore=True。", 
            "doc_class_path": [
                "实体/自定义属性"
            ], 
            "param": [
                {
                    "param_comment": "属性名称，str的名称建议以mod命名为前缀，避免多个mod之间冲突", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "属性值，支持python基础数据", 
                    "param_name": "paramValue", 
                    "param_type": "any"
                }, 
                {
                    "param_comment": "该属性是否需要存档，默认为False。", 
                    "param_name": "needRestore", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否需要立刻存档，当needRestore为True时生效。调用接口频繁时，可设置为False时，再另调用[SaveAttr](#saveattr)进行统一存储，减少开销", 
                    "param_name": "autoSave", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "新增needRestore参数用于自动存档并在实体加载时恢复", 
                    "operation": "调整", 
                    "version": "2.7", 
                    "author": "cxz"
                }, 
                {
                    "comment": "新增autoSave用于控制当needRestore为True时是否立刻存档", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SaveAttr", 
            "path": "server.component.modAttrCompServer.ModAttrComponentServer", 
            "desc": "保存SetAttr设置的属性值", 
            "doc_class_path": [
                "实体/自定义属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "保存SetAttr设置的属性值", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetAttr", 
            "path": "server.component.modAttrCompServer.ModAttrComponentServer", 
            "desc": "获取SetAttr设置的属性值", 
            "doc_class_path": [
                "实体/自定义属性"
            ], 
            "param": [
                {
                    "param_comment": "属性名称，str的名称建议以mod命名为前缀，避免多个mod之间冲突", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "属性默认值，属性不存在时返回该默认值，此时属性值依然未设置", 
                    "param_name": "defaultValue", 
                    "param_type": "any"
                }
            ], 
            "return": {
                "return_type": "any", 
                "return_comment": "返回属性值"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "server.component.persistenceCompServer.PersistenceCompServer": [
        {
            "name": "SetPersistence", 
            "path": "server.component.persistenceCompServer.PersistenceCompServer", 
            "desc": "设置实体是否持久化。", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "True为设置实体持久化，False为设置实体不持久化。", 
                    "param_name": "isPersistent", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "client.component.skyRenderCompClient.SkyRenderCompClient": [
        {
            "name": "SetSkyColor", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "设置天空颜色", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [
                {
                    "param_comment": "颜色RGBA，0到1之间，目前a值暂时没用", 
                    "param_name": "color", 
                    "param_type": "tuple(float,float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ResetSkyColor", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "重置天空颜色", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetSkyColor", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "获取天空颜色", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float,float)", 
                "return_comment": "颜色RGBA，0到1之间，目前a值暂时没用"
            }, 
            "state": [
                {
                    "comment": "获取天空颜色", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetUseSkyColor", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "判断是否在mod设置了天空颜色", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置"
            }, 
            "state": [
                {
                    "comment": "判断是否在mod设置了天空颜色", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSunRot", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "设置太阳所在角度", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [
                {
                    "param_comment": "第一个float表示南北偏移，第二个float表示太阳的自旋角度，第三个float表示日升日落。单位为角度", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ResetSunRot", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "重置太阳角度", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetSunRot", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "获取太阳角度", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "第一个float表示南北偏移，第二个float表示太阳的自旋角度，第三个float表示日升日落。单位为角度"
            }, 
            "state": [
                {
                    "comment": "获取太阳角度", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetUseSunRot", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "判断是否在mod设置了太阳角度", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置"
            }, 
            "state": [
                {
                    "comment": "判断是否在mod设置了太阳角度", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetMoonRot", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "设置月亮所在角度", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [
                {
                    "param_comment": "第一个float表示南北偏移，第二个float表示月亮的自旋角度，第三个float表示月升月落。单位为角度", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ResetMoonRot", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "重置月亮角度", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetMoonRot", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "获取月亮角度", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "第一个float表示南北偏移，第二个float表示月亮的自旋角度，第三个float表示月升月落。单位为角度"
            }, 
            "state": [
                {
                    "comment": "获取月亮角度", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetUseMoonRot", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "判断是否在mod设置了月亮角度", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置"
            }, 
            "state": [
                {
                    "comment": "判断是否在mod设置了月亮角度", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetAmbientBrightness", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "设置环境光亮度，影响天空亮度，不影响实体与方块光照", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [
                {
                    "param_comment": "范围0到1之间", 
                    "param_name": "brightness", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ResetAmbientBrightness", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "重置环境光亮度", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetAmbientBrightness", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "获取环境光亮度，影响天空亮度，不影响实体与方块光照", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "范围0到1之间"
            }, 
            "state": [
                {
                    "comment": "获取环境光亮度", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetUseAmbientBrightness", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "判断是否在mod设置了环境光亮度", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置"
            }, 
            "state": [
                {
                    "comment": "判断是否在mod设置了环境光亮度", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetStarBrightness", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "设置星星亮度，白天也可以显示星星", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [
                {
                    "param_comment": "范围0到1之间", 
                    "param_name": "brightness", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ResetStarBrightness", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "重置星星亮度", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetStarBrightness", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "获取星星亮度", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "范围0到1之间"
            }, 
            "state": [
                {
                    "comment": "获取星星亮度", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetUseStarBrightness", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "判断是否在mod设置了星星亮度", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置"
            }, 
            "state": [
                {
                    "comment": "判断是否在mod设置了星星亮度", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSkyTextures", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "设置当前维度天空盒贴图，天空盒需要6张贴图", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [
                {
                    "param_comment": "需要为6张贴图的路径，路径为从textures目录开始的绝对路径，如果天空盒某个方向不需要设置，则传空字符串", 
                    "param_name": "textureList", 
                    "param_type": "list(str)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetSkyTextures", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "获取当前维度天空盒贴图，天空盒共6张贴图", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(str)或None", 
                "return_comment": "天空盒贴图列表，该值可能为None"
            }, 
            "state": [
                {
                    "comment": "获取当前维度天空盒贴图", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ResetSkyTextures", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "重置当前维度天空盒贴图。如果有使用addon配置贴图则会使用配置的贴图，否则为游戏内默认无贴图的情况", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SkyTextures", 
            "path": "client.component.skyRenderCompClient.SkyRenderCompClient", 
            "desc": "修改太阳、月亮、云层分布、天空盒的贴图。使用addon配置，非python接口。", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }
    ], 
    "server.component.mobSpawnCompServer.MobSpawnComponentServer": [
        {
            "name": "SpawnCustomModule", 
            "path": "server.component.mobSpawnCompServer.MobSpawnComponentServer", 
            "desc": "设置自定义刷怪", 
            "doc_class_path": [
                "世界/生物生成"
            ], 
            "param": [
                {
                    "param_comment": "[BiomeType枚举](../../枚举值/BiomeType.md)", 
                    "param_name": "biomeType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "[Change枚举](../../枚举值/Change.md)", 
                    "param_name": "change", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "[EntityType枚举](../../枚举值/EntityType.md)", 
                    "param_name": "entityType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "生成的权重[1, 10]", 
                    "param_name": "probability", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "最小生成数量[0, 10]", 
                    "param_name": "minCount", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "最大生成数量[0, 10]", 
                    "param_name": "maxCount", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "1:生成在表面；2:生成在水里", 
                    "param_name": "environment", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "生成该生物时的最小光照[1, 15]，不设置时使用默认值", 
                    "param_name": "minBrightness", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "生成该生物时的最大光照[1, 15]，不设置时使用默认值", 
                    "param_name": "maxBrightness", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "生成该生物时最小的海拔高度[0, 256]，不设置时使用默认值", 
                    "param_name": "minHeight", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "生成该生物时最大的海拔高度[0, 256]，不设置时使用默认值", 
                    "param_name": "maxHeight", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "client.extraClientApi": [
        {
            "name": "RegisterComponent", 
            "path": "client.extraClientApi", 
            "desc": "用于将组件注册到引擎中", 
            "doc_class_path": [
                "通用/Component"
            ], 
            "param": [
                {
                    "param_comment": "命名空间，建议为mod名字", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件名称", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件类路径，路径从脚本的第一层开始算起", 
                    "param_name": "clsPath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "注册成功与否"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "RegisterSystem", 
            "path": "client.extraClientApi", 
            "desc": "用于将系统注册到引擎中，引擎会创建一个该系统的实例，并在退出游戏时回收。系统可以执行我们引擎赋予的基本逻辑，例如监听事件、执行Tick函数、与服务端进行通讯等。", 
            "doc_class_path": [
                "通用/System"
            ], 
            "param": [
                {
                    "param_comment": "命名空间，建议为mod名字", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "系统名称，自定义名称，可以使用英文、拼音和下划线，建议尽量个性化", 
                    "param_name": "systemName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件类路径，路径从脚本的第一层开始算起", 
                    "param_name": "clsPath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "ClientSystem", 
                "return_comment": "返回具体系统的实例"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetSystem", 
            "path": "client.extraClientApi", 
            "desc": "用于获取其他系统实例", 
            "doc_class_path": [
                "通用/System"
            ], 
            "param": [
                {
                    "param_comment": "系统注册的命名空间，一般为mod名字", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "要获取的系统名称", 
                    "param_name": "systemName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "ClientSystem", 
                "return_comment": "返回具体系统的实例，如果获取不到则返回 None"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "CreateComponent", 
            "path": "client.extraClientApi", 
            "desc": "给实体创建客户端组件", 
            "doc_class_path": [
                "通用/Component"
            ], 
            "param": [
                {
                    "param_comment": "该组件属主的实体id", 
                    "param_name": "entityId", 
                    "param_type": "str或int"
                }, 
                {
                    "param_comment": "组件的命名空间，registerComponent的namespace", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件的名字", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "BaseComponent", 
                "return_comment": "组件实例"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetComponent", 
            "path": "client.extraClientApi", 
            "desc": "获取实体的客户端组件。一般用来判断某个组件是否创建过，其他情况请使用CreateComponent", 
            "doc_class_path": [
                "通用/Component"
            ], 
            "param": [
                {
                    "param_comment": "该组件属主的实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件的命名空间，registerComponent的namespace", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件的名字", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "BaseComponent", 
                "return_comment": "组件实例或者None"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "DestroyComponent", 
            "path": "client.extraClientApi", 
            "desc": "删除实体的客户端组件", 
            "doc_class_path": [
                "通用/Component"
            ], 
            "param": [
                {
                    "param_comment": "该组件属主的实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件的命名空间，registerComponent的namespace", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件的名字", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetEngineCompFactory", 
            "path": "client.extraClientApi", 
            "desc": "获取引擎组件的工厂，通过工厂可以创建客户端的引擎组件", 
            "doc_class_path": [
                "通用/Component"
            ], 
            "param": [], 
            "return": {
                "return_type": "EngineCompFactoryClient", 
                "return_comment": "客户端引擎组件工厂"
            }, 
            "state": [
                {
                    "comment": "获取组件的工厂，客户端引擎组件通过该工厂创建", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RegisterUI", 
            "path": "client.extraClientApi", 
            "desc": "注册UI，创建UI前，需要先注册UI。同一UI只需要注册一次即可。详见<a href=\"../../../../mcguide/18-界面与交互/30-UI说明文档.html#界面创建流程及生命周期\">界面创建流程及生命周期</a>", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [
                {
                    "param_comment": "命名空间，建议为mod名字", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "UI唯一标识", 
                    "param_name": "uiKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "UI类路径", 
                    "param_name": "clsPath", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "UI画布路径，格式为\"namespace.screenName\"。namespace对应uiJson文件中\"namespace\"对应的值，UI编辑器生成的uiJson文件该值等于文件名。screenName对应想打开的画布的名称。", 
                    "param_name": "uiScreenDef", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否注册成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "CreateUI", 
            "path": "client.extraClientApi", 
            "desc": "创建UI，详见<a href=\"../../../../mcguide/18-界面与交互/30-UI说明文档.html#界面创建流程及生命周期\">界面创建流程及生命周期</a>", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [
                {
                    "param_comment": "命名空间，建议为mod名字", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "UI唯一标识", 
                    "param_name": "uiKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "创建UI的参数，会传到UI类的_init_函数中", 
                    "param_name": "createParams", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "ScreenNode", 
                "return_comment": "UI节点"
            }, 
            "state": [
                {
                    "comment": "添加备注", 
                    "operation": "调整", 
                    "version": "2.0", 
                    "author": "mayexing"
                }, 
                {
                    "comment": "添加实体绑定的例子", 
                    "operation": "调整", 
                    "version": "2.0", 
                    "author": "mayexing"
                }, 
                {
                    "comment": "添加了bindWorldPosition参数用于绑定世界坐标", 
                    "operation": "调整", 
                    "version": "2.7", 
                    "author": "cxz"
                }, 
                {
                    "comment": "配置了bindWorldPosition参数时，开放autoScale参数（2.7版本固定为1），设置自动缩放需要将UI写为百分比形式，设置为固定尺寸将无法缩放，超过一定距离时不可见。", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetUI", 
            "path": "client.extraClientApi", 
            "desc": "获取UI节点，详见<a href=\"../../../../mcguide/18-界面与交互/30-UI说明文档.html#界面创建流程及生命周期\">界面创建流程及生命周期</a>", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [
                {
                    "param_comment": "命名空间，建议为mod名字", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "UI唯一标识", 
                    "param_name": "uiKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "ScreenNode", 
                "return_comment": "UI节点"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetTopUINode", 
            "path": "client.extraClientApi", 
            "desc": "获取Push进来的最顶层界面，包括原生界面，详见<a href=\"../../../../mcguide/18-界面与交互/30-UI说明文档.html#界面创建流程及生命周期\" rel=\"noopenner\"> 界面创建流程及生命周期 </a>", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [], 
            "return": {
                "return_type": "ScreenNode", 
                "return_comment": "UI节点"
            }, 
            "state": [
                {
                    "comment": "获取Push进来的最顶层界面，包括原生界面", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CheckCanBindUI", 
            "path": "client.extraClientApi", 
            "desc": "检查实体是否可以绑定头顶UI，如何将UI与实体绑定详见[CreateUI](#createui)接口", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [
                {
                    "param_comment": "实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否可以绑定头顶UI True:可以绑定 False:不能绑定"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "HideHudGUI", 
            "path": "client.extraClientApi", 
            "desc": "隐藏HUD游戏界面的游戏原生UI。与原版F1按钮效果一致，只隐藏显示，但点击跳跃键等位置依然会响应", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "True为隐藏原生HUD，False为恢复显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "HidePauseGUI", 
            "path": "client.extraClientApi", 
            "desc": "隐藏暂停按钮原生UI。", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "隐藏暂停按钮原生UI", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "hxj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideChatGUI", 
            "path": "client.extraClientApi", 
            "desc": "隐藏聊天按钮原生UI。该接口在开启新版聊天时不生效", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "隐藏聊天按钮原生UI", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "hxj"
                }, 
                {
                    "comment": "新增关于新版聊天的说明", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "wj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideReportGUI", 
            "path": "client.extraClientApi", 
            "desc": "隐藏举报按钮原生UI。", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "隐藏举报按钮原生UI", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "hxj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideFoldGUI", 
            "path": "client.extraClientApi", 
            "desc": "隐藏下拉按钮原生UI。", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "隐藏下拉按钮原生UI", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "hxj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideEmoteGUI", 
            "path": "client.extraClientApi", 
            "desc": "设置是否开启表情功能，默认PC端关闭，手机端开启，且该接口只能在手机端使用。该接口在开启新版聊天时不生效", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "打开表情界面", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "hxj"
                }, 
                {
                    "comment": "增加新版聊天相关说明", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "wj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideVoiceGUI", 
            "path": "client.extraClientApi", 
            "desc": "隐藏语音按钮原生UI。该接口在开启新版聊天时不生效", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "隐藏语音按钮原生UI", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "hxj"
                }, 
                {
                    "comment": "增加新版聊天相关说明", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "wj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideWalkGui", 
            "path": "client.extraClientApi", 
            "desc": "隐藏游戏中跑/走按钮。隐藏后点击相应位置不会响应", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "新触控接入后原移动按钮已移除，现在该接口控制新触控跑/走按钮", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "lidi"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideJumpGui", 
            "path": "client.extraClientApi", 
            "desc": "隐藏游戏中右下角的跳跃按钮。隐藏后点击相应位置不会响应", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "HideSlotBarGui", 
            "path": "client.extraClientApi", 
            "desc": "隐藏游戏中底部中间的物品栏界面", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "增加hideslotbar使用说明。隐藏后点击相应位置不会响应", 
                    "operation": "调整", 
                    "version": "1.19", 
                    "author": "wanghaoyu"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideSneakGui", 
            "path": "client.extraClientApi", 
            "desc": "隐藏游戏中左下角方向键的中心处潜行按钮。隐藏后点击相应位置不会响应", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "HideNeteaseStoreGui", 
            "path": "client.extraClientApi", 
            "desc": "隐藏游戏中的网易商店按钮。隐藏后点击相应位置不会响应", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "增加UI堆栈说明", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "xusifan"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "OpenNeteaseStoreGui", 
            "path": "client.extraClientApi", 
            "desc": "打开游戏中的网易商店购买商品界面", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "商品分类名称", 
                    "param_name": "categoryName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "商品名称", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "HideSwimGui", 
            "path": "client.extraClientApi", 
            "desc": "隐藏游戏中的浮潜按钮。隐藏后点击相应位置不会响应。", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "调整描述，仅影响十字键操作下的浮潜按钮，摇杆模式上浮=跳跃，下潜=潜行，需要通过HideJumpGui和HideSneakGui来隐藏", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "lidi"
                }, 
                {
                    "comment": "修改接口描述, 隐藏潜伏按钮", 
                    "operation": "调整", 
                    "version": "3.4", 
                    "author": "jiaoshe"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideChangePersonGui", 
            "path": "client.extraClientApi", 
            "desc": "隐藏切换人称的按钮。隐藏后点击相应位置不会响应", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "HideNameTag", 
            "path": "client.extraClientApi", 
            "desc": "隐藏场景内所有名字，包括玩家名字，生物的自定义名称，物品展示框与命令方块的悬浮文本等", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "HidePlayerName改名而来", 
                    "operation": "新增", 
                    "version": "1.22.nodoc", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "IsHideNameTag", 
            "path": "client.extraClientApi", 
            "desc": "获取是否隐藏场景内所有名字", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否隐藏"
            }, 
            "state": [
                {
                    "comment": "获取是否隐藏场景内所有名字", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideInteractGui", 
            "path": "client.extraClientApi", 
            "desc": "隐藏交互按钮。隐藏后点击相应位置不会响应", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "HideHealthGui", 
            "path": "client.extraClientApi", 
            "desc": "隐藏hud界面的血量显示", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "隐藏hud界面的血量显示", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideHorseHealthGui", 
            "path": "client.extraClientApi", 
            "desc": "隐藏hud界面的坐骑的血量显示", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "隐藏hud界面的坐骑的血量显示", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideHungerGui", 
            "path": "client.extraClientApi", 
            "desc": "隐藏hud界面的饥饿值显示", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "隐藏hud界面的饥饿值显示", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideArmorGui", 
            "path": "client.extraClientApi", 
            "desc": "隐藏hud界面的护甲值显示", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "隐藏hud界面的护甲值显示", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetResponse", 
            "path": "client.extraClientApi", 
            "desc": "设置原生UI是否响应", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否响应原生UI，True为响应原生UI，即点击屏幕时可以敲击方块/攻击实体，False为不响应原生UI", 
                    "param_name": "response", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetMinecraftEnum", 
            "path": "client.extraClientApi", 
            "desc": "用于获取[枚举值文档](../../枚举值/索引.md)中的枚举值", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [], 
            "return": {
                "return_type": "minecraftEnum", 
                "return_comment": "枚举集合类"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetClientSystemCls", 
            "path": "client.extraClientApi", 
            "desc": "用于获取客户端system基类。实现新的system时，需要继承该接口返回的类", 
            "doc_class_path": [
                "通用/System"
            ], 
            "param": [], 
            "return": {
                "return_type": "type(ClientSystem)", 
                "return_comment": "客户端系统类"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetComponentCls", 
            "path": "client.extraClientApi", 
            "desc": "用于获取客户端component基类。实现新的component时，需要继承该接口返回的类", 
            "doc_class_path": [
                "通用/Component"
            ], 
            "param": [], 
            "return": {
                "return_type": "type(BaseComponent)", 
                "return_comment": "组件基类"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetEngineNamespace", 
            "path": "client.extraClientApi", 
            "desc": "获取引擎事件的命名空间。监听引擎事件时，namespace传该接口返回的namespace", 
            "doc_class_path": [
                "通用/事件"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "引擎的命名空间"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetEngineSystemName", 
            "path": "client.extraClientApi", 
            "desc": "获取引擎系统名。监听引擎事件时，systemName传该接口返回的systemName", 
            "doc_class_path": [
                "通用/事件"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "引擎的systemName"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetLevelId", 
            "path": "client.extraClientApi", 
            "desc": "获取levelId。某些组件需要levelId创建，可以用此接口获取levelId。其中level即为当前地图的游戏。", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "当前地图的levelId"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetLocalPlayerId", 
            "path": "client.extraClientApi", 
            "desc": "获取本地玩家的id", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "客户端玩家Id"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetScreenNodeCls", 
            "path": "client.extraClientApi", 
            "desc": "获得ScreenNode类", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [], 
            "return": {
                "return_type": "type(ScreenNode)", 
                "return_comment": "ScreenNode类"
            }, 
            "state": [
                {
                    "comment": "获得ScreenNode类", 
                    "operation": "新增", 
                    "version": "1.22.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetViewBinderCls", 
            "path": "client.extraClientApi", 
            "desc": "获得ViewBinder类", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [], 
            "return": {
                "return_type": "type(ViewBinder)", 
                "return_comment": "ViewBinder类"
            }, 
            "state": [
                {
                    "comment": "获得ViewBinder类", 
                    "operation": "新增", 
                    "version": "1.22.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetViewViewRequestCls", 
            "path": "client.extraClientApi", 
            "desc": "获得ViewRequest类", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [], 
            "return": {
                "return_type": "type(ViewRequest)", 
                "return_comment": "ViewRequest类"
            }, 
            "state": [
                {
                    "comment": "获得ViewRequest类", 
                    "operation": "新增", 
                    "version": "1.22.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetNativeScreenManagerCls", 
            "path": "client.extraClientApi", 
            "desc": "获得NativeScreenManager类", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [], 
            "return": {
                "return_type": "type(NativeScreenManager)", 
                "return_comment": "NativeScreenManager类"
            }, 
            "state": [
                {
                    "comment": "获得NativeScreenManager类", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetCustomUIControlProxyCls", 
            "path": "client.extraClientApi", 
            "desc": "获得原生界面自定义UI代理基类", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [], 
            "return": {
                "return_type": "type(CustomUIControlProxy)", 
                "return_comment": "原生界面自定义UI代理基类"
            }, 
            "state": [
                {
                    "comment": "获得原生界面自定义UI代理基类", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetUIScreenProxyCls", 
            "path": "client.extraClientApi", 
            "desc": "获得原生界面Screen代理基类", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [], 
            "return": {
                "return_type": "type(CustomUIControlProxy)", 
                "return_comment": "原生界面Screen代理基类"
            }, 
            "state": [
                {
                    "comment": "获得原生界面Screen代理基类", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetMiniMapScreenNodeCls", 
            "path": "client.extraClientApi", 
            "desc": "获取小地图ScreenNode基类", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [], 
            "return": {
                "return_type": "type(MiniMapBaseScreen)", 
                "return_comment": "小地图ScreenNode基类"
            }, 
            "state": [
                {
                    "comment": "获取小地图ScreenNode基类", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetLocalPosFromWorld", 
            "path": "client.extraClientApi", 
            "desc": "获取基于实体的世界坐标对应的局部坐标", 
            "doc_class_path": [
                "通用/数学"
            ], 
            "param": [
                {
                    "param_comment": "基于实体的世界坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "世界坐标对应的局部坐标"
            }, 
            "state": [
                {
                    "comment": "获取基于实体的世界坐标对应的局部坐标", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetWorldPosFromLocal", 
            "path": "client.extraClientApi", 
            "desc": "获取基于实体的局部坐标对应的世界坐标", 
            "doc_class_path": [
                "通用/数学"
            ], 
            "param": [
                {
                    "param_comment": "基于实体的局部坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "局部坐标对应的世界坐标"
            }, 
            "state": [
                {
                    "comment": "获取基于实体的局部坐标对应的世界坐标", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetDirFromRot", 
            "path": "client.extraClientApi", 
            "desc": "通过旋转角度获取朝向", 
            "doc_class_path": [
                "通用/数学"
            ], 
            "param": [
                {
                    "param_comment": "俯仰角度及绕竖直方向的角度，单位是角度", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "玩家朝向的单位向量"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetRotFromDir", 
            "path": "client.extraClientApi", 
            "desc": "通过朝向获取旋转角度", 
            "doc_class_path": [
                "通用/数学"
            ], 
            "param": [
                {
                    "param_comment": "玩家朝向的单位向量", 
                    "param_name": "dir", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "俯仰角度及绕竖直方向的角度，单位是角度"
            }, 
            "state": [
                {
                    "comment": "通过玩家当前朝向获取旋转角度", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetEngineVersion", 
            "path": "client.extraClientApi", 
            "desc": "获取游戏版本-客户端。", 
            "doc_class_path": [
                "通用/本地设备"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "版本号"
            }, 
            "state": [
                {
                    "comment": "获取引擎版本号", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "czk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetMinecraftVersion", 
            "path": "client.extraClientApi", 
            "desc": "获取Minecraft版本-客户端。", 
            "doc_class_path": [
                "通用/本地设备"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "版本号"
            }, 
            "state": [
                {
                    "comment": "获取Minecraft版本号", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "czk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetTouchPos", 
            "path": "client.extraClientApi", 
            "desc": "获取点击的屏幕坐标。可以监听TapBeforeClientEvent或TapOrHoldReleaseClientEvent事件，调用本API获取点击坐标。", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "屏幕坐标"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetNavPath", 
            "path": "client.extraClientApi", 
            "desc": "获取本地玩家到目标点的寻路路径，开发者可以通过该接口定制自定义的导航系统。", 
            "doc_class_path": [
                "玩家/导航"
            ], 
            "param": [
                {
                    "param_comment": "目标点的坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "对搜索路径进行平滑时的最大尝试格数。设置的太大会影响寻路性能。默认值16", 
                    "param_name": "maxTrimNode", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "A星寻路的最大迭代次数。默认值800", 
                    "param_name": "maxIteration", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "目标点是否在水中。默认为False", 
                    "param_name": "isSwimmer", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "int或list(tuple(float,float,float))", 
                "return_comment": "返回1：参数错误<br>返回2：玩家所在chunk未加载完毕<br>返回3：终点为实心方块，无法寻路<br>返回list(tuple(float,float,float),)：从起点到终点的坐标点列表。注意该list可能为空，表示本地玩家离地太远，或者被堵住无法行动。"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "StartNavTo", 
            "path": "client.extraClientApi", 
            "desc": "我们提供了一个基于GetNavPath的导航系统实现，做法是在路径上生成序列帧以引导玩家通向目标点，并且当玩家偏离路径会重新进行导航。", 
            "doc_class_path": [
                "玩家/导航"
            ], 
            "param": [
                {
                    "param_comment": "目标点的坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "构成导航路径的序列帧素材路径。样式可以参考指向上的箭头", 
                    "param_name": "sfxPath", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "玩家抵达终点时会调用的**回调函数**。该函数需要接受一个bool参数。", 
                    "param_name": "callback", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "相邻两个序列帧之间的间隔。默认值2", 
                    "param_name": "sfxIntl", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "同时存在的序列帧的最大个数。默认值16", 
                    "param_name": "sfxMaxNum", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "序列帧的宽度及高度的缩放。默认为（0.5，0.5）", 
                    "param_name": "sfxScale", 
                    "param_type": "tuple(float,float)"
                }, 
                {
                    "param_comment": "A星寻路的最大迭代次数。默认值800", 
                    "param_name": "maxIteration", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "目标点是否在水中。默认为False", 
                    "param_name": "isSwimmer", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "序列帧帧率，默认为20，不建议超过30", 
                    "param_name": "fps", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "一轮中相邻序列帧开始播放的间隔，默认为8帧，不得小于0，否则将使用默认值", 
                    "param_name": "playIntl", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "单个序列帧持续播放帧数，默认为60帧，不小于10，否则将使用默认值", 
                    "param_name": "duration", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "两轮序列帧之间的播放间隔(帧)，默认值为90帧，至少为duration的1.5倍，否则将以1.5 * duration进行计算", 
                    "param_name": "oneTurnDuration", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "序列帧是否开启深度检测，默认为False，设为True时序列帧会被场景遮挡", 
                    "param_name": "sfxDepthTest", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "返回0：导航正常开始<br>返回-1：本地玩家离地太远，或者被堵住无法行动<br>返回1：参数错误<br>返回2：玩家所在chunk未加载完毕<br>返回3：终点为实心方块，无法寻路"
            }, 
            "state": [
                {
                    "comment": "优化寻路序列帧表现，新增了几个控制寻路序列帧表现的参数", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "新增控制序列帧是否开启深度检测的参数", 
                    "operation": "调整", 
                    "version": "2.0", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "StopNav", 
            "path": "client.extraClientApi", 
            "desc": "终止当前的导航", 
            "doc_class_path": [
                "玩家/导航"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetIP", 
            "path": "client.extraClientApi", 
            "desc": "获取本地玩家的ip地址", 
            "doc_class_path": [
                "通用/本地设备"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "本地玩家的ip地址"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "StartProfile", 
            "path": "client.extraClientApi", 
            "desc": "开始启动客户端脚本性能分析，启动后调用[StopProfile](#stopprofile)即可在路径fileName生成函数性能火焰图，此接口只支持PC端。生成的火焰图可以用浏览器打开，推荐chrome浏览器。", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "开始启动客户端脚本性能分析", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "StopProfile", 
            "path": "client.extraClientApi", 
            "desc": "停止客户端脚本性能分析并生成火焰图，与[StartProfile](#startprofile)配合使用，此接口只支持PC端", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [
                {
                    "param_comment": "具体路径，相对于PC开发包的路径，默认为\"flamegraph.svg\"，位于PC开发包目录下，自定义路径请确保文件后缀名为\".svg\"", 
                    "param_name": "fileName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "停止客户端端脚本性能分析并生成火焰图", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "StartMemProfile", 
            "path": "client.extraClientApi", 
            "desc": "开始启动客户端脚本内存分析，启动后调用[StopMemProfile](#stopMemProfile)即可在路径fileName生成函数内存火焰图，此接口只支持PC端。生成的火焰图可以用浏览器打开，推荐chrome浏览器。", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "开始启动客户端脚本内存分析", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xusifan"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "StopMemProfile", 
            "path": "client.extraClientApi", 
            "desc": "停止客户端脚本内存分析并生成火焰图，与[StartMemProfile](#startMemProfile)配合使用，此接口只支持PC端", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [
                {
                    "param_comment": "具体路径，相对于PC开发包的路径，默认为\"flamegraph.svg\"，位于PC开发包目录下，自定义路径请确保文件后缀名为\".svg\"", 
                    "param_name": "fileName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "停止客户端脚本内存分析并生成火焰图", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xusifan"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "StartMultiProfile", 
            "path": "client.extraClientApi", 
            "desc": "开始启动服务端与客户端双端脚本性能分析，启动后调用[StopMultiProfile](#stopmultiprofile)即可在路径fileName生成函数性能火焰图。双端采集时数据误差较大，建议优先使用[StartProfile](#startprofile)单端版本，此接口只支持PC端", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "开始启动服务端与客户端双端脚本性能分析", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "StopMultiProfile", 
            "path": "client.extraClientApi", 
            "desc": "停止双端脚本性能分析并生成火焰图，与[StartMultiProfile](#startmultiprofile)配合使用，此接口只支持PC端", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [
                {
                    "param_comment": "具体路径，相对于PC开发包的路径，默认为\"flamegraph.svg\"，位于PC开发包目录下，自定义路径请确保文件后缀名为\".svg\"", 
                    "param_name": "fileName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "停止双端脚本性能分析并生成火焰图", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideAirSupplyGUI", 
            "path": "client.extraClientApi", 
            "desc": "隐藏玩家氧气值界面", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "隐藏hud界面的氧气条显示", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "why117"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideExpGui", 
            "path": "client.extraClientApi", 
            "desc": "非创造者模式下隐藏经验条显示", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "新增隐藏经验条接口", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "why117"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideMoveGui", 
            "path": "client.extraClientApi", 
            "desc": "隐藏游戏中左下角的移动按钮。隐藏后点击相应位置不会响应", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "新增隐藏移动按钮", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "lidi"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCrossHair", 
            "path": "client.extraClientApi", 
            "desc": "设置是否使用“准星瞄准”", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "十字模式下True为开启“准星瞄准”，False为关闭，摇杆模式下True为点击互动、False为瞄准十字线", 
                    "param_name": "visible", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "适配新触控", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "lidi"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetHudChatStackVisible", 
            "path": "client.extraClientApi", 
            "desc": "设置HUD界面左上小聊天窗口可见性", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否可见", 
                    "param_name": "visible", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置HUD界面左上小聊天窗口可见性接口", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetHudChatStackPosition", 
            "path": "client.extraClientApi", 
            "desc": "设置HUD界面左上小聊天窗口位置", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "该界面的目标坐标，第一项为横轴，第二项为纵轴，(0,0)点在Hud界面左上角，玩家纸娃娃下方", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置HUD界面左上小聊天窗口位置接口", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ReloadAllMaterials", 
            "path": "client.extraClientApi", 
            "desc": "重新加载所有材质文件", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "清空并重新加载所有材质文件", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ReloadAllShaders", 
            "path": "client.extraClientApi", 
            "desc": "重新加载所有Shader文件", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "重新加载所有Shader文件", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ReloadOneShader", 
            "path": "client.extraClientApi", 
            "desc": "重新加载某个Shader文件", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [
                {
                    "param_comment": "shader名称", 
                    "param_name": "shaderName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "重新加载某个Shader文件", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetKeepResourceWhenTransfer", 
            "path": "client.extraClientApi", 
            "desc": "设置快速切服", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [
                {
                    "param_comment": "是否在切服时保留资源,True为保留资源,False为不保留资源", 
                    "param_name": "keep", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "设置快速切服", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "jishaobin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetEnableReconnectNetgame", 
            "path": "client.extraClientApi", 
            "desc": "设置是否允许断线重连", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [
                {
                    "param_comment": "是否允许断线重连", 
                    "param_name": "keep", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "设置是否允许断线重连", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetKeepResourceWhenTransfer", 
            "path": "client.extraClientApi", 
            "desc": "获取快速切服设置", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置快速切服"
            }, 
            "state": [
                {
                    "comment": "获取快速切服设置", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "jishaobin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetResourceFastload", 
            "path": "client.extraClientApi", 
            "desc": "设置资源快速加载", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [
                {
                    "param_comment": "是否在进入游戏时快速加载资源,True为快速加载资源,False为不快速加载资源", 
                    "param_name": "fastload", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "设置资源快速加载", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "jishaobin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetResourceFastload", 
            "path": "client.extraClientApi", 
            "desc": "获取资源快速加载设置", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否开启资源快速加载"
            }, 
            "state": [
                {
                    "comment": "获取资源快速加载设置", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "jishaobin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetEnableReconnectNetgame", 
            "path": "client.extraClientApi", 
            "desc": "获取是否允许断线重连", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否允许断线重连"
            }, 
            "state": [
                {
                    "comment": "获取是否允许断线重连", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetModConfigJson", 
            "path": "client.extraClientApi", 
            "desc": "以字典形式返回指定路径的json格式配置文件的内容，文件必须放置在资源包的/modconfigs目录下", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "指定路径的json文件", 
                    "param_name": "path", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "配置内容的字典，当读取文件失败时返回空字典"
            }, 
            "state": [
                {
                    "comment": "以字典形式返回指定路径的json格式配置文件的内容", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xltang"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "PushScreen", 
            "path": "client.extraClientApi", 
            "desc": "使用堆栈管理的方式创建UI", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [
                {
                    "param_comment": "命名空间，建议为mod名字", 
                    "param_name": "namespace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "UI唯一标识", 
                    "param_name": "uiname", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "创建UI的自定义参数，会传到UI类的_init_函数中，默认为None", 
                    "param_name": "createParams", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "ScreenNode", 
                "return_comment": "UI节点，创建失败时返回None"
            }, 
            "state": [
                {
                    "comment": "使用堆栈管理的方式创建UI", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "增加自定义参数", 
                    "operation": "调整", 
                    "version": "2.0", 
                    "author": "mayexing"
                }, 
                {
                    "comment": "修改了鼠标的生成方式", 
                    "operation": "调整", 
                    "version": "2.5", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "PopScreen", 
            "path": "client.extraClientApi", 
            "desc": "使用堆栈管理的方式关闭UI", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否关闭成功"
            }, 
            "state": [
                {
                    "comment": "使用堆栈管理的方式关闭UI", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetTopScreen", 
            "path": "client.extraClientApi", 
            "desc": "获取UI堆栈栈顶的UI节点", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [], 
            "return": {
                "return_type": "ScreenNode", 
                "return_comment": "UI节点，堆栈为空时返回None"
            }, 
            "state": [
                {
                    "comment": "获取UI堆栈栈顶的UI节点", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetTopUI", 
            "path": "client.extraClientApi", 
            "desc": "获取UI栈顶的UI名称", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "最顶层的UI名称，如果弹出为原生UI则名称为([原生UI枚举](../../枚举值/UICategory.md))"
            }, 
            "state": [
                {
                    "comment": "获取UI堆栈栈顶的UI名称，可获得原生UI也可获得PushScreen生成的UI", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "PopTopUI", 
            "path": "client.extraClientApi", 
            "desc": "弹出UI栈顶的UI", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "弹出UI堆栈栈顶的UI", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPlatform", 
            "path": "client.extraClientApi", 
            "desc": "获取脚本运行的平台", 
            "doc_class_path": [
                "通用/本地设备"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "0：Windows平台；1：IOS；2：Android"
            }, 
            "state": [
                {
                    "comment": "获取脚本运行的平台", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetWalkState", 
            "path": "client.extraClientApi", 
            "desc": "获取玩家行走/潜行/跑步状态", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [], 
            "return": {
                "return_type": "WalkState", 
                "return_comment": "行走/潜行/跑步状态 ([行走状态](../枚举值/WalkState.md))"
            }, 
            "state": [
                {
                    "comment": "获取玩家行走/潜行/跑步状态", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ChangeSneakState", 
            "path": "client.extraClientApi", 
            "desc": "切换潜行状态", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "切换潜行状态", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "hxj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SimulateJump", 
            "path": "client.extraClientApi", 
            "desc": "模拟跳跃", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "模拟跳跃", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "hxj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ClickInteractGUI", 
            "path": "client.extraClientApi", 
            "desc": "模拟点击交互按钮，交互按钮指的在喂食、钓鱼、交易等交互场景出现的按钮", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "模拟点击交互按钮", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "hxj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "OpenPauseGui", 
            "path": "client.extraClientApi", 
            "desc": "打开原版暂停界面", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否强制打开，默认False，当已经打开is_showing_menu为true的ui时，无法打开", 
                    "param_name": "isForce", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "打开原版暂停界面", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "hxj"
                }, 
                {
                    "comment": "增加使用说明", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "hxj"
                }, 
                {
                    "comment": "增加isForce字段", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "OpenChatGui", 
            "path": "client.extraClientApi", 
            "desc": "打开原版聊天栏", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否强制打开，默认False，当已经打开is_showing_menu为true的ui时，无法打开", 
                    "param_name": "isForce", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "打开原版聊天栏", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "hdy"
                }, 
                {
                    "comment": "增加使用说明", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "hxj"
                }, 
                {
                    "comment": "增加isForce字段", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "OpenFoldGui", 
            "path": "client.extraClientApi", 
            "desc": "打开原版下拉界面", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "打开原版下拉界面", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "hxj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "OpenVoiceGui", 
            "path": "client.extraClientApi", 
            "desc": "打开原版语音界面", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "打开原版语音界面", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "hxj"
                }, 
                {
                    "comment": "补充使用说明", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "hxj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "OpenReportGui", 
            "path": "client.extraClientApi", 
            "desc": "打开原版举报界面", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "打开原版举报界面", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "hxj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "OpenEmoteGui", 
            "path": "client.extraClientApi", 
            "desc": "打开表情界面", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "打开表情界面", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "hxj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "StartCoroutine", 
            "path": "client.extraClientApi", 
            "desc": "开启客户端协程，实现函数分段式执行，可用于缓解复杂逻辑计算导致游戏卡顿问题", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "传入带有yield的函数或传入生成器。如传入生成器则将从生成器中断位置开始执行,如传入函数将从头开始执行", 
                    "param_name": "iterOrFunc", 
                    "param_type": "generator或callable([],generator)"
                }, 
                {
                    "param_comment": "协程执行完后的回调函数，默认为None", 
                    "param_name": "callback", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "generator", 
                "return_comment": "函数生成器。如果传入的iterOrFunc不是带有yield的函数或者生成器时返回None"
            }, 
            "state": [
                {
                    "comment": "开启客户端协程，实现函数分段式执行，可用于缓解复杂逻辑计算导致游戏卡顿问题", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "handaoying"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "StopCoroutine", 
            "path": "client.extraClientApi", 
            "desc": "停止客户端协程", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "需要停止的生成器对象,StartCoroutine的返回值", 
                    "param_name": "iter", 
                    "param_type": "generator"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "停止客户端协程", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "handaoying"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "OpenInventoryGui", 
            "path": "client.extraClientApi", 
            "desc": "打开原版背包界面，并支持选中某个分页(支持自定义分页名称)", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "分页名称([原版分页名称枚举](../枚举值/InventoryType.md))", 
                    "param_name": "categoryName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否强制打开，默认False，当已经打开is_showing_menu为true的ui时，无法打开", 
                    "param_name": "isForce", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "打开原版背包界面", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "hdy"
                }, 
                {
                    "comment": "增加isForce字段", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetOriginAreaOffset", 
            "path": "client.extraClientApi", 
            "desc": "获取指定原生UI的offset,包括左上角和右下角", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "原生UI枚举([原生UI枚举](../枚举值/OriginGUIName.md))", 
                    "param_name": "areaEnum", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float,float)", 
                "return_comment": "(xMin, yMin, xMax, yMax)原生UI的Area"
            }, 
            "state": [
                {
                    "comment": "获取指定原生UI的offset,包括左上角和右下角", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBookManager", 
            "path": "client.extraClientApi", 
            "desc": "获取书本管理对象", 
            "doc_class_path": [
                "自定义UI/自定义书本"
            ], 
            "param": [], 
            "return": {
                "return_type": "BookManager", 
                "return_comment": "所有书本的管理对象"
            }, 
            "state": [
                {
                    "comment": "获取书本管理对象", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "myx"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "PlayHudHeartBlinkAnim", 
            "path": "client.extraClientApi", 
            "desc": "播放原版受伤时血量变化的动效", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "播放原版受伤时血量变化的动画", 
                    "operation": "新增", 
                    "version": "2.3", 
                    "author": "wangjian18"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetMcpModLogCanPostDump", 
            "path": "client.extraClientApi", 
            "desc": "设置是否可以打印错误信息到McpModLog日志。", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [
                {
                    "param_comment": "是否可以打印", 
                    "param_name": "canPost", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置是否可打印MCP日志", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "wtq"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetMcpModLogCanPostDump", 
            "path": "client.extraClientApi", 
            "desc": "获取是否可以打印错误信息到McpModLog日志。", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "canPost 是否可以打印"
            }, 
            "state": [
                {
                    "comment": "获取是否可打印MCP日志", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "wtq"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "PostMcpModDump", 
            "path": "client.extraClientApi", 
            "desc": "主动打印信息到McpModLog日志，需要先调用 SetMcpModLogCanPostDump 接口进行设置，才能生效。", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [
                {
                    "param_comment": "错误信息", 
                    "param_name": "msg", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "此参数将作为可变参数传入 logger.error", 
                    "param_name": "*args", 
                    "param_type": "any"
                }, 
                {
                    "param_comment": "此参数将作为关键字参数传入 logger.error", 
                    "param_name": "**kwargs", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "打印MCP日志", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "wtq"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPlayerList", 
            "path": "client.extraClientApi", 
            "desc": "获取所有维度中的全部玩家的id列表", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "返回玩家id列表"
            }, 
            "state": [
                {
                    "comment": "客户端获取所有维度中的全部玩家的id列表", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetEngineActor", 
            "path": "client.extraClientApi", 
            "desc": "获取客户端当前维度中已加载的所有实体（不包含玩家）。", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "当前地图中的所有实体信息，key：实体id，value：实体信息字典"
            }, 
            "state": [
                {
                    "comment": "客户端获取玩家当前维度中已加载的所有实体（不包含玩家）。", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RegisterUIAnimations", 
            "path": "client.extraClientApi", 
            "desc": "注册UI动画", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [
                {
                    "param_comment": "动画的json数据，详见备注", 
                    "param_name": "data", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "是否覆盖原先注册的同命名空间同名的动画（相当于对原先动画的修改），默认值是True，表示覆盖（如果为False，则会检测是否有覆盖，有的话会打印错误信息）", 
                    "param_name": "override", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否注册成功"
            }, 
            "state": [
                {
                    "comment": "注册UI动画", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "UnregisterUIAnimation", 
            "path": "client.extraClientApi", 
            "desc": "取消UI动画的注册", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [
                {
                    "param_comment": "动画的命名空间", 
                    "param_name": "namespace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画的名称", 
                    "param_name": "defName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否取消注册成功"
            }, 
            "state": [
                {
                    "comment": "取消UI动画的注册", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ImportModule", 
            "path": "client.extraClientApi", 
            "desc": "使用字符串路径导入模块，作用与importlib.import_module类似，但只能导入当前加载的mod中的模块", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "模块的绝对路径", 
                    "param_name": "path", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "any", 
                "return_comment": "模块对象，当前加载的所有mod中不存在该模块则返回None"
            }, 
            "state": [
                {
                    "comment": "使用字符串的绝对路径导入模块", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ToggleGyroSensor", 
            "path": "client.extraClientApi", 
            "desc": "开启或关闭陀螺仪传感器采集", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True开启，False关闭，默认False", 
                    "param_name": "isOpen", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "开启或关闭陀螺仪传感器采集", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetGyroSensorReportRate", 
            "path": "client.extraClientApi", 
            "desc": "设置陀螺仪传感器(上报/触发)频率", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "上报/触发频率，默认为1hz,范围为1hz - 200hz", 
                    "param_name": "reportRate", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置陀螺仪传感器(上报/触发)频率", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "IsTouchWithMouse", 
            "path": "client.extraClientApi", 
            "desc": "获取是否正在使用鼠标点击模拟触屏", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否在用鼠标模拟触屏"
            }, 
            "state": [
                {
                    "comment": "获取是否正在使用鼠标点击模拟触屏", 
                    "operation": "新增", 
                    "version": "3.0", 
                    "author": "bl"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideCrossHairGUI", 
            "path": "client.extraClientApi", 
            "desc": "隐藏hud界面的十字准心显示", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否隐藏，True为隐藏，False为显示", 
                    "param_name": "isHide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "隐藏hud界面的十字准心显示", 
                    "operation": "新增", 
                    "version": "3.1", 
                    "author": "lidi"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "getEntitiesOrBlockFromRay", 
            "path": "client.extraClientApi", 
            "desc": "从指定位置发射一条射线，获取与射线相交的实体和方块", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "指定位置坐标（必填）", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "射线方向单位向量（必填）", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "射线长度(一个方块长度为1)（选填，默认16）", 
                    "param_name": "distance", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否穿透，如穿透，则返回所有射线穿过的实体或方块，如不穿透，则返回第一个碰撞到的实体或方块（选填，默认为False）", 
                    "param_name": "isThrough", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "[RayFilterType枚举](../../枚举值/RayFilterType.md)（选填，默认为serverApi.GetMinecraftEnum().RayFilterType.OnlyEntities）", 
                    "param_name": "filterType", 
                    "param_type": "minecraftEnum"
                }
            ], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "返回实体信息列表(根据距指定位置由近到远排序, id越靠前距离指定位置越近)，详细见备注"
            }, 
            "state": [
                {
                    "comment": "客户端新增获取与射线相交的实体和方块接口", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "xgb"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetIntPos", 
            "path": "client.extraClientApi", 
            "desc": "获取坐标所在方块的位置，即浮点数坐标向下取整后的整数坐标。", 
            "doc_class_path": [
                "通用/数学"
            ], 
            "param": [
                {
                    "param_comment": "坐标元组", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "tuple(int,int,int)", 
                "return_comment": "坐标所在方块的位置"
            }, 
            "state": [
                {
                    "comment": "获取坐标所在方块的位置", 
                    "operation": "新增", 
                    "version": "3.4", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetHostPlayerId", 
            "path": "client.extraClientApi", 
            "desc": "获取房主的entityId", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "房主的entityId,若房主未加入则返回None"
            }, 
            "state": [
                {
                    "comment": "获取房主的entityId", 
                    "operation": "新增", 
                    "version": "3.4", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.weatherCompServer.WeatherComponentServer": [
        {
            "name": "IsRaining", 
            "path": "server.component.weatherCompServer.WeatherComponentServer", 
            "desc": "获取是否下雨", 
            "doc_class_path": [
                "世界/天气"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否下雨"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetRaining", 
            "path": "server.component.weatherCompServer.WeatherComponentServer", 
            "desc": "设置是否下雨", 
            "doc_class_path": [
                "世界/天气"
            ], 
            "param": [
                {
                    "param_comment": "下雨强度，范围为0-1", 
                    "param_name": "level", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "天气的持续时间，单位为帧，一秒20帧。持续时间结束后会自动转换为相反的天气。注意，需要在游戏设置中开启天气更替后该参数才会生效。", 
                    "param_name": "time", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetThunder", 
            "path": "server.component.weatherCompServer.WeatherComponentServer", 
            "desc": "设置是否打雷", 
            "doc_class_path": [
                "世界/天气"
            ], 
            "param": [
                {
                    "param_comment": "打雷强度，范围为0-1", 
                    "param_name": "level", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "打雷持续时间，单位为帧，一秒20帧。注意，需要在游戏设置中开启天气更替后该参数才会生效。", 
                    "param_name": "time", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "IsThunder", 
            "path": "server.component.weatherCompServer.WeatherComponentServer", 
            "desc": "获取是否打雷", 
            "doc_class_path": [
                "世界/天气"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否打雷"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetDimensionUseLocalWeather", 
            "path": "server.component.weatherCompServer.WeatherComponentServer", 
            "desc": "设置某个维度拥有自己的天气规则，开启后该维度可以拥有与其他维度不同的天气和天气更替的规则", 
            "doc_class_path": [
                "世界/天气"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否开启独立天气", 
                    "param_name": "value", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "设置某个维度拥有自己的天气规则，开启后该维度可以拥有与其他维度不同的天气和天气更替的规则", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetDimensionUseLocalWeather", 
            "path": "server.component.weatherCompServer.WeatherComponentServer", 
            "desc": "获取某个维度是否拥有自己的天气规则", 
            "doc_class_path": [
                "世界/天气"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否使用了独立天气规则"
            }, 
            "state": [
                {
                    "comment": "获取某个维度是否拥有自己的天气规则", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetDimensionLocalRain", 
            "path": "server.component.weatherCompServer.WeatherComponentServer", 
            "desc": "设置某个维度下雨(必须先使用SetDimensionUseLocalWeather接口设置此维度拥有自己的独立天气)", 
            "doc_class_path": [
                "世界/天气"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "下雨强度，范围0-1", 
                    "param_name": "rainLevel", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "下雨的持续时间，单位为帧，一秒20帧。持续时间结束后会自动转换为相反的天气", 
                    "param_name": "rainTime", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置某个维度下雨(必须先使用SetDimensionUseLocalWeather接口设置此维度拥有自己的独立天气)", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetDimensionLocalThunder", 
            "path": "server.component.weatherCompServer.WeatherComponentServer", 
            "desc": "设置某个维度打雷(必须先使用SetDimensionUseLocalWeather接口设置此维度拥有自己的独立天气)", 
            "doc_class_path": [
                "世界/天气"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "打雷强度，范围0-1", 
                    "param_name": "thunderLevel", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "打雷的持续时间，单位为帧，一秒20帧。持续时间结束后会自动转换为相反的天气", 
                    "param_name": "thunderTime", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置某个维度打雷(必须先使用SetDimensionUseLocalWeather接口设置此维度拥有自己的独立天气)", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetDimensionLocalDoWeatherCycle", 
            "path": "server.component.weatherCompServer.WeatherComponentServer", 
            "desc": "设置某个维度是否开启天气循环(必须先使用SetDimensionUseLocalWeather接口设置此维度拥有自己的独立天气)", 
            "doc_class_path": [
                "世界/天气"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否开启天气循环", 
                    "param_name": "value", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置某个维度是否开启天气循环(必须先使用SetDimensionUseLocalWeather接口设置此维度拥有自己的独立天气)", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetDimensionLocalWeatherInfo", 
            "path": "server.component.weatherCompServer.WeatherComponentServer", 
            "desc": "获取独立维度天气信息(必须先使用SetDimensionUseLocalWeather接口设置此维度拥有自己的独立天气)", 
            "doc_class_path": [
                "世界/天气"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "独立维度天气信息(下雨强度，下雨时间，打雷强度，打雷时间，是否开启天气循环)"
            }, 
            "state": [
                {
                    "comment": "获取独立维度天气信息(必须先使用SetDimensionUseLocalWeather接口设置此维度拥有自己的独立天气)", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.actorRenderCompClient.ActorRenderCompClient": [
        {
            "name": "GetNotRenderAtAll", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "获取实体是否不渲染", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True表示不渲染"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetNotRenderAtAll", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "设置是否关闭实体渲染", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "True表示不渲染该实体", 
                    "param_name": "notRender", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "AddPlayerRenderMaterial", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加玩家渲染需要的<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/3-自定义生物/01-自定义基础生物.html#_3-自定义材质\">材质</a>", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "材质key", 
                    "param_name": "materialKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "材质名称", 
                    "param_name": "materialName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "添加是否成功"
            }, 
            "state": [
                {
                    "comment": "修复从后台切回来被重置的问题", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "增加玩家渲染材质", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddPlayerRenderController", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加玩家<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/3-自定义生物/01-自定义基础生物.html#_7-自定义渲染控制器\">渲染控制器</a>", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "渲染控制器名称", 
                    "param_name": "renderControllerName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染控制器条件", 
                    "param_name": "condition", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "添加是否成功"
            }, 
            "state": [
                {
                    "comment": "修复从后台切回来被重置的问题", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "增加玩家渲染控制器", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemovePlayerRenderController", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "删除玩家<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/3-自定义生物/01-自定义基础生物.html#_7-自定义渲染控制器\">渲染控制器</a>", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "渲染控制器名称", 
                    "param_name": "renderControllerName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "删除是否成功"
            }, 
            "state": [
                {
                    "comment": "修复从后台切回来被重置的问题", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "删除玩家渲染控制器", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemovePlayerGeometry", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "删除玩家渲染几何体", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "渲染几何体名称键，如玩家默认几何体default", 
                    "param_name": "geometryKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "修复从后台切回来被重置的问题", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "删除玩家渲染几何体", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddPlayerGeometry", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加玩家渲染几何体", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "渲染几何体键，如玩家默认几何体default", 
                    "param_name": "geometryKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染几何体名称，如玩家默认几何体geometry.humanoid.custom", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "修复从后台切回来被重置的问题", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "增加玩家渲染几何体", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddPlayerTexture", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加玩家渲染贴图", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "贴图键", 
                    "param_name": "textureKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "贴图路径", 
                    "param_name": "textureName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "修复从后台切回来被重置的问题", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "增加玩家渲染贴图", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddPlayerAnimation", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加玩家渲染动画", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "动画键", 
                    "param_name": "animationKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画名称", 
                    "param_name": "animationName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "修复从后台切回来被重置的问题", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "增加玩家渲染动画", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddPlayerAnimationController", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加玩家渲染动画控制器", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "动画控制器键", 
                    "param_name": "animationControllerKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画控制器名称", 
                    "param_name": "animationControllerName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "修复从后台切回来被重置的问题", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "增加玩家渲染动画控制器", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemovePlayerAnimationController", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "移除玩家渲染动画控制器", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "动画控制器键", 
                    "param_name": "animationControllKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "修复从后台切回来被重置的问题", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "移除玩家渲染动画控制器", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ResetActorRender", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "重置实体渲染接口，包括动画、动画控制器、渲染控制器、贴图、材质、特效资源、音效资源等。", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物的identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加重置实体渲染接口", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddActorAnimationController", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加生物渲染动画控制器", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物的identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画控制器键", 
                    "param_name": "animationControllerKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画控制器名称", 
                    "param_name": "animationControllerName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加生物渲染动画控制器", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddAnimationControllerToOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加单个生物渲染动画控制器", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物的entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画控制器键", 
                    "param_name": "animationControllerKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画控制器名称", 
                    "param_name": "animationControllerName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加单个生物渲染动画控制器", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveActorAnimationController", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "移除生物渲染动画控制器", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物的identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画控制器键，注意，该值需要在json中动画控制器键加上前缀“controller__”", 
                    "param_name": "animationControllKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "移除生物渲染动画控制器", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveAnimationControllerForOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "移除单个生物渲染动画控制器", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物的entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画控制器键，注意，该值需要在json中动画控制器键加上前缀“controller__”", 
                    "param_name": "animationControllKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "移除单个生物渲染动画控制器", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RebuildPlayerRender", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "重建玩家的数据渲染器", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "重建是否成功"
            }, 
            "state": [
                {
                    "comment": "修复从后台切回来被重置的问题", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "重建玩家渲染控制器", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddActorRenderMaterial", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加生物渲染需要的<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/3-自定义生物/01-自定义基础生物.html#_3-自定义材质\">材质</a>", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物的identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "材质的键", 
                    "param_name": "materialKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "材质名称", 
                    "param_name": "materialName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "添加是否成功"
            }, 
            "state": [
                {
                    "comment": "修复从后台切回来被重置的问题", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "增加生物渲染材质", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddRenderMaterialToOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加单个生物渲染需要的<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/3-自定义生物/01-自定义基础生物.html#_3-自定义材质\">材质</a>", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物的entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "材质的键", 
                    "param_name": "materialKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "材质名称", 
                    "param_name": "materialName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "添加是否成功"
            }, 
            "state": [
                {
                    "comment": "增加单个生物的渲染材质", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CopyActorRenderMaterialFromPlayer", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "将渲染<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/3-自定义生物/01-自定义基础生物.html#_3-自定义材质\">材质</a>从某个玩家拷贝到某类生物identifier上", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "源玩家id", 
                    "param_name": "fromPlayerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "拷贝到的生物identifier", 
                    "param_name": "toActorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "源材质的键", 
                    "param_name": "fromMaterialKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "拷贝后新材质的键", 
                    "param_name": "newMaterialKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "添加是否成功"
            }, 
            "state": [
                {
                    "comment": "将渲染材质从某个玩家拷贝到某类生物identifier上", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CopyPlayerRenderMaterialToOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "将渲染<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/3-自定义生物/01-自定义基础生物.html#_3-自定义材质\">材质</a>从某个玩家拷贝到某个生物上", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "源玩家id", 
                    "param_name": "fromPlayerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "源材质的键", 
                    "param_name": "fromMaterialKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "拷贝后新材质的键", 
                    "param_name": "newMaterialKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "添加是否成功"
            }, 
            "state": [
                {
                    "comment": "将渲染材质从某个玩家拷贝到某个生物上", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddActorRenderController", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加生物<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/3-自定义生物/01-自定义基础生物.html#_7-自定义渲染控制器\">渲染控制器</a>", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染控制器名称", 
                    "param_name": "renderControllerName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染控制器条件，当该条件成立时，renderControllerName指向的渲染控制器才会生效", 
                    "param_name": "condition", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "添加是否成功"
            }, 
            "state": [
                {
                    "comment": "修复从后台切回来被重置的问题", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "增加生物渲染控制器", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddRenderControllerToOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加单个生物<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/3-自定义生物/01-自定义基础生物.html#_7-自定义渲染控制器\">的渲染控制器</a>", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染控制器名称", 
                    "param_name": "renderControllerName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染控制器条件，当该条件成立时，renderControllerName指向的渲染控制器才会生效", 
                    "param_name": "condition", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "添加是否成功"
            }, 
            "state": [
                {
                    "comment": "增加单个生物的渲染控制器", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveActorRenderController", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "删除生物<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/3-自定义生物/01-自定义基础生物.html#_7-自定义渲染控制器\">渲染控制器</a>", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染控制器名称", 
                    "param_name": "renderControllerName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "删除是否成功"
            }, 
            "state": [
                {
                    "comment": "修复从后台切回来被重置的问题", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "删除生物渲染控制器", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveRenderControllerForOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "删除单个生物<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/3-自定义生物/01-自定义基础生物.html#_7-自定义渲染控制器\">的渲染控制器</a>", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染控制器名称", 
                    "param_name": "renderControllerName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "删除是否成功"
            }, 
            "state": [
                {
                    "comment": "删除单个生物的渲染控制器", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddActorGeometry", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加生物渲染几何体", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物实体identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染几何体的键，如default", 
                    "param_name": "geometryKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染几何体名称，如熊猫几何体geometry.panda", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加生物渲染几何体", 
                    "operation": "新增", 
                    "version": "2.3", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddGeometryToOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加单个生物渲染几何体", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物实体entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染几何体的键，如default", 
                    "param_name": "geometryKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染几何体名称，如熊猫几何体geometry.panda", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加单个生物渲染几何体", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CopyActorGeometryFromPlayer", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "将渲染几何体从某个玩家拷贝到某类生物identifier上", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "源玩家id", 
                    "param_name": "fromPlayerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "拷贝到的生物identifier", 
                    "param_name": "toActorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "源渲染几何体的键", 
                    "param_name": "fromGeometryKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "拷贝后新渲染几何体的键", 
                    "param_name": "newGeometryKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "将渲染几何体从某个玩家拷贝到某类生物identifier上", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CopyPlayerGeometryToOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "将渲染几何体从某个玩家拷贝到某个生物上", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "源玩家id", 
                    "param_name": "fromPlayerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "源渲染几何体的键", 
                    "param_name": "fromGeometryKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "拷贝后新渲染几何体的键", 
                    "param_name": "newGeometryKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "将渲染几何体从某个玩家拷贝到某个生物上", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RebuildRenderForOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "使用完entity类渲染接口后，重建单个生物渲染控制器（该接口不支持玩家，玩家请使用RebuildPlayerRender）", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "重建是否成功"
            }, 
            "state": [
                {
                    "comment": "使用完entity类渲染接口后，重建单个生物渲染控制器", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "czx"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ResetRenderForOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "将调用OneActor类渲染接口(CopyPlayerTextureToOneActor、CopyPlayerRenderMaterialToOneActor等)的生物重置回种群", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "重置是否成功"
            }, 
            "state": [
                {
                    "comment": "将调用OneActor类渲染接口的生物重置回种群", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveActorGeometry", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "删除生物渲染几何体", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物实体identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染几何体名称，如熊猫几何体geometry.panda", 
                    "param_name": "geometryKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "删除生物渲染几何体", 
                    "operation": "新增", 
                    "version": "2.3", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveGeometryForOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "删除单个生物的渲染几何体", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物实体entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染几何体名称，如熊猫几何体geometry.panda", 
                    "param_name": "geometryKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "删除单个生物的渲染几何体", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddActorTexture", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加生物渲染贴图", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物实体identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "贴图键", 
                    "param_name": "textureKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "贴图路径", 
                    "param_name": "texturePath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加生物渲染贴图", 
                    "operation": "新增", 
                    "version": "2.3", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddTextureToOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加单个生物的渲染贴图", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物实体entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "贴图键", 
                    "param_name": "textureKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "贴图路径", 
                    "param_name": "texturePath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加单个生物的渲染贴图", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CopyActorTextureFromPlayer", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "将贴图从某个玩家拷贝到某类生物identifier上", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "源玩家id", 
                    "param_name": "fromPlayerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "拷贝到的生物identifier", 
                    "param_name": "toActorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "贴图键", 
                    "param_name": "fromTextureKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "拷贝后新贴图的键", 
                    "param_name": "newTextureKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "将贴图从某个玩家拷贝到某类生物identifier上", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CopyPlayerTextureToOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "将贴图从某个玩家拷贝到某个生物上", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "源玩家id", 
                    "param_name": "fromPlayerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "贴图键", 
                    "param_name": "fromTextureKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "拷贝后新贴图的键", 
                    "param_name": "newTextureKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "将贴图从某个玩家拷贝到某个生物上", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveActorTexture", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "删除生物渲染贴图", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物实体identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "贴图键，如default", 
                    "param_name": "textureKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "删除生物渲染贴图", 
                    "operation": "新增", 
                    "version": "2.3", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveTextureForOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "删除单个生物的渲染贴图", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "生物实体entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "贴图键，如default", 
                    "param_name": "textureKey", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "删除单个生物的渲染贴图", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RebuildActorRender", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "重建生物的数据渲染器（该接口不支持玩家，玩家请使用RebuildPlayerRender）", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "实体identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "重建是否成功"
            }, 
            "state": [
                {
                    "comment": "修复从后台切回来被重置的问题", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "重建生物渲染控制器", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ChangeArmorTextures", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "修改盔甲在场景中显示和在UI中显示的贴图", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "盔甲标识符，格式[namespace:name:auxvalue]，auxvalue默认为0", 
                    "param_name": "armorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "场景中目标贴图的映射表，格式可参考\"definitions/attachables/diamond_helmet.json\"配置", 
                    "param_name": "texturesDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "盔甲UI图标的贴图, 为None或者\"\"的话表示不修改UI上的图标", 
                    "param_name": "uiIconTexture", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "修改是否成功（因为采用延迟加载，此处返回成功不代表参数中的贴图路径正确，路径错误会导致渲染时贴图丢失显示异常）"
            }, 
            "state": [
                {
                    "comment": "修改盔甲贴图", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "sutao"
                }, 
                {
                    "comment": "修复uiIconTexture不支持None和\"\"的问题", 
                    "operation": "调整", 
                    "version": "3.0", 
                    "author": "qyk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddPlayerParticleEffect", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加玩家特效资源", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "特效资源Key，如bee.entity.json中的nectar_dripping", 
                    "param_name": "effectKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "特效资源名称，如minecraft:nectar_drip_particle", 
                    "param_name": "effectName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加玩家特效资源", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddActorParticleEffect", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加生物特效资源", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "实体identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "特效资源Key，如bee.entity.json中的nectar_dripping", 
                    "param_name": "effectKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "特效资源名称，如minecraft:nectar_drip_particle", 
                    "param_name": "effectName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加生物特效资源", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddParticleEffectToOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加生物特效资源", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "实体entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "特效资源Key，如bee.entity.json中的nectar_dripping", 
                    "param_name": "effectKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "特效资源名称，如minecraft:nectar_drip_particle", 
                    "param_name": "effectName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加单个生物特效资源", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddPlayerSoundEffect", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加玩家音效资源", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "音效资源Key", 
                    "param_name": "soundKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "音效资源名称", 
                    "param_name": "soundName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加玩家音效资源", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddActorSoundEffect", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加生物音效资源", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "实体identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "音效资源Key", 
                    "param_name": "soundKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "音效资源名称", 
                    "param_name": "soundName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加生物音效资源", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddSoundEffectToOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加单个生物的音效资源", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "实体entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "音效资源Key", 
                    "param_name": "soundKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "音效资源名称", 
                    "param_name": "soundName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加单个生物的音效资源", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddPlayerAnimationIntoState", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "在玩家的动画控制器中的状态添加动画或者动画控制器", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "动画控制器名称，如root（controller.animation.player.root）", 
                    "param_name": "animationControllerName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画状态名称，如first_person", 
                    "param_name": "stateName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "添加的动画名称或动画控制器名称，如first_person_attack_controller_new", 
                    "param_name": "animationName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画控制表达式，默认为空，如query.mod.index > 0", 
                    "param_name": "condition", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "在玩家的动画控制器中的状态添加动画或者动画控制器", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddActorScriptAnimate", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "在生物的客户端实体定义（minecraft:client_entity）json中的scripts/animate节点添加动画/动画控制器", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "实体identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画/动画控制器名称，如look_at_target", 
                    "param_name": "animateName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画/动画控制器控制表达式，默认为空，如query.mod.index > 0", 
                    "param_name": "condition", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否覆盖已存在的动画/动画控制器，默认值为False", 
                    "param_name": "autoReplace", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "在生物的客户端实体定义（minecraft:client_entity）json中的scripts/animate节点添加动画/动画控制器", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddScriptAnimateToOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "在单个生物的客户端实体定义（minecraft:client_entity）json中的scripts/animate节点添加动画/动画控制器", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "实体entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画/动画控制器名称，如look_at_target", 
                    "param_name": "animateName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画/动画控制器控制表达式，默认为空，如query.mod.index > 0", 
                    "param_name": "condition", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否覆盖已存在的动画/动画控制器，默认值为False", 
                    "param_name": "autoReplace", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "在单个生物的客户端实体定义（minecraft:client_entity）json中的scripts/animate节点添加动画/动画控制器", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddPlayerScriptAnimate", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "在玩家的客户端实体定义（minecraft:client_entity）json中的scripts/animate节点添加动画/动画控制器", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "动画/动画控制器名称，如look_at_target", 
                    "param_name": "animateName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画/动画控制器控制表达式，默认为空，如query.mod.index > 0", 
                    "param_name": "condition", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否覆盖已存在的动画/动画控制器，默认值为False", 
                    "param_name": "autoReplace", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "在玩家的客户端实体定义（minecraft:client_entity）json中的scripts/animate节点添加动画/动画控制器", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetActorRenderParams", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "获取实体（包括玩家）渲染参数", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "实体Id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染参数类型，可选类型有\"textures\",\"geometry\",\"materials\",\"animations\",\"render_controllers\",\"particle_effects\",\"sound_effects\"", 
                    "param_name": "paramTypeStr", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否获取详细值，默认为False。该参数对render_controllers无效", 
                    "param_name": "getValue", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "参数列表，如获取失败则返回None"
            }, 
            "state": [
                {
                    "comment": "获取实体渲染参数", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "wangdingdong"
                }, 
                {
                    "comment": "修复返回数据", 
                    "operation": "调整", 
                    "version": "3.4", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddActorAnimation", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加生物渲染动画", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "实体identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画键", 
                    "param_name": "animationKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画名称", 
                    "param_name": "animationName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加生物渲染动画", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddAnimationToOneActor", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加单个生物渲染动画", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "实体entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画键", 
                    "param_name": "animationKey", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画名称", 
                    "param_name": "animationName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "增加单个生物渲染动画", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddActorRenderControllerArray", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "增加生物渲染控制器列表中字典arrays元素", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "实体identifier", 
                    "param_name": "actorIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "实体生物渲染控制器名称", 
                    "param_name": "renderControllerName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "渲染控制器arrays类型([渲染控制器arrays类型枚举](../../枚举值/RenderControllerArrayType.md))", 
                    "param_name": "arrayType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "数组名称", 
                    "param_name": "arrayName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "待添加元素表达式", 
                    "param_name": "expression", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "添加实体渲染控制器数组中字典arrays元素", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xiegang01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddActorBlockGeometry", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "为实体添加方块几何体模型。", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "几何体模型的名称，用于标识每个几何体模型，相当于是该模型的id", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块几何体模型相对实体的位置偏移值，可选参数，默认为(0, 0, 0)。", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "方块几何体模型相对实体的旋转角度，可选参数，默认为(0, 0, 0)，分别表示绕x,y,z轴的旋转角度，旋转顺序按z,x,y顺序旋转。", 
                    "param_name": "rotation", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "添加是否成功，成功返回True，失败返回False。如果实体已经拥有了相同名称的模型，则也会返回True"
            }, 
            "state": [
                {
                    "comment": "为实体添加方块几何体模型", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "DeleteActorBlockGeometry", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "删除实体中指定方块几何体模型。", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "几何体模型的名称，用于标识每个几何体模型，相当于是该模型的id", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "删除是否成功，成功返回True，失败返回False。"
            }, 
            "state": [
                {
                    "comment": "删除实体中的指定方块几何体模型", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ClearActorBlockGeometry", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "删除实体中所有的方块几何体模型。", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "删除是否成功，成功返回True，失败返回False。"
            }, 
            "state": [
                {
                    "comment": "删除实体中的所有的方块几何体模型", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetActorBlockGeometryVisible", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "设置实体中指定的方块几何体模型是否显示。", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "几何体模型的名称，用于标识每个几何体模型，相当于是该模型的id", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "设置是否显示或隐藏，True表示显示，False表示隐藏", 
                    "param_name": "visible", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功，成功返回True，失败返回False。"
            }, 
            "state": [
                {
                    "comment": "设置实体中指定的方块几何体模型是否显示", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetActorAllBlockGeometryVisible", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "设置实体中所有的方块几何体模型是否显示。", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "设置是否显示或隐藏，True表示显示，False表示隐藏", 
                    "param_name": "visible", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功，成功返回True，失败返回False。"
            }, 
            "state": [
                {
                    "comment": "设置实体中所有的方块几何体模型是否显示", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetActorBlockGeometryOffset", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "设置实体的方块几何体模型的位置偏移。", 
            "doc_class_path": [
                "方块/方块几何体模型"
            ], 
            "param": [
                {
                    "param_comment": "几何体模型的名称，用于标识每个几何体模型，相当于是该模型的id", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块几何体模型相对实体的位置偏移值，默认为(0, 0, 0)。", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功，成功返回True，失败返回False。"
            }, 
            "state": [
                {
                    "comment": "设置实体的方块几何体模型的位置偏移。", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetActorBlockGeometryRotation", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "设置实体的方块几何体模型的旋转角度。", 
            "doc_class_path": [
                "方块/方块几何体模型"
            ], 
            "param": [
                {
                    "param_comment": "几何体模型的名称，用于标识每个几何体模型，相当于是该模型的id", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块几何体模型相对实体的旋转角度，默认为(0, 0, 0)，分别表示绕x,y,z轴的旋转角度，旋转顺序按z,x,y顺序旋转。", 
                    "param_name": "rotation", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功，成功返回True，失败返回False。"
            }, 
            "state": [
                {
                    "comment": "设置实体的方块几何体模型的旋转角度。", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "EnableActorBlockGeometryTransparent", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "设置是否允许实体的方块几何体模型产生透明度，允许开启后通过调节方块几何体的透明度将会使得方块几何体模型变得透明。", 
            "doc_class_path": [
                "方块/方块几何体模型"
            ], 
            "param": [
                {
                    "param_comment": "几何体模型的名称，用于标识每个几何体模型，相当于是该模型的id。", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否允许实体的方块几何体模型产生透明度，True表示允许，False表示不允许。", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功，成功返回True，失败返回False。"
            }, 
            "state": [
                {
                    "comment": "设置是否允许实体的方块几何体模型产生透明度。", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetActorBlockGeometryTransparency", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "设置实体的方块几何体模型的透明度。注意，只有调用接口EnableActorBlockGeometryTransparent开启了方块几何体模型的透明度后该接口才会生效。", 
            "doc_class_path": [
                "方块/方块几何体模型"
            ], 
            "param": [
                {
                    "param_comment": "几何体模型的名称，用于标识每个几何体模型，相当于是该模型的id。", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块几何体模型的透明度，范围值为[0,1]，超过这个范围的值将会被截取为0或1。", 
                    "param_name": "transparent", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功，成功返回True，失败返回False。"
            }, 
            "state": [
                {
                    "comment": "设置实体的方块几何体模型的透明度。", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetPlayerItemInHandVisible", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "设置是否隐藏玩家的手持物品模型显示", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "设置是否显示或隐藏，True表示显示，False表示隐藏", 
                    "param_name": "visible", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "设置隐藏手持物品在哪一个视角模式生效。mode=0时，表示第一人称和第三人称下均隐藏手持物品；mode=1时表示仅隐藏第三人称下的手持物品；mode=2时表示仅隐藏第一人称下的手持物品。默认值为0。填入0,1,2以外的数值会被强制设置为0", 
                    "param_name": "mode", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功，成功返回True，失败返回False。"
            }, 
            "state": [
                {
                    "comment": "设置是否隐藏玩家的手持物品模型显示", 
                    "operation": "新增", 
                    "version": "2.3", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetModelStyle", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "获取模型类型", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "normal 表示正常，slim 表示纤细，custom表示自定义"
            }, 
            "state": [
                {
                    "comment": "获取模型类型", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetEntityRenderDistance", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "设置玩家周围的实体的可渲染距离。玩家周围的实体指这个区块内的实体，也包含玩家自身。实体的渲染距离指，实体的位置到玩家相机位置的距离。可渲染距离指，如果实体的渲染距离在可渲染距离之内，则实体会被渲染出来，如果在距离以外，则实体不会被渲染出来。仅对本地玩家有效。", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "实体的可渲染距离，有效值范围为大于等于0。如果小于0，则使用原版游戏内的默认可渲染距离。", 
                    "param_name": "distance", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功，成功返回True，失败返回False。"
            }, 
            "state": [
                {
                    "comment": "实现调整为不影响方块的渲染距离", 
                    "operation": "调整", 
                    "version": "3.0", 
                    "author": "xgb"
                }, 
                {
                    "comment": "新增设置玩家周围的实体的可渲染距离接口", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetEntityRenderDistance", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "获取玩家的实体可渲染距离。玩家周围的实体指这个区块内的实体，也包含玩家自身。实体的渲染距离指，实体的位置到玩家相机位置的距离。可渲染距离指，如果实体的渲染距离在可渲染距离之内，则实体会被渲染出来，如果在距离以外，则实体不会被渲染出来。仅对本地玩家有效。", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "实体可渲染距离。如果获取失败，则返回-1"
            }, 
            "state": [
                {
                    "comment": "新增获取玩家周围的实体可渲染距离接口", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetEntityExtraUniforms", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "设置可在实体shader当中使用的自定义变量的值。该自定义变量总共可设置EXTRA_ACTOR_UNIFORM1,EXTRA_ACTOR_UNIFORM2,EXTRA_ACTOR_UNIFORM3,EXTRA_ACTOR_UNIFORM4，总共4组，每组为一个vec4(float, float, float ,float)类型的向量，向量的默认值为(1.0,1.0,1.0,1.0)。", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "需要设置的自定义变量的下标，值范围为1~4。分别对应EXTRA_ACTOR_UNIFORM1,EXTRA_ACTOR_UNIFORM2,EXTRA_ACTOR_UNIFORM3,EXTRA_ACTOR_UNIFORM4。", 
                    "param_name": "uniformIndex", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "需要设置的自定义变量的值。", 
                    "param_name": "data", 
                    "param_type": "tuple(float,float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功，成功返回True，否则返回False"
            }, 
            "state": [
                {
                    "comment": "新增设置用于实体shader的自定义变量接口", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetEntityUIExtraUniforms", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "设置可在实体shader当中使用的UI自定义变量的值，可在微软UI纸娃娃（paperdoll）及网易版纸娃娃（neteasepaperdoll)上使用identifier渲染某一类生物实体时使用。该自定义变量总共可设置EXTRA_ACTOR_UNIFORM1,EXTRA_ACTOR_UNIFORM2,EXTRA_ACTOR_UNIFORM3,EXTRA_ACTOR_UNIFORM4，总共4组，每组为一个vec4(float, float, float ,float)类型的向量，向量的默认值为(1.0,1.0,1.0,1.0)。", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "需要设置的实体identifier。如果需要对玩家设置，则填写minecraft:player。", 
                    "param_name": "entityIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "需要设置的自定义变量的下标，值范围为1~4。分别对应EXTRA_ACTOR_UNIFORM1,EXTRA_ACTOR_UNIFORM2,EXTRA_ACTOR_UNIFORM3,EXTRA_ACTOR_UNIFORM4。", 
                    "param_name": "uniformIndex", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "需要设置的自定义变量的值。", 
                    "param_name": "data", 
                    "param_type": "tuple(float,float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功，成功返回True，否则返回False"
            }, 
            "state": [
                {
                    "comment": "新增设置用于实体shader的UI自定义变量接口", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetEntityExtraUniforms", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "获取在实体shader当中使用的自定义变量的值。该自定义变量包含EXTRA_ACTOR_UNIFORM1,EXTRA_ACTOR_UNIFORM2,EXTRA_ACTOR_UNIFORM3,EXTRA_ACTOR_UNIFORM4，总共4组，每组为一个vec4(float, float, float ,float)类型的向量。", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "需要设置的自定义变量的下标，值范围为1~4。分别对应EXTRA_ACTOR_UNIFORM1,EXTRA_ACTOR_UNIFORM2,EXTRA_ACTOR_UNIFORM3,EXTRA_ACTOR_UNIFORM4。", 
                    "param_name": "uniformIndex", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float,float)", 
                "return_comment": "返回的对应自定义变量的值。获取失败则返回None。"
            }, 
            "state": [
                {
                    "comment": "新增获取在实体shader使用的自定义变量的值的接口", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetEntityUIExtraUniforms", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "获取在实体shader当中使用的UI自定义变量的值，该变量可在微软UI纸娃娃（paperdoll）及网易版纸娃娃（neteasepaperdoll)上使用identifier渲染某一类生物实体时使用。该自定义变量包含EXTRA_ACTOR_UNIFORM1,EXTRA_ACTOR_UNIFORM2,EXTRA_ACTOR_UNIFORM3,EXTRA_ACTOR_UNIFORM4，总共4组，每组为一个vec4(float, float, float ,float)类型的向量。", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "需要设置的实体identifier。如果获取玩家，则填写minecraft:player。", 
                    "param_name": "entityIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "需要设置的自定义变量的下标，值范围为1~4。分别对应EXTRA_ACTOR_UNIFORM1,EXTRA_ACTOR_UNIFORM2,EXTRA_ACTOR_UNIFORM3,EXTRA_ACTOR_UNIFORM4。", 
                    "param_name": "uniformIndex", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float,float)", 
                "return_comment": "返回的对应自定义变量的值。获取失败则返回None。"
            }, 
            "state": [
                {
                    "comment": "新增获取在实体shader使用的UI自定义变量的值的接口", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetActorBlockGeometryScale", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "设置实体的方块几何体模型的缩放倍率。", 
            "doc_class_path": [
                "方块/方块几何体模型"
            ], 
            "param": [
                {
                    "param_comment": "几何体模型的名称，用于标识每个几何体模型，相当于是该模型的id", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块几何模型在x,y,z各个轴上的缩放值。", 
                    "param_name": "scale", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功，成功返回True，失败返回False。"
            }, 
            "state": [
                {
                    "comment": "设置实体的方块几何体模型的缩放倍率。", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lidi"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetActorBlockGeometryScale", 
            "path": "client.component.actorRenderCompClient.ActorRenderCompClient", 
            "desc": "获取实体的方块几何体模型的缩放倍率。", 
            "doc_class_path": [
                "方块/方块几何体模型"
            ], 
            "param": [
                {
                    "param_comment": "几何体模型的名称，用于标识每个几何体模型，相当于是该模型的id", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "获取成功返回缩放方块几何模型在x,y,z各个轴上的缩放值，失败返回None。"
            }, 
            "state": [
                {
                    "comment": "获取实体的方块几何体模型的缩放倍率。", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lidi"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.cameraCompClient.CameraComponentClient": [
        {
            "name": "GetFov", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "获取视野大小", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "即视频设置中的视野，单位为角度"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetFov", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "设置视野大小", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "单位为角度, 范围为[30, 110]，若fov小于30则设置为30，，若fov大于110，则设置为110.", 
                    "param_name": "fov", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "LockCamera", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "锁定摄像机", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "世界坐标", 
                    "param_name": "lockPos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "摄像机的角度（俯仰角,偏航角,横滚角）", 
                    "param_name": "lockRot", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "lockRot支持roll旋转", 
                    "operation": "调整", 
                    "version": "3.4", 
                    "author": "qiuyukun"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "UnLockCamera", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "解除摄像机锁定", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "PickFacing", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "获取准星选中的实体或者方块", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "选中目标的数据，详见备注"
            }, 
            "state": [
                {
                    "comment": "返回值中添加精准碰撞坐标hitPosX、 hitPoxY、hitPosZ, 三者均为float类型", 
                    "operation": "调整", 
                    "version": "2.11", 
                    "author": "hdy"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetFpHeight", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "获取本地玩家当前状态下，第一人称视角时的摄像机高度偏移量。游泳时，滑翔时以及普通状态下会有所不同", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "高度偏移量"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetChosenEntity", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "获取屏幕点击位置的实体id，通常与GetEntityByCoordEvent配合使用", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "实体id"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetChosen", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "获取屏幕点击位置的实体或方块信息，通常与GetEntityByCoordEvent配合使用", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "选中目标的数据，详见[PickFacing接口](控制.md#pickfacing)的备注"
            }, 
            "state": [
                {
                    "comment": "返回值中添加精准碰撞坐标hitPosX、 hitPoxY、hitPosZ, 三者均为float类型", 
                    "operation": "调整", 
                    "version": "2.11", 
                    "author": "hdy"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "DepartCamera", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "分离玩家与摄像机", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "坐船情况下，分离相机后玩家的镜头水平转动时能够360度转动。", 
                    "operation": "调整", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "UnDepartCamera", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "绑定玩家与摄像机", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetCameraBindActorId", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "将摄像机绑定到目标实体身上（调用者与目标必须在同一个dimension，同时需要在加载范围之内，若绑定后目标离开了范围或者死亡，则会自动解除绑定）", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "目标实体id", 
                    "param_name": "targetId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ResetCameraBindActorId", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "将摄像机重新绑定回主角身上", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetCameraDistanceFixed", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "设置相机弹簧臂固定，即设置当相机遇到阻挡时是否压缩与人物之间的距离", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "是否固定相机距离", 
                    "param_name": "isFixed", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置相机弹簧臂固定，即设置当相机遇到阻挡时是否压缩与人物之间的距离", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetForward", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "返回相机向前的方向", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "向前的方向"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetPosition", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "返回相机中心", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "相机中心位置"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetCameraPos", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "设置相机中心的位置", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "调整设置效果为不存档", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCameraRotation", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "设定摄像机的朝向", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "朝向，其中3个值分别代表Pitch（俯仰角），Yaw（偏航角），Roll（翻滚角）的角度。如果传进来的tuple长度为2，则Roll（翻滚角）的角度默认为0。", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设定摄像机的朝向，并且数值与GetCameraRot一致", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetCameraRotation", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "获取摄像机的朝向", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "朝向，分别代表Pitch（俯仰角），Yaw（偏航角），Roll（翻滚角）的角度"
            }, 
            "state": [
                {
                    "comment": "获取摄像机的朝向，支持获取翻滚角", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCameraOffset", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "设置摄像机偏移量", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "偏移量", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "调整设置效果为不存档", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "xujiarong"
                }, 
                {
                    "comment": "修复当设置的offset的z值为负数时相机位置不正确的问题", 
                    "operation": "修复", 
                    "version": "1.22", 
                    "author": "xujiarong"
                }, 
                {
                    "comment": "修复了设置偏移后，无法正常交互的BUG", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetCameraOffset", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "获取摄像机偏移量", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "偏移量"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetCameraAnchor", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "设置相机锚点", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "锚点偏移量", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置相机锚点", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "jishaobin"
                }, 
                {
                    "comment": "调整设置效果为不存档", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "xujiarong"
                }, 
                {
                    "comment": "修复了设置偏移后，无法正常交互的BUG", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "cxz"
                }, 
                {
                    "comment": "支持x、z轴", 
                    "operation": "调整", 
                    "version": "2.9", 
                    "author": "xsf"
                }, 
                {
                    "comment": "修复交互中心第一人称下没有跟随偏移的BUG", 
                    "operation": "调整", 
                    "version": "3.0", 
                    "author": "qyk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetCameraAnchor", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "获取相机锚点", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "锚点偏移量"
            }, 
            "state": [
                {
                    "comment": "获取相机锚点", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "jishaobin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "LockModCameraPitch", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "锁定摄像机上下角度（第三人称下生效，锁定后不能上下调整视角）", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "1:锁定 0:解锁", 
                    "param_name": "enable", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "IsModCameraLockPitch", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "是否锁定摄像机上下角度", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否锁定"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetCameraPitchLimit", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "获取摄像机上下角度限制值", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "上下角度限制值"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetCameraPitchLimit", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "设置摄像机上下角度限制值，默认是（-90，90）", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "上下角度限制值", 
                    "param_name": "limit", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "调整设置效果为不存档", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "LockModCameraYaw", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "锁定摄像机左右角度（第三人称下生效，锁定后不能通过鼠标左右调整视角）", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "1:锁定 0:解锁", 
                    "param_name": "enable", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "IsModCameraLockYaw", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "是否锁定摄像机左右角度", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否锁定"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetSpeedFovLock", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "是否锁定相机视野fov，锁定后不随速度变化而变化", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "是否锁定", 
                    "param_name": "isLocked", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "AddCameraTrackMotion", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "给相机添加轨迹运动器", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "轨迹终点", 
                    "param_name": "targetPos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "到达终点所需要的时间", 
                    "param_name": "duraTime", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "轨迹起点，默认为None，表示以调用[StartCameraMotion](#StartCameraMotion)的位置作为起点。", 
                    "param_name": "startPos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "是否使用相对坐标设置起点和终点，默认为False。", 
                    "param_name": "relativeCoord", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否循环，若设为True，则相机会在起点和终点之间往复运动，默认为False。", 
                    "param_name": "isLoop", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "相机到达targetPos时的朝向，受参数relativeCoord影响，默认为None，表示使用调用[StartCameraMotion](#StartCameraMotion)时的朝向。", 
                    "param_name": "targetRot", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "相机到达startPos时的朝向，受参数relativeCoord影响，默认为None，表示使用调用[StartCameraMotion](#StartCameraMotion)时的朝向。", 
                    "param_name": "startRot", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "是否使用运动中的速度方向作为朝向，默认为False，若为True，则参数targetRot和startRot无效", 
                    "param_name": "useVelocityDir", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "时间变化函数, 默认值为clientApi.GetMinecraftEnum().TimeEaseType.linear, 参数不在枚举值中也当作linear", 
                    "param_name": "ease", 
                    "param_type": "TimeEaseType"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "运动器ID，添加失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "给相机轨迹运动器添加朝向控制", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "wangdingdong"
                }, 
                {
                    "comment": "给相机添加轨迹运动器", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "wangdingdong"
                }, 
                {
                    "comment": "增加插值类型", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xusifan"
                }, 
                {
                    "comment": "targetRot和startRot支持roll旋转", 
                    "operation": "调整", 
                    "version": "3.4", 
                    "author": "qiuyukun"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddCameraVelocityMotion", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "给相机添加速度运动器", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "速度，包含大小、方向", 
                    "param_name": "velocity", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "加速度，包含大小、方向，默认为None，表示没有加速度", 
                    "param_name": "accelerate", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "是否使用当前速度的方向作为此刻相机的朝向，默认为True", 
                    "param_name": "useVelocityDir", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "运动器ID，添加失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "给相机添加速度运动器", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddCameraAroundPointMotion", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "给相机添加对点环绕运动器", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "要环绕的圆心点坐标", 
                    "param_name": "center", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "圆周运动的角速度（弧度/秒）", 
                    "param_name": "angularVelocity", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "圆周运动的轴，决定了在哪个平面上做圆周运动，默认为(0, 1, 0)", 
                    "param_name": "axis", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "是否在运动器生效时锁定相机的朝向，不锁定则相机的朝向会随着运动而改变，默认为False。", 
                    "param_name": "lockDir", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "停止该运动器所需要的弧度，当stopRad为0时，该运动器会一直运行，默认为0", 
                    "param_name": "stopRad", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "运动器ID，添加失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "给相机添加对点环绕运动器", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddCameraAroundEntityMotion", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "给相机添加对实体环绕运动器", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "要环绕的某个实体的ID", 
                    "param_name": "eID", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "圆周运动的角速度（弧度/秒）", 
                    "param_name": "angularVelocity", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "圆周运动的轴，决定了在哪个平面上做圆周运动，默认为(0, 1, 0)", 
                    "param_name": "axis", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "是否在运动器生效时锁定相机的朝向，不锁定则相机的朝向会随着运动而改变，默认为False。", 
                    "param_name": "lockDir", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "停止该运动器所需要的弧度，当stopRad为0时，该运动器会一直运行，默认为0", 
                    "param_name": "stopRad", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "环绕半径，当设置为-1时环绕运动器使用当前与目标的距离作为半径，当设置为非负数时表示按设定的值作为环绕半径，默认为-1", 
                    "param_name": "radius", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "运动器ID，添加失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "给相机添加对实体环绕运动器", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "wangdingdong"
                }, 
                {
                    "comment": "对实体环绕运动器可以指定半径", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetCameraMotions", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "获取相机上的所有运动器", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "运动器集合，key值代表运动器mID，value值代表运动器类型0：轨迹运动器、1：速度运动器、2：环绕运动器"
            }, 
            "state": [
                {
                    "comment": "获取相机上所有运动器", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveCameraMotion", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "移除相机上的某个运动器", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "要移除的某个运动器的ID", 
                    "param_name": "motionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功移除"
            }, 
            "state": [
                {
                    "comment": "移除相机上的某个运动器", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "StartCameraMotion", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "启动相机上的某个运动器", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "要启动的某个运动器的ID", 
                    "param_name": "motionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功启动"
            }, 
            "state": [
                {
                    "comment": "启动相机上的某个运动器", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "StopCameraMotion", 
            "path": "client.component.cameraCompClient.CameraComponentClient", 
            "desc": "停止相机上的某个运动器", 
            "doc_class_path": [
                "玩家/摄像机"
            ], 
            "param": [
                {
                    "param_comment": "要停止的某个运动器的ID", 
                    "param_name": "motionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功停止"
            }, 
            "state": [
                {
                    "comment": "停止相机上的某个运动器", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.healthCompClient.HealthComponentClient": [
        {
            "name": "SetColor", 
            "path": "client.component.healthCompClient.HealthComponentClient", 
            "desc": "设置血条的颜色及背景色", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "血条颜色的RGBA值，范围0-1", 
                    "param_name": "front", 
                    "param_type": "tuple(float,float,float,float)"
                }, 
                {
                    "param_comment": "背景颜色的RGBA值，范围0-1", 
                    "param_name": "back", 
                    "param_type": "tuple(float,float,float,float)"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ShowHealth", 
            "path": "client.component.healthCompClient.HealthComponentClient", 
            "desc": "设置某个entity是否显示血条，默认为显示", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "设置是否显示", 
                    "param_name": "show", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetHealthBarDeviation", 
            "path": "client.component.healthCompClient.HealthComponentClient", 
            "desc": "设置某个entity血条的相对高度", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "血条的相对高度", 
                    "param_name": "health_bar_deviation", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "新增设置血条高度的接口", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "gmy"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.portalCompServer.PortalComponentServer": [
        {
            "name": "DetectStructure", 
            "path": "server.component.portalCompServer.PortalComponentServer", 
            "desc": "检测自定义门的结构", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "该参数未使用，直接传入None即可", 
                    "param_name": "playerId", 
                    "param_type": "None"
                }, 
                {
                    "param_comment": "传送门形状", 
                    "param_name": "pattern", 
                    "param_type": "list(str)"
                }, 
                {
                    "param_comment": "传送门定义", 
                    "param_name": "defines", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "传送门可激活的位置（相对参数pattern中定义的位置）", 
                    "param_name": "touchPos", 
                    "param_type": "list(tuple(int,int))"
                }, 
                {
                    "param_comment": "使用物品坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "传送门所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "tuple(bool,tuple(int,int,int),tuple(int,int,int))", 
                "return_comment": "检测结果,传送门起始位置,方向"
            }, 
            "state": [
                {
                    "comment": "新增dimensionId参数，默认为-1，传入非负值时不依赖playerId", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "检测自定义门的结构", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.ui.controls.gridUIControl.GridUIControl": [
        {
            "name": "SetGridDimension", 
            "path": "client.ui.controls.gridUIControl.GridUIControl", 
            "desc": "设置Grid控件的大小", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "设置网格的横向与纵向大小", 
                    "param_name": "dimension", 
                    "param_type": "tuple(int,int)"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetGridItem", 
            "path": "client.ui.controls.gridUIControl.GridUIControl", 
            "desc": "根据网格位置获取元素控件", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "元素在网格的横坐标", 
                    "param_name": "x", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "元素在网格的纵坐标", 
                    "param_name": "y", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "BaseUIControl", 
                "return_comment": "网格的子节点控件"
            }, 
            "state": [
                {
                    "comment": "根据网格位置获取元素控件", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.blockInfoCompClient.BlockInfoComponentClient": [
        {
            "name": "GetBlockClip", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "获取指定位置方块当前clip的aabb", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "方块aabb字典"
            }, 
            "state": [
                {
                    "comment": "获取指定位置方块当前clip的aabb", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xusifan"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBlockCollision", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "获取指定位置方块当前collision的aabb", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "方块aabb字典"
            }, 
            "state": [
                {
                    "comment": "获取指定位置方块当前collision的aabb", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xusifan"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBlock", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "获取某一位置的block", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "tuple(str,int)", 
                "return_comment": "参数1:方块的名称，参数2:方块的附加值AuxValue"
            }, 
            "state": [
                {
                    "comment": "支持CreateBlockInfo时传入levelId，可获取到已加载区块中的方块信息", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetTopBlockHeight", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "获取当前维度某一位置最高的非空气方块的高度", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "x轴与z轴位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int)"
                }
            ], 
            "return": {
                "return_type": "int或None", 
                "return_comment": "高度。若区块未加载返回None"
            }, 
            "state": [
                {
                    "comment": "获取某一位置最高的非空气方块的高度", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ChangeBlockTextures", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "替换方块贴图", 
            "doc_class_path": [
                "方块/渲染"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，格式[namespace:name:auxvalue]，auxvalue默认为0; 只支持普通的没有特殊渲染逻辑的方形方块，否则可能会显示异常", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "原贴图在图集中对应的名字，对应terrain_texture.json中的配置", 
                    "param_name": "tileName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "打算替换成的贴图的路径", 
                    "param_name": "texturePath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功（因为采用延迟加载，此处返回成功不代表贴图路径正确，路径错误会导致渲染时贴图丢失显示异常）"
            }, 
            "state": [
                {
                    "comment": "替换方块的贴图，使用该贴图的所有方块朝向或者使用该贴图的其它方块也会同时被改变", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBlockTextures", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "获取方块的初始贴图信息", 
            "doc_class_path": [
                "方块/渲染"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，格式[namespace:name]", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "需要获取的方块面，参考[Facing枚举](../../枚举值/Facing.md)，face默认值为6，此时获取方块所有面的贴图信息", 
                    "param_name": "face", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "方块的贴图信息textureInfoDict，获取错误（如特殊方块：门、床等）则返回为None"
            }, 
            "state": [
                {
                    "comment": "获取方块的初始贴图信息", 
                    "operation": "新增", 
                    "version": "2.3", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetDestroyTotalTime", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "获取使用物品破坏方块需要的时间", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，格式[namespace:name:auxvalue]，auxvalue默认为0", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "物品标识符，格式[namespace:name:auxvalue]，auxvalue默认为0，默认为None（不使用物品）", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "挖掘参数，包含以下字段：急迫等级haste、潮涌能量等级conduit_power、挖掘疲劳mining_fatigue以及挖掘效率等级mining_efficiency，默认为None（所有参数为0）", 
                    "param_name": "miningArgs", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "需要消耗的时间"
            }, 
            "state": [
                {
                    "comment": "增加可选挖掘参数", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "lidi"
                }, 
                {
                    "comment": "获取使用物品破坏方块需要的时间", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBlockEntityMolangValue", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "设置自定义方块实体的Molang变量，与实体的molang变量作用相同。目前主要用于控制自定义实体的动画状态转变。Molang变量的定义方式与原版实体的Molang变量定义方法相同。详细可参考自定义方块实体动画的教学文档。", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "molang变量的名称，以\"variable.\"开头，并且不能包含超过两个\".\"。", 
                    "param_name": "variableName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "molang变量的值", 
                    "param_name": "value", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置自定义方块实体的Molang变量，用于控制自定义实体的动画转变。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBlockEntityMolangValue", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "获取自定义方块实体的Molang变量的值。", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "molang变量的名称，以\"variable.\"开头，并且不能包含超过两个\".\"。", 
                    "param_name": "variableName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "该molang变量的值，如该变量不存在，则返回None"
            }, 
            "state": [
                {
                    "comment": "获取自定义方块实体的Molang变量的值。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetEnableBlockEntityAnimations", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "设置是否开启自定义方块实体的动画效果，开启之后，自定义实体方块会按照实体文件中animation_controller所定义的动画状态机进行动画播放。关闭之后，则会停止所有动画播放。", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "是否开启自定义方块实体的动画播放", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "是否开启自定义方块实体的动画效果。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CreateParticleEffectForBlockEntity", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "在自定义方块实体上创建粒子特效，创建后该接口返回粒子特效的Id，利用该Id可以使用特效/粒子中的接口对该粒子特效进行播放、设置位置、大小等操作。与实体的粒子特效创建方式类似。若自定义方块实体已存在键值名称相同的特效，则不会创建新的特效，接口返回已有的特效Id。", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "特效资源路径，需要加上后缀名（一般是json)。路径为resource_pack/effects文件下的粒子特效json文件路径，路径名以\"effects/\"开头。", 
                    "param_name": "path", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "该粒子特效的自定义键值名称，创建粒子特效后可以使用该键值名称通过GetParticleEffectIdInBlockEntity接口来获取粒子特效的id。", 
                    "param_name": "particleKeyName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "特效相对自定义方块实体的位置，即以自定方块实体所在的位置为原点的坐标系下的坐标位置。", 
                    "param_name": "effectPos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "int或None", 
                "return_comment": "创建成功则返回粒子特效的Id，创建失败则返回None"
            }, 
            "state": [
                {
                    "comment": "在自定义方块实体上创建粒子特效。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetParticleEffectIdInBlockEntity", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "获取在自定义方块实体中已创建的指定粒子特效的Id，已创建的特效分为两种：一是通过resource_pack/entity/下的实体json文件中使用“netease_particle_effects”所定义的特效；二是使用接口CreateParticleEffectForBlockEntity创建的特效。 返回的特效Id可以使用特效/粒子中的接口对该粒子特效进行播放、设置位置、大小等操作。与实体的粒子特效创建方式类似。", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "粒子特效的自定义键值名称，即：netease_particle_effects: {  \"keyName\" : {\"path“：“effects/xxx.json”, \"pos\": [1.0, 1.0, 1.0f]} } 中的\"keyName\"，又或者是通过CreateParticleEffectForBlockEntity创建特效时该接口中填写的particleKeyName参数。", 
                    "param_name": "particleKeyName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int或None", 
                "return_comment": "返回粒子特效的Id，该键值不存在则返回None"
            }, 
            "state": [
                {
                    "comment": "获取在自定义方块实体中已创建的粒子特效的Id。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveParticleEffectInBlockEntity", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "移除在自定义方块实体上创建的粒子特效。移除后的特效Id将会失效。", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "该粒子特效的自定义键值名称。", 
                    "param_name": "particleKeyName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "移除成功返回True, 该键值不存在则返回False"
            }, 
            "state": [
                {
                    "comment": "移除在自定义方块实体上创建的粒子特效。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CreateFrameEffectForBlockEntity", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "在自定义方块实体上创建序列帧特效，创建后该接口返回序列帧特效的Id，利用该Id可以使用特效/序列帧中的接口对该序列帧特效进行播放、设置位置、大小等操作。与实体的序列帧特效创建方式类似。", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "特效资源路径，不需要后缀名，路径为resource_pack/textures文件夹下或resource_pack/effects下的序列帧资源文件的路径，路径名分别以\"textures/\"开头或\"effects/\"开头。路径名以\"textures/\"开头时不需要加.json后缀名， 路径名以\"effects/\"开头时需要加.json后缀名。", 
                    "param_name": "path", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "该序列帧特效的自定义键值名称，创建序列帧特效后可以使用该键值名称通过GetFrameEffectIdInBlockEntity接口来获取序列帧特效的id。", 
                    "param_name": "frameKeyName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "特效相对自定义方块实体的位置，即以自定方块实体所在的位置为原点的坐标系下的坐标位置。", 
                    "param_name": "effectPos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "int或None", 
                "return_comment": "创建成功则返回序列帧特效的Id，创建失败则返回None"
            }, 
            "state": [
                {
                    "comment": "在自定义方块实体上创建序列帧特效。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetFrameEffectIdInBlockEntity", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "获取在自定义方块实体中已创建的指定序列帧特效的Id，已创建的特效分为两种：一是通过resource_pack/entity/下的实体json文件中使用“netease_frame_effects”所定义的特效；二是使用接口CreateFrameEffectForBlockEntity创建的特效。 返回的特效Id可以使用特效/序列帧中的接口对该序列帧特效进行播放、设置位置、大小等操作。与实体的序列帧特效创建方式类似。", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "序列帧特效的自定义键值名称，即：netease_frame_effects: {  \"keyName\" : {\"path“：“textures/sfxs/xxx.json”, \"pos\": [1.0, 1.0, 1.0f]} } 中的\"keyName\"，又或者是通过CreateFrameEffectForBlockEntity创建特效时该接口中填写的frameKeyName参数。", 
                    "param_name": "frameKeyName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int或None", 
                "return_comment": "返回序列帧特效的Id，该键值不存在则返回None"
            }, 
            "state": [
                {
                    "comment": "获取在自定义方块实体中已创建的序列帧特效的Id。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveFrameEffectInBlockEntity", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "移除在自定义方块实体上创建的序列帧特效。移除后的特效Id将会失效。", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "该序列帧特效的自定义键值名称。", 
                    "param_name": "frameKeyName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "移除成功返回True, 该键值不存在则返回False"
            }, 
            "state": [
                {
                    "comment": "移除在自定义方块实体上创建的序列帧特效。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBlockEntityParticlePosOffset", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "设置自定义方块实体中粒子特效位置偏移值，用于调整粒子特效相对于方块位置的偏移。与特效/粒子/SetPos接口不同，该接口调整的是相对于方块位置的位置偏移值，而不是世界坐标。", 
            "doc_class_path": [
                "方块/渲染"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "该粒子特效的自定义键值名称。", 
                    "param_name": "particleKeyName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "粒子特效相对于方块位置的x，y，z方向的偏移值", 
                    "param_name": "effectPosOffset", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置自定义方块实体中粒子特效位置的偏移值", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBlockEntityFramePosOffset", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "设置自定义方块实体中序列帧特效位置偏移值，用于调整序列帧特效相对于方块位置的偏移。与特效/序列帧/SetPos接口不同，该接口调整的是相对于方块位置的位置偏移值，而不是世界坐标。", 
            "doc_class_path": [
                "方块/渲染"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "该序列帧特效的自定义键值名称。", 
                    "param_name": "frameKeyName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "序列帧特效相对于方块位置的x，y，z方向的偏移值", 
                    "param_name": "effectPosOffset", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置自定义方块实体中序列帧特效位置的偏移值", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBlockEntityModelPosOffset", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "设置自定义方块实体的实体模型位置偏移值，用于调整实体模型相对于方块位置的偏移。可通过该接口来调整自定义方块实体的实体模型的位置。只有自定义方块实体定义实体模型才生效，实体模型在resource_pack/entity/下定义，详细可参考自定义方块实体动画的教学文档。", 
            "doc_class_path": [
                "方块/渲染"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "实体模型相对于方块位置的x，y，z方向的偏移值", 
                    "param_name": "modelPosOffset", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置自定义方块实体的实体模型位置偏移值", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBlockEntityModelScale", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "设置自定义方块实体的实体模型大小的缩放值，可通过该接口来调整自定义方块实体的实体模型的大小。只有自定义方块实体定义实体模型才生效，实体模型在resource_pack/entity/下定义，详细可参考自定义方块实体动画的教学文档。", 
            "doc_class_path": [
                "方块/渲染"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "实体模型在x,y,z各个轴上的缩放值。支持负值，当某一轴的缩放值为负值时，表示模型将会在这个轴上进行以另外两个轴为对称平面的镜像变换。", 
                    "param_name": "scale", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置自定义方块实体的实体模型大小的缩放值。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBlockEntityModelRotation", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "设置自定义方块实体的实体模型在各个轴上的旋转值，可通过该接口来调整自定义方块实体的实体模型的旋转。只有自定义方块实体定义实体模型才生效，实体模型在resource_pack/entity/下定义，详细可参考自定义方块实体动画的教学文档。", 
            "doc_class_path": [
                "方块/渲染"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "旋转角度，范围为[-360,360]。", 
                    "param_name": "angles", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "旋转轴，绕该轴进行旋转，该参数仅支持填写以下三个值之一: \"x\", \"y\", \"z\"，大小写均可。", 
                    "param_name": "rotateAxis", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置自定义方块实体的实体模型在各个轴上的旋转值。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RegisterOnStandOn", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "可以动态注册与修改netease:on_stand_on组件", 
            "doc_class_path": [
                "event.OnStandOnBlockClientEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否注册成功"
            }, 
            "state": [
                {
                    "comment": "可以动态注册与修改原版方块的netease:on_stand_on组件（客户端接口）", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "文档删除sendPythonEvent字段", 
                    "operation": "调整", 
                    "version": "2.5", 
                    "author": "hdy"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "UnRegisterOnStandOn", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "可以动态删除netease:on_stand_on组件", 
            "doc_class_path": [
                "event.OnStandOnBlockClientEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "可以动态删除原版方块的netease:on_stand_on组件（客户端接口）", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RegisterOnStepOn", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "可以动态注册与修改netease:on_step_on组件", 
            "doc_class_path": [
                "event.StepOnBlockClientEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否注册成功"
            }, 
            "state": [
                {
                    "comment": "可以动态注册与修改原版方块的netease:on_step_on组件（客户端接口）", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "文档删除sendPythonEvent字段", 
                    "operation": "调整", 
                    "version": "2.5", 
                    "author": "hdy"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "UnRegisterOnStepOn", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "可以动态删除netease:on_step_on组件", 
            "doc_class_path": [
                "event.StepOnBlockClientEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "可以动态删除原版方块的netease:on_step_on组件（客户端接口）", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RegisterOnStepOff", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "可以动态注册与修改netease:on_step_off组件", 
            "doc_class_path": [
                "event.StepOffBlockClientEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否注册成功"
            }, 
            "state": [
                {
                    "comment": "可以动态注册与修改原版方块的netease:on_step_off组件（客户端接口）", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "文档删除sendPythonEvent字段", 
                    "operation": "调整", 
                    "version": "2.5", 
                    "author": "hdy"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "UnRegisterOnStepOff", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "可以动态删除netease:on_step_off组件", 
            "doc_class_path": [
                "event.StepOffBlockClientEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "可以动态删除原版方块的netease:on_step_off组件（客户端接口）", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RegisterOnEntityInside", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "可以动态注册与修改netease:on_entity_inside组件", 
            "doc_class_path": [
                "event.OnEntityInsideBlockClientEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否注册成功"
            }, 
            "state": [
                {
                    "comment": "可以动态注册与修改原版方块的netease:on_entity_inside组件（客户端接口）", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "文档删除sendPythonEvent字段", 
                    "operation": "调整", 
                    "version": "2.5", 
                    "author": "hdy"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "UnRegisterOnEntityInside", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "可以动态删除netease:on_entity_inside组件", 
            "doc_class_path": [
                "event.OnEntityInsideBlockClientEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "可以动态删除原版方块的netease:on_entity_inside组件（客户端接口）", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBlockEntityData", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "用于获取客户端当前维度中方块（包括自定义方块）的数据，数据只读不可写，无法获取箱子内的物品信息。", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "dict或None", 
                "return_comment": "方块实体内数据的对象"
            }, 
            "state": [
                {
                    "comment": "客户端获取方块（包括自定义方块）的数据", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBlockEntityExtraUniforms", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "设置可在自定义方块实体的shader当中使用的自定义变量的值，该自定义变量总共可设置EXTRA_ACTOR_UNIFORM1,EXTRA_ACTOR_UNIFORM2,EXTRA_ACTOR_UNIFORM3,EXTRA_ACTOR_UNIFORM4，总共4组，每组为一个vec4(float, float, float ,float)类型的向量，向量的默认值为(1.0,1.0,1.0,1.0)。", 
            "doc_class_path": [
                "方块/渲染"
            ], 
            "param": [
                {
                    "param_comment": "方块实体所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "需要设置的自定义变量的下标，值范围为1~4。分别对应EXTRA_ACTOR_UNIFORM1,EXTRA_ACTOR_UNIFORM2,EXTRA_ACTOR_UNIFORM3,EXTRA_ACTOR_UNIFORM4。", 
                    "param_name": "uniformIndex", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "需要设置的自定义变量的值。", 
                    "param_name": "data", 
                    "param_type": "tuple(float,float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功，成功返回True，否则返回False"
            }, 
            "state": [
                {
                    "comment": "设置可在自定义方块实体的shader当中使用的自定义变量的值。", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBlockEntityExtraUniforms", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "获取在自定义方块实体的shader当中使用的自定义变量的值，该自定义变量总共可设置EXTRA_ACTOR_UNIFORM1,EXTRA_ACTOR_UNIFORM2,EXTRA_ACTOR_UNIFORM3,EXTRA_ACTOR_UNIFORM4，总共4组，每组为一个vec4(float, float, float ,float)类型的向量。", 
            "doc_class_path": [
                "方块/渲染"
            ], 
            "param": [
                {
                    "param_comment": "方块实体所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "需要设置的自定义变量的下标，值范围为1~4。分别对应EXTRA_ACTOR_UNIFORM1,EXTRA_ACTOR_UNIFORM2,EXTRA_ACTOR_UNIFORM3,EXTRA_ACTOR_UNIFORM4。", 
                    "param_name": "uniformIndex", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float,float)", 
                "return_comment": "返回的对应自定义变量的值。获取失败则返回None。"
            }, 
            "state": [
                {
                    "comment": "获取在自定义方块实体的shader当中使用的自定义变量的值。", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBlockRenderDistance", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "设置玩家周围方块的可渲染距离", 
            "doc_class_path": [
                "方块/渲染"
            ], 
            "param": [
                {
                    "param_comment": "区块的可渲染距离，有效值范围为大于等于16，传入无效值则使用原版游戏内的能见度，能见度区块数x与渲染距离dis的换算方法约为dis = x*16 + 13.8564。", 
                    "param_name": "distance", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功，成功返回True，失败返回False。"
            }, 
            "state": [
                {
                    "comment": "设置玩家周围区块的可渲染距离，无法超过视频设置中的能见度限制", 
                    "operation": "新增", 
                    "version": "3.0", 
                    "author": "xgb"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBlockRenderDistance", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "获取玩家周围的可渲染距离", 
            "doc_class_path": [
                "方块/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "玩家周围的可渲染距离，未设置过渲染距离时，返回的是原版能见度对应的渲染距离。"
            }, 
            "state": [
                {
                    "comment": "获取玩家周围的可渲染距离", 
                    "operation": "新增", 
                    "version": "3.0", 
                    "author": "xgb"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddTerrainDestroyParticleEffect", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "在指定位置播放指定方块被开始破坏时的粒子效果（如果有）。", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [
                {
                    "param_comment": "需要播放的粒子效果所属的方块名称(identifier)，例如minecraft:stone。", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块附加值", 
                    "param_name": "aux", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "需要播放特效的位置。", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "播放是否成功。"
            }, 
            "state": [
                {
                    "comment": "在指定位置播放指定方块被开始破坏时的粒子效果", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveTerrainDestroyParticleEffect", 
            "path": "client.component.blockInfoCompClient.BlockInfoComponentClient", 
            "desc": "停止指定位置播放的方块被开始破坏时的粒子效果。", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [
                {
                    "param_comment": "需要停止的粒子效果所属的方块名称(identifier)，例如minecraft:stone。", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块附加值", 
                    "param_name": "aux", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "需要停止的特效的位置。", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "播放是否成功。"
            }, 
            "state": [
                {
                    "comment": "停止指定位置播放的方块被开始破坏时的粒子效果", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.rideCompServer.RideCompServer": [
        {
            "name": "SetEntityRide", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "驯服可骑乘生物", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "要驯服的可骑乘生物id", 
                    "param_name": "tamedEntityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetRidePos", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "设置生物骑乘位置", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "可骑乘生物id", 
                    "param_name": "tamedEntityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "骑乘时挂接点", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetControl", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "设置该生物无需装备鞍就可以控制行走跳跃", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "可骑乘生物id", 
                    "param_name": "tamedEntityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否控制", 
                    "param_name": "isControl", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetCanOtherPlayerRide", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "设置其他玩家是否有权限骑乘，True表示每个玩家都能骑乘，False只有驯服者才能骑乘", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "可骑乘生物id", 
                    "param_name": "tamedEntityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否控制", 
                    "param_name": "canRide", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetShowRideUI", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "设置是否显示马匹的UI界面", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "可骑乘生物id", 
                    "param_name": "tamedEntityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否显示UI", 
                    "param_name": "isShowUI", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "IsEntityRiding", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "检查玩家是否骑乘。", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否骑乘"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntityRider", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "获取骑乘者正在骑乘的实体的id。", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "骑乘者直接骑乘对象的实体id，假如骑乘者没有骑乘则返回“-1”"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "StopEntityRiding", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "强制骑乘者下坐骑。", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "当骑乘者当前正在骑乘并成功下坐骑返回True，否则返回False"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetRiderRideEntity", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "设置实体骑乘生物（或者船与矿车）", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "骑乘生物id", 
                    "param_name": "riderId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "被骑乘生物id。要求被骑乘生物的定义中具有minecraft:rideable组件，且组件中family_types含有可骑乘者的类型声明", 
                    "param_name": "riddenEntityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "指定实体成为第n个骑乘者，范围为0~SeatCount-1，默认不指定", 
                    "param_name": "riderIndex", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "新增实体骑乘生物接口", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "why117"
                }, 
                {
                    "comment": "增加备注要求被骑乘生物的定义中具有minecraft:rideable组件，且组件中family_types含有可骑乘者的类型声明", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "sutao"
                }, 
                {
                    "comment": "支持骑乘船与矿车", 
                    "operation": "调整", 
                    "version": "2.2", 
                    "author": "czh"
                }, 
                {
                    "comment": "支持设置玩家成为第n个骑乘者", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "hyt"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetEntityLockRider", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "设置坐骑上的实体是否锁定序号", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "是否锁定实体当前所处的序号", 
                    "param_name": "isLock", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "设置坐骑上的实体是否锁定序号", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "hyt"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "ChangeRiderSeat", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "设置骑乘者在当前坐骑上的序号", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "指定实体成为第n个骑乘者，范围为0~SeatCount-1", 
                    "param_name": "riderIndex", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "设置骑乘者在当前坐骑上的序号", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "hyt"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetRiders", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "获取坐骑上的骑乘者信息", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "骑乘者信息，包括骑乘者的entityId，其在骑乘者列表中的序号riderIndex以及所坐的座位序号seatIndex"
            }, 
            "state": [
                {
                    "comment": "修复返回值描述为list(dict)", 
                    "operation": "修复", 
                    "version": "2.12", 
                    "author": "qiuyukun"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddEntitySeat", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "增加坐骑座位", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "座位位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "座位旋转，默认为0", 
                    "param_name": "rot", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "骑乘者允许旋转角度范围，默认不限制", 
                    "param_name": "lock_rot", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "当前最大座位序号，增加失败返回-1"
            }, 
            "state": [
                {
                    "comment": "增加坐骑座位", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "hyt"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetEntitySeat", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "设置坐骑座位的位置、旋转以及允许实体旋转范围", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "座位序号，范围为0~最大座位序号", 
                    "param_name": "seatIndex", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "座位位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "座位旋转，默认为0", 
                    "param_name": "rot", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "骑乘者允许旋转角度范围，默认不限制", 
                    "param_name": "lock_rot", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "设置坐骑座位的位置、旋转以及允许实体旋转范围", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "hyt"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "DeleteEntitySeat", 
            "path": "server.component.rideCompServer.RideCompServer", 
            "desc": "删除坐骑座位", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "座位序号，范围为0~最大座位序号", 
                    "param_name": "seatIndex", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "删除坐骑座位", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "hyt"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.redStoneCompServer.RedStoneComponentServer": [
        {
            "name": "GetStrength", 
            "path": "server.component.redStoneCompServer.RedStoneComponentServer", 
            "desc": "获取某个坐标的红石信号强度", 
            "doc_class_path": [
                "方块/红石"
            ], 
            "param": [
                {
                    "param_comment": "坐标位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "目标维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "红石信号强度[0, 15]"
            }, 
            "state": [
                {
                    "comment": "新增dimensionId参数，默认为-1，传入非负值时不依赖playerId，可获取对应维度的常加载区块内红石信号强度", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "获取某个坐标的红石信号强度", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlockPoweredState", 
            "path": "server.component.redStoneCompServer.RedStoneComponentServer", 
            "desc": "获取某个坐标方块的充能状态", 
            "doc_class_path": [
                "方块/红石"
            ], 
            "param": [
                {
                    "param_comment": "方块坐标位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "目标维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "充能状态 0:未充能；1：弱充能；2：强充能"
            }, 
            "state": [
                {
                    "comment": "获取某个坐标方块的充能状态", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.audioCustomCompClient.AudioCustomComponentClient": [
        {
            "name": "DisableOriginMusic", 
            "path": "client.component.audioCustomCompClient.AudioCustomComponentClient", 
            "desc": "停止原生背景音乐", 
            "doc_class_path": [
                "音效"
            ], 
            "param": [
                {
                    "param_comment": "True表示停止，False表示恢复", 
                    "param_name": "disable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "PlayGlobalCustomMusic", 
            "path": "client.component.audioCustomCompClient.AudioCustomComponentClient", 
            "desc": "播放背景音乐", 
            "doc_class_path": [
                "音效"
            ], 
            "param": [
                {
                    "param_comment": "音乐名称", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "音量大小，范围0-1，与json中的volume乘算后为游戏中实际播放的音量大小", 
                    "param_name": "volume", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "是否循环播放", 
                    "param_name": "loop", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "播放是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "PlayCustomMusic", 
            "path": "client.component.audioCustomCompClient.AudioCustomComponentClient", 
            "desc": "播放场景音效，包括原版音效及自定义音效", 
            "doc_class_path": [
                "音效"
            ], 
            "param": [
                {
                    "param_comment": "音效名称", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "播放位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "音量倍率，范围0-1，与json中的volume乘算后为游戏中实际播放的音量大小", 
                    "param_name": "volume", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "播放速度，范围0-256，1表示原速，可以从json文件里进行修改", 
                    "param_name": "pitch", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "是否循环播放", 
                    "param_name": "loop", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "绑定的实体id，默认为None，若有绑定的实体，则pos参数为相对于实体的坐标", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "音乐播放id，可用于控制音乐的停止和循环"
            }, 
            "state": [
                {
                    "comment": "添加可以播放原版音效的描述。添加了与本地玩家距离大于16格则跳过播放的优化。", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "czh"
                }, 
                {
                    "comment": "添加使用stream的音频无法同时播放两个音效实例的描述", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "PlayCustomUIMusic", 
            "path": "client.component.audioCustomCompClient.AudioCustomComponentClient", 
            "desc": "播放UI音效，包括原版音效及自定义音效", 
            "doc_class_path": [
                "音效"
            ], 
            "param": [
                {
                    "param_comment": "音效名称", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "音量倍率，范围0-1，与json中的volume乘算后为游戏中实际播放的音量大小", 
                    "param_name": "volume", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "播放速度，范围0-256，1表示原速，可以从json文件里进行修改", 
                    "param_name": "pitch", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "是否循环播放", 
                    "param_name": "loop", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "音乐播放id，可用于控制音乐的停止和循环"
            }, 
            "state": [
                {
                    "comment": "播放UI音效，包括原版音效及自定义音效", 
                    "operation": "新增", 
                    "version": "3.0", 
                    "author": "qyk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "StopCustomMusic", 
            "path": "client.component.audioCustomCompClient.AudioCustomComponentClient", 
            "desc": "停止音效，包括场景音效与背景音乐，将依据fadeOutTime触发OnMusicStopClientEvent事件", 
            "doc_class_path": [
                "音效"
            ], 
            "param": [
                {
                    "param_comment": "音乐名称", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "停止的淡出时间，单位为秒，如果剩余时间小于淡出时间，将以剩余时间为准", 
                    "param_name": "fadeOutTime", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "停止是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "StopCustomMusicById", 
            "path": "client.component.audioCustomCompClient.AudioCustomComponentClient", 
            "desc": "停止场景音效", 
            "doc_class_path": [
                "音效"
            ], 
            "param": [
                {
                    "param_comment": "音乐id，播放指定音乐获取的音乐id", 
                    "param_name": "musicId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "停止的淡出时间，单位为秒", 
                    "param_name": "fadeOutTime", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "停止是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetCustomMusicLoop", 
            "path": "client.component.audioCustomCompClient.AudioCustomComponentClient", 
            "desc": "设定指定音乐是否循环播放，包括场景音效与背景音乐", 
            "doc_class_path": [
                "音效"
            ], 
            "param": [
                {
                    "param_comment": "音乐名称", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "True则循环播放，False则停止循环，停止会持续到播放到本次结束", 
                    "param_name": "loop", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "停止是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetCustomMusicLoopById", 
            "path": "client.component.audioCustomCompClient.AudioCustomComponentClient", 
            "desc": "设定指定音乐是否循环播放", 
            "doc_class_path": [
                "音效"
            ], 
            "param": [
                {
                    "param_comment": "音乐id，播放指定音乐获取的音乐id", 
                    "param_name": "musicId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "True则循环播放，False则停止循环，停止会持续到播放到本次结束", 
                    "param_name": "loop", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "停止是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }
    ], 
    "client.ui.screenNode.ScreenNode": [
        {
            "name": "SetBindWorldPosition", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "设置UI绑定的worldPosition", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "坐标", 
                    "param_name": "position", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置UI绑定的worldPosition", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Update", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "客户端每帧调用，1秒有30帧", 
            "doc_class_path": [
                "自定义UI/UI界面"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "补充文档", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Destroy", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "UI生命周期函数，当UI销毁时调用。", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI生命周期明确技术文档", 
                    "operation": "新增", 
                    "version": "1.25.0.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Create", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "UI生命周期函数，当UI创建成功时调用。", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI生命周期明确技术文档", 
                    "operation": "新增", 
                    "version": "1.25.0.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "OnDeactive", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "UI生命周期函数，当栈顶UI有其他UI入栈时调用。", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI生命周期明确技术文档", 
                    "operation": "新增", 
                    "version": "1.25.0.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "OnActive", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "UI生命周期函数，当UI重新回到栈顶时调用。", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI生命周期明确技术文档", 
                    "operation": "新增", 
                    "version": "1.25.0.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetScreenVisible", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "设置是否显示本界面", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "False为隐藏该界面，True为显示该界面", 
                    "param_name": "visible", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ChangeBindEntityId", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "修改绑定的实体id，**只对已绑定实体的UI界面生效，如何将UI与实体绑定详见[CreateUI](通用.md#CreateUI)接口**", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "绑定的实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否修改成功 True:成功 False:失败"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "BindVirtualWorldModel", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "绑定虚拟世界中的模型", 
            "doc_class_path": [
                "ScreenNode"
            ], 
            "param": [
                {
                    "param_comment": "绑定的模型对象的id", 
                    "param_name": "bindToObjId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "UI与绑定实体的偏移量", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否修改成功 True:成功 False:失败"
            }, 
            "state": [
                {
                    "comment": "绑定虚拟世界中的模型", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ChangeBindOffset", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "修改与绑定实体之间的偏移量，**只对已绑定实体的UI界面生效，如何将UI与实体绑定详见[CreateUI](通用.md#CreateUI)接口**", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "偏移量", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否修改成功 True:成功 False:失败"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ChangeBindAutoScale", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "设置已绑定实体的UI是否根据绑定实体与本地玩家间的距离动态缩放，**只对已绑定实体的UI界面生效，如何将UI与实体绑定详见[CreateUI](通用.md#CreateUI)接口**", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "1:动态缩放 0:不动态缩放", 
                    "param_name": "autoScale", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功 True:成功 False:失败"
            }, 
            "state": [
                {
                    "comment": "添加备注", 
                    "operation": "调整", 
                    "version": "2.0", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBindEntityId", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "获取该UI绑定的实体id，未绑定的UI将传回默认值None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "绑定的实体id"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetBindWorldPosition", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "获取该UI绑定的worldPosition，未绑定返回默认值None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "tuple(int,tuple(float,float,float))", 
                "return_comment": "(维度,(地点))，无设置则为None"
            }, 
            "state": [
                {
                    "comment": "取该UI绑定的worldPosition", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBindOffset", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "获取该UI绑定实体的偏移量，未绑定的UI将传回默认值(0, 0, 0)", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "偏移量"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetBindAutoScale", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "获取该绑定实体的UI是否动态缩放，未绑定的UI将传回默认值1", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "1:动态缩放 0:不动态缩放"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "Clone", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "克隆一个已有的控件，修改它的名称，并将它挂接到指定的父节点上，目前文本、图片、按钮控件的克隆控件表现正常，其他复杂控件的克隆控件可能存在运行问题，建议在json编写的过程中，手动复制一份对应控件使用。", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "为从main节点开始的控件路径", 
                    "param_name": "componentPath", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "为从main节点开始，父节点的控件路径", 
                    "param_name": "parentPath", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "为克隆成功后创建的新控件名称，新控件的路径为parentPath/newName", 
                    "param_name": "newName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否需要同步刷新，默认值为True。置True为游戏在同一帧计算该控件的Size等相关数据，置False则在下一帧进行计算。**如同一帧有大量clone操作建议置False，操作结束后调用一次UpdateScreen接口刷新界面及相关控件数据**", 
                    "param_name": "syncRefresh", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否需要强制刷新，默认值为True。置True则按照syncRefresh逻辑进行同一帧或者下一帧刷新，置False则当前帧和下一帧均不刷新，需要手动调用UpdateScreen进行刷新。如有大量Clone操作且非在同一帧执行，建议设置为False,需要更新时再调用UpdateScreen接口刷新界面及相关控件数据", 
                    "param_name": "forceUpdate", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否克隆成功"
            }, 
            "state": [
                {
                    "comment": "增加是否同步刷新参数", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetChildrenName", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "获取子节点的名称list", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "为从main节点开始，父节点的控件路径", 
                    "param_name": "parentPath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "返回父节点下的子节点的名称，不会递归返回所有子节点，若节点无子节点，返回空list"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetAllChildrenPath", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "获取所有子节点的路径list", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "为从main节点开始，父节点的控件路径", 
                    "param_name": "parentPath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "返回父节点下的子节点的路径，会递归返回所有子节点，若节点无子节点，返回空list"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveComponent", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "动态删除某一控件", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "为从main节点开始，被删除控件路径", 
                    "param_name": "componentPath", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "为从main节点开始，父节点的控件路径", 
                    "param_name": "parentPath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetRemove", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "删除本界面节点", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "CreateChildControl", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "在当前画布中创建子控件，如果该子控件已经存在则返回已存在的子控件", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [
                {
                    "param_comment": "UI控件路径，格式为\"namespace.controlName\"。namespace对应uiJson文件中\"namespace\"对应的值，UI编辑器生成的uiJson文件该值等于文件名。controlName对应想创建的控件的名称。", 
                    "param_name": "defName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "所创建的子控件的名称", 
                    "param_name": "childName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "指定所创建的子节点的父节点，默认值为None，表示直接创建在当前画布根节点下。", 
                    "param_name": "parentControl", 
                    "param_type": "BaseUIControl"
                }, 
                {
                    "param_comment": "是否需要强制刷新，默认值为True。置True则进行同一帧或者下一帧刷新，置False则当前帧和下一帧均不刷新，需要手动调用UpdateScreen进行刷新。如有大量CreateChildControl操作且在同一帧执行，建议设置为False,需要更新时再调用UpdateScreen接口刷新界面及相关控件数据", 
                    "param_name": "forceUpdate", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "BaseUIControl", 
                "return_comment": "创建的子控件节点"
            }, 
            "state": [
                {
                    "comment": "在当前界面创建子控件", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveChildControl", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "移除当前画布中的子控件", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [
                {
                    "param_comment": "所要移除的子控件", 
                    "param_name": "childControl", 
                    "param_type": "BaseUIControl"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True表示移除成功，False表示移除失败"
            }, 
            "state": [
                {
                    "comment": "移除当前画布中的子控件", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetUiModel", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "设置PaperDoll控件需要显示的模型,PaperDoll控件的配置方式详见<a href=\"../../../../mcguide/18-界面与交互/30-UI说明文档.html#paperdoll\">控件介绍PaperDoll</a>", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "为从main节点开始的控件路径", 
                    "param_name": "componentPath", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "骨骼模型的名称", 
                    "param_name": "modelName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画名称，默认为'idle'", 
                    "param_name": "animateName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否循环播放动画，默认为True", 
                    "param_name": "looped", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "新增默认动作名称以及是否循环播放参数", 
                    "operation": "调整", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetUiEntity", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "设置PaperDoll控件需要显示的生物模型,PaperDoll控件的配置方式详见<a href=\"../../../../mcguide/18-界面与交互/30-UI说明文档.html#paperdoll\">控件介绍PaperDoll</a>", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "为从main节点开始的控件路径", 
                    "param_name": "componentPath", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "生物定义中设定的identifier", 
                    "param_name": "entityIdentifier", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetUiModelScale", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "设置PaperDoll控件模型的缩放比例", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "为从main节点开始，PaperDoll控件路径", 
                    "param_name": "componentPath", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "PaperDoll的缩放比例，默认为1.0", 
                    "param_name": "scale", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "支持单独设置PaperDoll控件模型的缩放比例", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "guoxun"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "UpdateScreen", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "刷新界面，重新计算各个控件的相关数据", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "是否需要同步刷新，默认值为True。置True为游戏在同一帧计算各个控件的相关数据，置False则在下一帧进行计算。若置True不建议在同一帧调用多次", 
                    "param_name": "syncRefresh", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "刷新界面，重新计算各个控件的相关数据", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetStackGridCount", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "设置StackGrid控件的大小", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "为从main节点开始，Grid控件的路径", 
                    "param_name": "componentPath", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "设置StackGrid的内容数量", 
                    "param_name": "count", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetSelectControl", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "设置当前焦点所在的控件,当设置控件为文本输入框时会弹出系统小键盘", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "为从main节点开始，所要选中控件的路径", 
                    "param_name": "componentPath", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "True为选中componentPath所代表的控件，False为取消选中", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置当前焦点所在的控件", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetRichTextItem", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "返回一个富文本控件实例", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "为从main节点开始，继承自rich_text.RichTextPanel控件的路径", 
                    "param_name": "componentPath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "object", 
                "return_comment": "RichTextItem 返回一个富文本控件实例"
            }, 
            "state": [
                {
                    "comment": "返回一个富文本控件实例", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetIsHud", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "设置本界面的输入模式", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "设置1表示该界面不屏蔽游戏操作，设置0则屏蔽。", 
                    "param_name": "isHud", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetIsHud", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "获得本界面的输入模式", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "返回1表示该界面不屏蔽游戏操作，返回0则屏蔽。"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetScreenName", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "获得本界面的名称", 
            "doc_class_path": [
                "自定义UI/UI界面"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "返回本界面的名称。仅当该界面是调用PushScreen方法生成的时候才有返回值，返回值为注册UI时（调用RegisterUI）所使用的参数 uiScreenDef ，否则为 None"
            }, 
            "state": [
                {
                    "comment": "获得本界面的名称", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetSelf", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "获取零件界面自身", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "ScreenNode", 
                "return_comment": "零件界面自身"
            }, 
            "state": [
                {
                    "comment": "获取零件界面自身", 
                    "operation": "新增", 
                    "version": "1.24.0", 
                    "author": "czk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBaseUIControl", 
            "path": "client.ui.screenNode.ScreenNode", 
            "desc": "根据路径获取BaseUIControl实例", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "当前控件的路径", 
                    "param_name": "path", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "BaseUIControl", 
                "return_comment": "路径对应控件的BaseUIControl实例"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.textBoardCompClient.TextBoardComponentClient": [
        {
            "name": "SetText", 
            "path": "client.component.textBoardCompClient.TextBoardComponentClient", 
            "desc": "修改文字面板内容", 
            "doc_class_path": [
                "特效/文字面板"
            ], 
            "param": [
                {
                    "param_comment": "文字面板id", 
                    "param_name": "boardId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "文字内容", 
                    "param_name": "text", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否修改成功"
            }, 
            "state": [
                {
                    "comment": "修改文字面板的内容", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBoardDepthTest", 
            "path": "client.component.textBoardCompClient.TextBoardComponentClient", 
            "desc": "设置是否开启深度测试, 默认状态下是开启", 
            "doc_class_path": [
                "特效/文字面板"
            ], 
            "param": [
                {
                    "param_comment": "文字面板的id", 
                    "param_name": "boardId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "True为开启深度测试,False为不开启", 
                    "param_name": "depthTest", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置文字面板是否开启深度测试", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBoardScale", 
            "path": "client.component.textBoardCompClient.TextBoardComponentClient", 
            "desc": "内容整体缩放", 
            "doc_class_path": [
                "特效/文字面板"
            ], 
            "param": [
                {
                    "param_comment": "文字面板的id", 
                    "param_name": "boardId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "x,y方向上的缩放值,要求值大于0,正常状态下是(1.0,1.0)", 
                    "param_name": "scale", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回是否设置成功"
            }, 
            "state": [
                {
                    "comment": "缩放文字面板的大小", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBoardBackgroundColor", 
            "path": "client.component.textBoardCompClient.TextBoardComponentClient", 
            "desc": "修改背景颜色", 
            "doc_class_path": [
                "特效/文字面板"
            ], 
            "param": [
                {
                    "param_comment": "文字面板的id", 
                    "param_name": "boardId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "颜色的RGBA值，范围0-1", 
                    "param_name": "backgroundColor", 
                    "param_type": "tuple(float,float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回是否设置成功"
            }, 
            "state": [
                {
                    "comment": "修改文字面板的背景颜色", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBoardPos", 
            "path": "client.component.textBoardCompClient.TextBoardComponentClient", 
            "desc": "修改位置", 
            "doc_class_path": [
                "特效/文字面板"
            ], 
            "param": [
                {
                    "param_comment": "文字面板的id", 
                    "param_name": "boardId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回是否设置成功"
            }, 
            "state": [
                {
                    "comment": "修改文字面板的位置", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBoardRot", 
            "path": "client.component.textBoardCompClient.TextBoardComponentClient", 
            "desc": "修改旋转角度, 若设置了文本朝向相机，则旋转角度的修改不会生效", 
            "doc_class_path": [
                "特效/文字面板"
            ], 
            "param": [
                {
                    "param_comment": "文字面板的id", 
                    "param_name": "boardId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "角度(不是弧度)", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回是否设置成功"
            }, 
            "state": [
                {
                    "comment": "修改文字面板的位置", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBoardTextColor", 
            "path": "client.component.textBoardCompClient.TextBoardComponentClient", 
            "desc": "修改字体颜色", 
            "doc_class_path": [
                "特效/文字面板"
            ], 
            "param": [
                {
                    "param_comment": "文字面板的id", 
                    "param_name": "boardId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "颜色的RGBA值，范围0-1", 
                    "param_name": "textColor", 
                    "param_type": "tuple(float,float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回是否设置成功"
            }, 
            "state": [
                {
                    "comment": "修改文字面板的字体颜色", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBoardBindEntity", 
            "path": "client.component.textBoardCompClient.TextBoardComponentClient", 
            "desc": "文字面板绑定实体对象", 
            "doc_class_path": [
                "特效/文字面板"
            ], 
            "param": [
                {
                    "param_comment": "文字面板的id", 
                    "param_name": "boardId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "绑定entity的Id; 如果为None，则为取消实体绑定, 此时下面参数为世界坐标和旋转", 
                    "param_name": "bindEntityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "相对于实体的偏移量", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "相对于实体的偏移角度", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置文字面板绑定的实体对象", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetBoardFaceCamera", 
            "path": "client.component.textBoardCompClient.TextBoardComponentClient", 
            "desc": "设置文字面板的朝向", 
            "doc_class_path": [
                "特效/文字面板"
            ], 
            "param": [
                {
                    "param_comment": "文字面板的id", 
                    "param_name": "boardId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否始终朝向相机, 默认为True", 
                    "param_name": "faceCamera", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置文字面板的朝向", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CreateTextBoardInWorld", 
            "path": "client.component.textBoardCompClient.TextBoardComponentClient", 
            "desc": "创建文字面板", 
            "doc_class_path": [
                "特效/文字面板"
            ], 
            "param": [
                {
                    "param_comment": "文字显示内容", 
                    "param_name": "text", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "文字颜色的RGBA值，范围0-1", 
                    "param_name": "textColor", 
                    "param_type": "tuple(float,float,float,float)"
                }, 
                {
                    "param_comment": "可选参数，默认None，设置为黑色，面板颜色的RGBA值，范围0-1", 
                    "param_name": "boardColor", 
                    "param_type": "tuple(float,float,float,float)"
                }, 
                {
                    "param_comment": "是否始终朝向相机, 默认为True", 
                    "param_name": "faceCamera", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "返回生成的id，如果生成失败，返回None"
            }, 
            "state": [
                {
                    "comment": "创建文字面板, 不绑定实体的话使用世界坐标，绑定对象的话会跟随实体", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveTextBoard", 
            "path": "client.component.textBoardCompClient.TextBoardComponentClient", 
            "desc": "删除文字面板", 
            "doc_class_path": [
                "特效/文字面板"
            ], 
            "param": [
                {
                    "param_comment": "创建的时候返回的id", 
                    "param_name": "boardId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "删除文字面板", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.petCompServer.PetComponentServer": [
        {
            "name": "Disable", 
            "path": "server.component.petCompServer.PetComponentServer", 
            "desc": "关闭官方伙伴功能，单人游戏以及本地联机不支持该接口", 
            "doc_class_path": [
                "实体/官方伙伴"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "关闭结果"
            }, 
            "state": [
                {
                    "comment": "禁用官方伙伴功能", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "Enable", 
            "path": "server.component.petCompServer.PetComponentServer", 
            "desc": "启用官方伙伴功能，单人游戏以及本地联机不支持该接口", 
            "doc_class_path": [
                "实体/官方伙伴"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "启用结果"
            }, 
            "state": [
                {
                    "comment": "开启官方伙伴功能", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.gameCompServer.GameComponentServer": [
        {
            "name": "GetGameType", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取默认游戏模式", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "GetMinecraftEnum().GameType.*:Survival，Creative，Adventure分别为0~2"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetGameDiffculty", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取游戏难度", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "GetMinecraftEnum().GameDiffculty.*:Peaceful，Easy，Normal，Hard分别为0~3"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetHurtCD", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "设置全局受击间隔CD", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "单位帧数", 
                    "param_name": "cdTime", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetNotifyMsg", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "设置消息通知", 
            "doc_class_path": [
                "世界/消息"
            ], 
            "param": [
                {
                    "param_comment": "消息内容", 
                    "param_name": "msg", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "使用GenerateColor接口获取的颜色，默认为白色", 
                    "param_name": "color", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetPopupNotice", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "在所有玩家物品栏上方弹出popup类型通知，位置位于tip类型消息下方", 
            "doc_class_path": [
                "世界/消息"
            ], 
            "param": [
                {
                    "param_comment": "消息内容,可以在消息前增加extraServerApi.GenerateColor(\"RED\")字符来设置颜色，具体参考样例", 
                    "param_name": "message", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "消息子标题内容,效果同message，也可设置颜色，位置位于message上方", 
                    "param_name": "subtitle", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetTipMessage", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "在所有玩家物品栏上方弹出tip类型通知，位置位于popup类型通知上方", 
            "doc_class_path": [
                "世界/消息"
            ], 
            "param": [
                {
                    "param_comment": "消息内容,可以在消息前增加extraServerApi.GenerateColor(\"RED\")字符来设置颜色，具体参考样例", 
                    "param_name": "message", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetOnePopupNotice", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "在具体某个玩家的物品栏上方弹出popup类型通知，位置位于tip类型消息下方，此功能更建议客户端使用game组件的对应接口SetPopupNotice", 
            "doc_class_path": [
                "世界/消息"
            ], 
            "param": [
                {
                    "param_comment": "具体玩家Id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "消息内容,可以在消息前增加extraServerApi.GenerateColor(\"RED\")字符来设置颜色，具体参考样例", 
                    "param_name": "message", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "消息子标题内容,效果同message，也可设置颜色，位置位于message上方", 
                    "param_name": "subtitle", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetOneTipMessage", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "在具体某个玩家的物品栏上方弹出tip类型通知，位置位于popup类型通知上方，此功能更建议在客户端使用game组件的对应接口SetTipMessage", 
            "doc_class_path": [
                "世界/消息"
            ], 
            "param": [
                {
                    "param_comment": "具体玩家Id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "消息内容,可以在消息前增加extraServerApi.GenerateColor(\"RED\")字符来设置颜色，具体参考样例", 
                    "param_name": "message", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntitiesInSquareArea", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取区域内的entity列表", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "该参数已废弃", 
                    "param_name": "entityId", 
                    "param_type": "None"
                }, 
                {
                    "param_comment": "初始位置", 
                    "param_name": "startPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "结束位置，结束位置应大于初始位置，否则会返回空列表", 
                    "param_name": "endPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "区域所在维度，可获取对应维度的常加载区块内的实体列表", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "返回entityId的list"
            }, 
            "state": [
                {
                    "comment": "新增dimensionId参数，默认为-1，传入非负值时不依赖entityId，可获取对应维度的常加载区块内的实体列表", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntitiesAround", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取区域内的entity列表", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "某个entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "正方体区域半径", 
                    "param_name": "radius", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "过滤设置字典", 
                    "param_name": "filters", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "返回entityId的list"
            }, 
            "state": [
                {
                    "comment": "增加过滤器中subject的说明", 
                    "operation": "调整", 
                    "version": "2.1", 
                    "author": "jishaobin"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetDisableHunger", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "设置是否屏蔽饥饿度", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "是否屏蔽饥饿度", 
                    "param_name": "isDisable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetDisableContainers", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "禁止所有容器界面的打开，包括玩家背包，各种包含背包界面的容器方块如工作台与箱子，以及包含背包界面的实体交互如马背包与村民交易", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "是否禁止容器界面", 
                    "param_name": "isDisable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetDisableDropItem", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "设置禁止丢弃物品", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "是否禁止丢弃物品", 
                    "param_name": "isDisable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "修复了禁止丢弃物品后仍可在容器内（如背包、箱子）丢弃物品的问题。", 
                    "operation": "修复", 
                    "version": "1.22", 
                    "author": "likaiyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetDisableCommandMinecart", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "设置停止/开启运行命令方块矿车内置逻辑指令，当前仅Apollo网络服可用", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "True：停止运行命令方块矿车内置逻辑指令；False：开启运行命令方块矿车内置逻辑指令", 
                    "param_name": "isDisable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置停止/开启运行命令方块矿车内置逻辑指令，当前仅Apollo网络服可用", 
                    "operation": "新增", 
                    "version": "1.22.0.release20210610", 
                    "author": "xlang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsDisableCommandMinecart", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取当前是否允许运行命令方块矿车内置逻辑指令，当前仅Apollo网络服可用", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True：当前禁止运行命令方块矿车内置逻辑指令；False：当前允许运行命令方块矿车内置逻辑指令"
            }, 
            "state": [
                {
                    "comment": "获取当前是否允许运行命令方块矿车内置逻辑指令，当前仅Apollo网络服可用", 
                    "operation": "新增", 
                    "version": "1.22.0.release20210610", 
                    "author": "xlang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetLevelGravity", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "设置重力因子", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "重力因子", 
                    "param_name": "data", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetLevelGravity", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取重力因子", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "重力因子"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "CanSee", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "判断起始对象是否可看见目标对象,基于对象的Head位置判断", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "起始对象ID", 
                    "param_name": "fromId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "目标对象ID", 
                    "param_name": "targetId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "视野距离,默认值8.0", 
                    "param_name": "viewRange", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "只判断固体方块遮挡,默认True; False则液体方块也会遮挡", 
                    "param_name": "onlySolid", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "视野X轴角度,默认值180.0度", 
                    "param_name": "angleX", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "视野Y轴角度,默认值180.0度", 
                    "param_name": "angleY", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否可见"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "DisableVineBlockSpread", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "设置是否禁用藤曼蔓延生长", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "True:禁用 False:非禁用", 
                    "param_name": "disable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerGameType", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取指定玩家的游戏模式", 
            "doc_class_path": [
                "玩家/游戏模式"
            ], 
            "param": [
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "[GameType枚举](../../枚举值/GameType.md)"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "LockDifficulty", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "锁定当前世界游戏难度（仅本次游戏有效），锁定后任何玩家在游戏内都无法通过指令或暂停菜单修改游戏难度", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "True:锁定 False:解锁", 
                    "param_name": "lock", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "result是否操作成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "IsLockDifficulty", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取当前世界的游戏难度是否被锁定", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "isLock True为已锁定，False为未锁定"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetGameDifficulty", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "设置游戏难度", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "GetMinecraftEnum().GameDiffculty.*:Peaceful，Easy，Normal，Hard分别为0~3", 
                    "param_name": "difficulty", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功，True为成功，False为失败"
            }, 
            "state": [
                {
                    "comment": "设置游戏难度", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntitiesAroundByType", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取区域内的某类型的entity列表", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "区域中心的entityId,如某个玩家的entityid", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "区域半径", 
                    "param_name": "radius", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "[EntityType枚举](../../枚举值/EntityType.md)", 
                    "param_name": "entityType", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "返回entityId的list"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "PickUpItemEntity", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "某个Player拾取物品ItemEntity", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "拾取者的playerEntityId", 
                    "param_name": "playerEntityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": " 要拾取的物品itemEntityId", 
                    "param_name": "itemEntityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否拾取成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "KillEntity", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "杀死某个Entity", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "要杀死的目标的entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否杀死成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetDefaultGameType", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "设置默认游戏模式", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "GetMinecraftEnum().GameType.*:Survival，Creative，Adventure分别为0~2", 
                    "param_name": "gameType", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "修复了联机时可能不生效的问题", 
                    "operation": "修复", 
                    "version": "1.22", 
                    "author": "likaiyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "LockGameType", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "锁定当前世界游戏类型（仅本次游戏有效），玩家无法通过指令、游戏菜单或相关api如[SetPlayerGameType](../玩家/游戏模式.md#setplayergametype)和[SetDefaultGameType](#setdefaultgametype)修改游戏类型，包括默认游戏类型和个人游戏类型", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "True:锁定 False:解锁", 
                    "param_name": "lock", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "result是否操作成功"
            }, 
            "state": [
                {
                    "comment": "锁定当前世界游戏类型接口", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "lzy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsLockGameType", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取当前世界的游戏类型是否被锁定，包括默认游戏类型和个人游戏类型", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "isLock True为已锁定，False为未锁定"
            }, 
            "state": [
                {
                    "comment": "获取当前世界的游戏类型是否锁定接口", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "lzy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetDisableGravityInLiquid", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "是否屏蔽所有实体在液体（水、岩浆）中的重力", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "True:屏蔽 False:取消屏蔽", 
                    "param_name": "isDisable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetGameRulesInfoServer", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "设置游戏规则。所有参数均可选。", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "游戏规则字典", 
                    "param_name": "gameRuleDict", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "修复了设置cheat_info但是没填enable参数导致“激活作弊”选项无法开启的问题", 
                    "operation": "修复", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "增加返回值", 
                    "operation": "调整", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "增加了“重生方块爆炸”、“重生半径”的字段", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetGameRulesInfoServer", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取游戏规则", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "游戏规则字典"
            }, 
            "state": [
                {
                    "comment": "修复了always_day可能为错误值的问题", 
                    "operation": "修复", 
                    "version": "1.22", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "增加了“重生方块爆炸”、“重生半径”的字段", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "LockGameRulesInfo", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "锁定当前世界游戏规则（仅本次游戏有效），玩家无法通过指令、游戏菜单或api修改游戏规则（包括[SetGameRulesInfoServer](#setgamerulesinfoserver)示例中列举的规则）", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "True:锁定 False:解锁", 
                    "param_name": "lock", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "result是否操作成功"
            }, 
            "state": [
                {
                    "comment": "锁定当前世界游戏规则接口", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "lzy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsLockGameRulesInfo", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取当前世界的游戏规则是否被锁定", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "isLock True为已锁定，False为未锁定"
            }, 
            "state": [
                {
                    "comment": "获取当前世界的游戏规则是否锁定接口", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "lzy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetSeed", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取存档种子", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "存档种子"
            }, 
            "state": [
                {
                    "comment": "增加获取种子的接口", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "CheckWordsValid", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "检查语句是否合法，即不包含敏感词", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "语句", 
                    "param_name": "words", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True:语句合法<br>False:语句非法"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "CheckNameValid", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "检查昵称是否合法，即不包含敏感词", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "昵称", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True:昵称合法 False:昵称非法"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "AddTimer", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "添加服务端触发的定时器，非重复", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "延迟时间，单位秒", 
                    "param_name": "delay", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "定时器触发函数", 
                    "param_name": "func", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "变长参数，可以不设置", 
                    "param_name": "*args", 
                    "param_type": "any"
                }, 
                {
                    "param_comment": "字典变长参数，可以不设置", 
                    "param_name": "**kwargs", 
                    "param_type": "any"
                }
            ], 
            "return": {
                "return_type": "CallLater", 
                "return_comment": "返回单次触发的定时器实例，传入func不是函数类型时返回None"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "AddRepeatedTimer", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "添加服务端触发的定时器，重复执行", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "延迟时间，单位秒", 
                    "param_name": "delay", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "定时器触发函数", 
                    "param_name": "func", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "变长参数，可以不设置", 
                    "param_name": "*args", 
                    "param_type": "any"
                }, 
                {
                    "param_comment": "字典变长参数，可以不设置", 
                    "param_name": "**kwargs", 
                    "param_type": "any"
                }
            ], 
            "return": {
                "return_type": "CallLater", 
                "return_comment": "返回触发的定时器实例，传入func不是函数类型时返回None"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "CancelTimer", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "取消定时器", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "AddTimer和AddRepeatedTimer时返回的定时器实例", 
                    "param_name": "timer", 
                    "param_type": "CallLater"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "PlaceStructure", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "放置结构", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "该参数已废弃", 
                    "param_name": "playerId", 
                    "param_type": "None"
                }, 
                {
                    "param_comment": "放置结构的位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "结构名称", 
                    "param_name": "structureName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "希望放置结构的维度，可在对应维度的常加载区块放置结构，默认为-1", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "放置结构的旋转角度，默认为0(只可旋转90，180，270度)", 
                    "param_name": "rotation", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "动画模式，详见[AnimationModeType](../../枚举值/AnimationModeType.md)，默认值为0，即不使用动画", 
                    "param_name": "animationMode", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "动画时间，默认为0", 
                    "param_name": "animationTime", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "是否包含实体，默认为True", 
                    "param_name": "inculdeEntity", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否移除方块，默认为False", 
                    "param_name": "removeBlock", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "镜像模式，详见[MirrorModeType](../../枚举值/MirrorModeType.md)，默认值为0，即不使用镜像放置", 
                    "param_name": "mirrorMode", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "完整性，默认为100", 
                    "param_name": "integrity", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "随机种子，默认为-1", 
                    "param_name": "seed", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否放置成功，True为放置成功，False为放置失败"
            }, 
            "state": [
                {
                    "comment": "增加参数dimensionId，默认为-1，传入非负值时不依赖playerId，可在对应维度的常加载区块放置结构", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "添加默认参数rotation，默认为0，可将放置的结构体沿y轴进行旋转", 
                    "operation": "调整", 
                    "version": "1.25", 
                    "author": "hdy"
                }, 
                {
                    "comment": "新增动画模式、动画时间、是否包含实体、是否移除方块、镜像模式、完整性、种子", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetStructureSize", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取结构体的长宽高", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "结构名称", 
                    "param_name": "structureName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "tuple(int,int,int)", 
                "return_comment": "结构体的长宽高，获取失败返回None"
            }, 
            "state": [
                {
                    "comment": "获取结构体的长宽高", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "PlaceFeature", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "放置特征，与[/placefeature指令](https://zh.minecraft.wiki/w/%E5%91%BD%E4%BB%A4/placefeature)相似", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "特征名称，形式为namespace:featureName，如test:pumpkins", 
                    "param_name": "featureName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "特征放置维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "放置位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否放置成功"
            }, 
            "state": [
                {
                    "comment": "放置特征", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "hxj"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "PlaceNeteaseLargeFeature", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "放置<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/4-自定义维度/6-自定义大型特征.html#自定义大型特征\">网易版大型结构特征</a>", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "中心池identifier，请参考大型特征结构池注册规则", 
                    "param_name": "poolName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "大型结构放置维度(仅支持主世界类型维度)", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "放置位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "中心结构旋转角度(0:顺时针旋转0°；90:顺时针旋转90°;180:顺时针旋转180°；270:顺时针旋转270°)", 
                    "param_name": "rotation", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "大型结构递归最大深度", 
                    "param_name": "maxDepth", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否放置成功(由于区块未加载导致放置不全也算放置成功)"
            }, 
            "state": [
                {
                    "comment": "放置网易版大型结构特征", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "OpenCityProtect", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "开启城市保护，包括禁止破坏方块，禁止对方块使用物品，禁止怪物攻击玩家，禁止玩家之间互相攻击，禁止日夜切换，禁止天气变化，禁止怪物群落刷新", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "success True为设置成功，False为设置失败"
            }, 
            "state": [
                {
                    "comment": "开启城市保护，包括禁止破坏方块，禁止对方块使用物品，禁止怪物攻击玩家，禁止玩家之间互相攻击，禁止日夜切换，禁止天气变化，禁止怪物群落刷新", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "ForbidLiquidFlow", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "禁止/允许地图中的流体流动", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "True为禁止流体流动 False为允许流体流动", 
                    "param_name": "forbid", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "success True为设置成功，False为设置失败"
            }, 
            "state": [
                {
                    "comment": "禁止/允许地图中的流体流动", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "xltang"
                }, 
                {
                    "comment": "支持在单机环境使用", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddBlockProtectField", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "设置一个方块无法被玩家/实体破坏的区域", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "不可破坏区域所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "初始位置，不可破坏区域AABB包围盒的最小点", 
                    "param_name": "startPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "结束位置，不可破坏区域AABB包围盒的最大点", 
                    "param_name": "endPos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "成功时返回区域的唯一ID，可用于取消不可破坏区域，失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "设置一个方块无法被玩家/实体破坏的区域", 
                    "operation": "新增", 
                    "version": "1.23.0.release20210805", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RemoveBlockProtectField", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "取消一个方块无法被玩家/实体破坏的区域", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "不可破坏区域的唯一ID，AddBlockProtectField的返回值", 
                    "param_name": "field", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "success True为取消成功，False为取消失败"
            }, 
            "state": [
                {
                    "comment": "取消一个方块无法被玩家/实体破坏的区域", 
                    "operation": "新增", 
                    "version": "1.23.0.release20210805", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "CleanBlockProtectField", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "取消全部已设置的方块无法被玩家/实体破坏的区域", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "success True为取消成功，False为取消失败"
            }, 
            "state": [
                {
                    "comment": "取消全部已设置的方块无法被玩家/实体破坏的区域", 
                    "operation": "新增", 
                    "version": "1.23.0.release20210805", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "UpgradeMapDimensionVersion", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "提升指定地图维度的版本号，版本号不符的维度，地图存档信息将被废弃。使用后存档的地图版本均会同步提升至最新版本，假如希望使用此接口清理指定维度的地图存档，需要在保证该维度区块都没有被加载时调用。", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "维度的数字ID，0代表主世界", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "维度地图的版本号，取值范围为1-999", 
                    "param_name": "version", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "success True为设置成功，False为设置失败"
            }, 
            "state": [
                {
                    "comment": "提升指定地图维度的版本号，版本号不符的维度，地图存档信息将被废弃", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }, 
                {
                    "comment": "增加使用时机限制的说明：建议仅在游戏启动初始化的时期调用", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "xltang"
                }, 
                {
                    "comment": "调整使用时机的说明与建议", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetCanBlockSetOnFireByLightning", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "禁止/允许闪电点燃方块", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "True为允许闪电点燃方块 False为禁止闪电点燃方块", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "success True为设置成功，False为设置失败"
            }, 
            "state": [
                {
                    "comment": "禁止/允许闪电点燃方块", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }, 
                {
                    "comment": "外放这个接口", 
                    "operation": "调整", 
                    "version": "2.0", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetCanActorSetOnFireByLightning", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "禁止/允许闪电点燃实体", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "True为允许闪电点燃实体 False为禁止闪电点燃实体", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "success True为设置成功，False为设置失败"
            }, 
            "state": [
                {
                    "comment": "禁止/允许闪电点燃实体", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }, 
                {
                    "comment": "外放这个接口", 
                    "operation": "调整", 
                    "version": "2.0", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "LookupItemByName", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "判定指定identifier的物品是否存在", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "物品的identifier。类似\"minecraft:bed\"，支持自定义物品", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True为对应的物品存在，False为对应物品不存在"
            }, 
            "state": [
                {
                    "comment": "判定指定identifier的物品是否存在", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetSpawnPosition", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取世界出生点坐标", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(int,int,int)", 
                "return_comment": "出生点坐标"
            }, 
            "state": [
                {
                    "comment": "获取世界出生点坐标", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetSpawnDimension", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取世界出生维度", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "维度id"
            }, 
            "state": [
                {
                    "comment": "获取世界出生维度", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetSpawnDimensionAndPosition", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "设置世界出生点维度与坐标", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimensionId", 
                    "param_type": "int或None"
                }, 
                {
                    "param_comment": "出生点坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)或None"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "设置世界出生点维度与坐标", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsEntityAlive", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "判断生物实体是否存活或非生物实体是否存在", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "false表示生物实体已死亡或非生物实体已销毁，true表示生物实体存活或非生物实体存在"
            }, 
            "state": [
                {
                    "comment": "服务端接口，判断生物实体是否存活或非生物实体是否存在", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetMergeSpawnItemRadius", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "设置新生成的物品是否合堆", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "合堆检测半径，范围可设置为0到5，初始为0。若为0代表不合堆，若大于0，则地图中生成一个物品时，会检测这个半径内是否有相同物品，若有且未达到堆叠上限，则不生成新物品，而是使地图上该物品的数量增加。", 
                    "param_name": "radius", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "success True为设置成功，False为设置失败"
            }, 
            "state": [
                {
                    "comment": "设置新生成的物品是否合堆", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "sutao"
                }, 
                {
                    "comment": "支持浮点数", 
                    "operation": "调整", 
                    "version": "2.5", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetChinese", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取langStr对应的中文，可参考PC开发包中\\handheld\\localization\\handheld\\data\\resource_packs\\vanilla\\texts\\zh_CN.lang", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "传入的langStr", 
                    "param_name": "langStr", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "langStr对应的中文，若找不到对应的中文，则会返回langStr本身,字符编码为Unicode"
            }, 
            "state": [
                {
                    "comment": "返回值添加字符编码描述", 
                    "operation": "修复", 
                    "version": "2.12", 
                    "author": "qiuyukun"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "OpenMobHitBlockDetection", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "开启碰撞方块的检测，开启后，生物（不包括玩家）碰撞到方块时会触发OnMobHitBlockServerEvent事件", 
            "doc_class_path": [
                "event.OnMobHitBlockServerEvent"
            ], 
            "param": [
                {
                    "param_comment": "生物的实体Id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "碰撞检测精度，参数需要在区间[0, 1)，值越小，表示碰撞检测精度越高（可以理解为轻轻碰一下就能触发）", 
                    "param_name": "precision", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "开启碰撞方块的检测接口", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "gmy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "CloseMobHitBlockDetection", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "关闭碰撞方块的检测，关闭后，生物（不包括玩家）碰撞到方块时将不会触发OnMobHitBlockServerEvent事件", 
            "doc_class_path": [
                "event.OnMobHitBlockServerEvent"
            ], 
            "param": [
                {
                    "param_comment": "生物的实体Id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "关闭碰撞方块的检测接口", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "gmy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetLoadActors", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取已加载的实体id", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "实体id列表"
            }, 
            "state": [
                {
                    "comment": "获取已加载的实体id", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetAllScoreboardObjects", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取所有记分板项", 
            "doc_class_path": [
                "世界/记分板"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#记分板记分准则信息字典#记分板记分准则信息字典\">记分准则信息字典</a>列表"
            }, 
            "state": [
                {
                    "comment": "获取所有记分板项", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetAllPlayerScoreboardObjects", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取玩家记分项", 
            "doc_class_path": [
                "世界/记分板"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#玩家记分项信息字典列表#玩家记分项信息字典列表\">玩家记分项信息字典</a>列表"
            }, 
            "state": [
                {
                    "comment": "获取玩家记分项", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntityDamage", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取生物(包括玩家)的攻击力", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "生物的实体Id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "可选参数，攻击目标的实体Id（部分附魔的武器，会针对不同的生物产生伤害的加成，例如“节肢克星”附魔，对节肢生物有伤害加成）", 
                    "param_name": "targetEntityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "返回生物(包括玩家)攻击力"
            }, 
            "state": [
                {
                    "comment": "获取生物(包括玩家)的攻击力", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "wkm"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPistonMaxInteractionCount", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "设置活塞/粘性活塞最多推动的方块数量，默认为12个方块。该设置不存档。", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "最大推动的方块数量，取值范围为1至1024", 
                    "param_name": "value", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置活塞/粘性活塞最多推动的方块数量", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "gx"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPistonMaxInteractionCount", 
            "path": "server.component.gameCompServer.GameComponentServer", 
            "desc": "获取活塞/粘性活塞最多推动的方块数量，默认为12个方块，可能被其他开发者修改。", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "最大推动的方块数量"
            }, 
            "state": [
                {
                    "comment": "获取活塞/粘性活塞最多推动的方块数量", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "gx"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.ui.controls.scrollViewUIControl.ScrollViewUIControl": [
        {
            "name": "SetScrollViewPos", 
            "path": "client.ui.controls.scrollViewUIControl.ScrollViewUIControl", 
            "desc": "设置当前scroll_view内容的位置", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "需要跳转到的位置，一般设置的位置会出现在scroll_view的最上方。", 
                    "param_name": "pos", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "支持设置当前scroll_view内容的位置", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "panlei"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetScrollViewPos", 
            "path": "client.ui.controls.scrollViewUIControl.ScrollViewUIControl", 
            "desc": "获得当前scroll_view最上方内容的位置", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "当前scroll_view最上方内容的位置"
            }, 
            "state": [
                {
                    "comment": "支持获得当前scroll_view最上方内容的位置", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "panlei"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetScrollViewPercentValue", 
            "path": "client.ui.controls.scrollViewUIControl.ScrollViewUIControl", 
            "desc": "设置当前scroll_view内容的百分比位置", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "需要跳转到的百分比位置，一般设置的位置会出现在scroll_view的最上方。该值取值范围0-100", 
                    "param_name": "percent_value", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "支持设置当前scroll_view内容的百分比位置", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "panlei"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetScrollViewPercentValue", 
            "path": "client.ui.controls.scrollViewUIControl.ScrollViewUIControl", 
            "desc": "获取当前scroll_view内容的百分比位置", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "当前scroll_view内容的百分比位置"
            }, 
            "state": [
                {
                    "comment": "支持获取当前scroll_view内容的百分比位置", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "mayexing"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "2.6.nodoc", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetScrollViewContentPath", 
            "path": "client.ui.controls.scrollViewUIControl.ScrollViewUIControl", 
            "desc": "返回该scroll_view内容的路径", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "该scroll_view内容的路径"
            }, 
            "state": [
                {
                    "comment": "支持获得当前scroll_view最上方内容的位置", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "panlei"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetScrollViewContentControl", 
            "path": "client.ui.controls.scrollViewUIControl.ScrollViewUIControl", 
            "desc": "返回该scroll_view内容的BaseUIControl实例", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "BaseUIControl", 
                "return_comment": "该scroll_view内容的BaseUIControl实例"
            }, 
            "state": [
                {
                    "comment": "支持获得当前scroll_view最上方内容的位置", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "panlei"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.blockInfoCompServer.BlockInfoComponentServer": [
        {
            "name": "GetBlockLightLevel", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "获取方块位置的光照等级", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "光照等级"
            }, 
            "state": [
                {
                    "comment": "新增dimensionId参数，默认为-1，传入非负值时不依赖playerId，可获取对应维度的常加载区块内光照等级", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetBlockNew", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "设置某一位置的方块", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#方块信息字典\">方块信息字典</a>", 
                    "param_name": "blockDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "0：替换，1：销毁，2：保留，默认为0", 
                    "param_name": "oldBlockHandling", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "方块所在维度，必需参数", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否设置为传统的aux，建议设置为True，即aux对应的state不随着版本迭代而变化。默认为False", 
                    "param_name": "isLegacy", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否给相邻的方块触发[方块更新](https://zh.minecraft.wiki/w/%E6%96%B9%E5%9D%97%E6%9B%B4%E6%96%B0)以及BlockNeighborChangedServerEvent事件。默认为True触发。若选择不触发可节省约30%的性能消耗。", 
                    "param_name": "updateNeighbors", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "方块是否发生了改变，是则返回True，否则返回False"
            }, 
            "state": [
                {
                    "comment": "增加参数oldBlockHandling，默认为替换replace", 
                    "operation": "调整", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "增加参数dimensionId，默认为-1，传入非负值时不依赖playerId，可在对应维度的常加载区块设置方块", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "增加接口使用说明", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "增加参数isLegacy，默认为False即使用最新版本的aux对应的state", 
                    "operation": "调整", 
                    "version": "2.3", 
                    "author": "wdd"
                }, 
                {
                    "comment": "增加updateNeighbors参数设置是否触发相邻方块的更新", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetJigsawBlock", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "在某一位置放置拼图方块", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "拼图方块的方块信息字典", 
                    "param_name": "blockDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "方块所在维度，必需参数", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "在某一位置放置拼图方块", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "handaoying"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetLiquidBlock", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "设置某一位置的方块的extraBlock，可在此设置方块含水等", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "流体方块的<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#方块信息字典\">方块信息字典</a>", 
                    "param_name": "blockDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "方块所在维度，必需参数", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "设置某一位置的方块的extraBlock接口", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetSnowBlock", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "设置某一位置的方块含雪", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度，必需参数", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "雪块的高度，默认是1", 
                    "param_name": "height", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "设置某一位置的方块含雪", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "PlayerDestoryBlock", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "使用手上工具破坏方块", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "是否开启破坏粒子效果，默认为开", 
                    "param_name": "particle", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否同步服务端背包信息，默认为不同步。因为破坏方块可能会造成手持物品耐久度降低等信息改变，不同步信息可能会造成后续一些逻辑异常，若大批量破坏方块，每次同步会有性能问题，建议前面的调用可令sendInv为False，在最后一次调用此函数时传入sendInv为True。", 
                    "param_name": "sendInv", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "新增particle参数，用于设置是否开启破坏粒子效果,1:开启,0:关闭,默认为1", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "jishaobin"
                }, 
                {
                    "comment": "新增sendInv参数，用于同步服务端背包信息,默认为不同步", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "sutao"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "OpenWorkBench", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "在玩家当前位置打开工作台UI，不依赖于工作台方块", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "打开结果"
            }, 
            "state": [
                {
                    "comment": "新增打开工作台ui接口，不依赖于工作台方块", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "xusifan"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "PlayerUseItemToPos", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "模拟玩家对某个坐标使用物品", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "物品所在的地方[ItemPosType枚举](../../枚举值/ItemPosType.md)", 
                    "param_name": "posType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "槽位，获取INVENTORY及ARMOR时需要设置，其他情况写0即可", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "朝向，详见[Facing枚举](../../枚举值/Facing.md)", 
                    "param_name": "facing", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "新增模拟玩家对某个坐标使用物品的接口", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "PlayerUseItemToEntity", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "玩家使用手上物品对某个生物使用", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "生物entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "新增模拟玩家对某个生物使用物品的接口", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlockNew", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "获取某一位置的block", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#方块信息字典\">方块信息字典</a>"
            }, 
            "state": [
                {
                    "comment": "增加接口使用说明", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "新增dimensionId参数，默认为-1，传入非负值时不依赖playerId，可在对应维度的常加载区块获取方块", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlockTags", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "获取方块在tags:*中定义的tags列表", 
            "doc_class_path": [
                "方块/属性"
            ], 
            "param": [
                {
                    "param_comment": "方块identifierge", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "方块tags列表"
            }, 
            "state": [
                {
                    "comment": "获取方块tags", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "xgb"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlockBasicInfo", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "获取方块基本信息", 
            "doc_class_path": [
                "方块/属性"
            ], 
            "param": [
                {
                    "param_comment": "方块identifier", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#方块基本信息字典#方块基本信息字典\">方块基本信息字典</a>"
            }, 
            "state": [
                {
                    "comment": "获取方块基本信息", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xusifan"
                }, 
                {
                    "comment": "支持返回minecraft:tags", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "xgb"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetBlockBasicInfo", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "设置方块基本信息", 
            "doc_class_path": [
                "方块/属性"
            ], 
            "param": [
                {
                    "param_comment": "方块identifier", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块的<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#方块基本信息字典#方块基本信息字典\">方块基本信息字典</a>", 
                    "param_name": "infoDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "方块附加值，默认是0", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置方块基本信息", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "gmy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlockCollision", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "获取某一位置方块当前collision的aabb", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度,不填时默认为-1", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "方块aabb字典"
            }, 
            "state": [
                {
                    "comment": "获取指定位置方块当前collision的aabb接口", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xusifan"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlockClip", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "获取某一位置方块当前<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/2-自定义方块/1-JSON组件.html#netease-aabb\">clip的aabb</a>", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度,不填时默认为-1", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "方块clip的aabb字典"
            }, 
            "state": [
                {
                    "comment": "获取指定位置方块当前clip的aabb接口", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xusifan"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetLiquidBlock", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "获取某个位置的方块所含流体的信息", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#方块信息字典\">方块信息字典</a>"
            }, 
            "state": [
                {
                    "comment": "获取方块所含流体信息接口", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "guanmingyu"
                }, 
                {
                    "comment": "增加一下备注", 
                    "operation": "调整", 
                    "version": "2.1", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetTopBlockHeight", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "获取某一位置最高的非空气方块的高度", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "x轴与z轴位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int)"
                }, 
                {
                    "param_comment": "维度id，默认为0，可在获取常加载区块内最高非空气方块高度", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int或None", 
                "return_comment": "高度。若区块未加载返回None"
            }, 
            "state": [
                {
                    "comment": "获取某一位置最高的非空气方块的高度", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "CheckBlockToPos", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "判断位置之间是否有方块", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "起始位置", 
                    "param_name": "fromPos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "终止位置", 
                    "param_name": "toPos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "位置所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "result -1：获取失败  0：没有方块  1：有方块"
            }, 
            "state": [
                {
                    "comment": "新增dimensionId参数，默认为-1，传入非负值时不依赖playerId，可判断对应维度的常加载区块内位置之间是否有方块", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetBlockTileEntityCustomData", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "设置指定位置的特殊方块（箱子、头颅、熔炉、花盆等）绑定的TileEntity内存储的自定义数据。", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "绑定TileEntity的特殊方块的位置坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "自定义key", 
                    "param_name": "key", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "支持python基本数据类型，tuple不支持", 
                    "param_name": "value", 
                    "param_type": "any"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果，假如对应位置的block不存在或者没有绑定的TileEntity，就会设置失败"
            }, 
            "state": [
                {
                    "comment": "设置指定位置的特殊方块（箱子、头颅、熔炉、花盆等）绑定的TileEntity内存储的自定义数据。", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }, 
                {
                    "comment": "新增dimensionId参数，默认为-1", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "lzy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlockTileEntityCustomData", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "读取指定位置的特殊方块（箱子、头颅、熔炉、花盆等）绑定的TileEntity内存储的自定义数据", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "绑定TileEntity的特殊方块的位置坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "自定义key", 
                    "param_name": "key", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "any", 
                "return_comment": "设定的value值，假如对应的数据不存在，则会返回None"
            }, 
            "state": [
                {
                    "comment": "读取指定位置的特殊方块（箱子、头颅、熔炉、花盆等）绑定的TileEntity内存储的自定义数据", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }, 
                {
                    "comment": "新增dimensionId参数，默认为-1", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "lzy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlockTileEntityWholeCustomData", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "读取指定位置的特殊方块（箱子、头颅、熔炉、花盆等）绑定的TileEntity内存储的自定义数据字典。", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "绑定TileEntity的特殊方块的位置坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict或None", 
                "return_comment": "TileEntity自定义存储数据字典，假如没有任何额外存储数据，那么返回None或者空字典"
            }, 
            "state": [
                {
                    "comment": "读取指定位置的特殊方块（箱子、头颅、熔炉、花盆等）绑定的TileEntity内存储的自定义数据字典。", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }, 
                {
                    "comment": "新增dimensionId参数，默认为-1", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "lzy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "CleanBlockTileEntityCustomData", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "清空指定位置的特殊方块（箱子、头颅、熔炉、花盆等）绑定的TileEntity内存储的自定义数据。", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "绑定TileEntity的特殊方块的位置坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "清空结果，假如对应位置的block不存在或者没有绑定的TileEntity，就会失败"
            }, 
            "state": [
                {
                    "comment": "清空指定位置的特殊方块（箱子、头颅、熔炉、花盆等）绑定的TileEntity内存储的自定义数据。", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }, 
                {
                    "comment": "新增dimensionId参数，默认为-1", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "lzy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlockEntityData", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "用于获取方块（包括自定义方块）的数据，如需修改，请使用setblockentitydata接口", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "维度", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "dict或None", 
                "return_comment": "方块实体内数据的对象"
            }, 
            "state": [
                {
                    "comment": "获取方块（包括自定义方块）的数据", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetBlockEntityData", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "用于设置方块（包括自定义方块）的数据", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "维度", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "方块所在位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块实体内数据的对象，可结合GetBlockEntityData使用，获取后修改部分数据后再进行设置。如果传空dict，大部分数据不会被改变，小部分数据会被设置为默认值", 
                    "param_name": "nbtData", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置方块（包括自定义方块）的数据", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SpawnResourcesSilkTouched", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "模拟方块精准采集掉落", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "方块的identifier，如minecraft:wool", 
                    "param_name": "identifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "掉落位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块的附加值", 
                    "param_name": "aux", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "掉落方块的维度，默认值为-1，传入非负值时用于获取产生方块掉落的维度；否则将随机挑选一个存在玩家的维度产生掉落", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "模拟方块精准采集掉落", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SpawnResources", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "产生方块随机掉落（该方法不适用于实体方块）", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "方块的identifier，如minecraft:wool", 
                    "param_name": "identifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "掉落位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块的附加值", 
                    "param_name": "aux", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "掉落概率，范围为[0, 1]，0为不掉落，1为100%掉落", 
                    "param_name": "probability", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "[时运等级](https://zh.minecraft.wiki/w/时运)，默认为0", 
                    "param_name": "bonusLootLevel", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "掉落方块的维度，默认值为-1，传入非负值时用于获取产生方块掉落的维度；否则将随机挑选一个存在玩家的维度产生掉落", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否允许随机采集，默认为True，如果为False，掉落概率probability无效", 
                    "param_name": "allowRandomness", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否生成经验球，默认都不生成，设成True时按原版采集逻辑进行经验球掉落，如矿石类方块会产生随机数量的经验球", 
                    "param_name": "spawnOrb", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "产生方块随机掉落", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "新增dimensionId，默认为-1，传入非负值时用于控制产生方块掉落的维度，可在对应维度的常加载区块产生掉落", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "新增是否随机采集参数allowRandomness", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "新增是否生成经验球参数，默认为False，设成True时按原版采集逻辑进行经验球掉落，如矿石类方块会产生随机数量的经验球", 
                    "operation": "调整", 
                    "version": "3.4", 
                    "author": "xgb"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetChestPairedPosition", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "获取与箱子A合并成一个大箱子的箱子B的坐标", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "箱子A的位置坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "箱子A所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "tuple(int,int,int)或None", 
                "return_comment": "箱子B的位置坐标，假如输入的箱子A坐标上的方块不是箱子类方块或者没有和其他箱子方块组合成一个大箱子，就会返回None"
            }, 
            "state": [
                {
                    "comment": "获取与箱子A合并成一个大箱子的箱子B的坐标", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }, 
                {
                    "comment": "新增dimensionId参数，默认为-1", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "lzy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBedColor", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "获取床（方块）的颜色", 
            "doc_class_path": [
                "方块/床"
            ], 
            "param": [
                {
                    "param_comment": "床的位置坐标（床占地两格，任意一个格子都可以）", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "床所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "[ItemColor枚举](../../枚举值/ItemColor.md)"
            }, 
            "state": [
                {
                    "comment": "获取床（方块）的颜色", 
                    "operation": "新增", 
                    "version": "1.19.0", 
                    "author": "xltang"
                }, 
                {
                    "comment": "新增dimensionId参数，默认为-1", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "lzy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetBedColor", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "设置床（方块）的颜色", 
            "doc_class_path": [
                "方块/床"
            ], 
            "param": [
                {
                    "param_comment": "床的位置坐标（床占地两格，任意一个格子都可以）", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "[ItemColor枚举](../../枚举值/ItemColor.md)", 
                    "param_name": "color", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "床所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置床（方块）的颜色", 
                    "operation": "新增", 
                    "version": "1.19.0", 
                    "author": "xltang"
                }, 
                {
                    "comment": "新增dimensionId参数，默认为-1", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "lzy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetSignBlockText", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "获取告示牌（方块）的文本内容", 
            "doc_class_path": [
                "方块/告示牌"
            ], 
            "param": [
                {
                    "param_comment": "告示牌的位置坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "告示牌所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "设置 正/反 面的文本样式，0表示正面，1表示背面，默认为正面", 
                    "param_name": "side", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "告示牌上的文本内容"
            }, 
            "state": [
                {
                    "comment": "获取告示牌（方块）的文本内容", 
                    "operation": "新增", 
                    "version": "1.19.0", 
                    "author": "xltang"
                }, 
                {
                    "comment": "新增dimensionId参数，默认为-1", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "lzy"
                }, 
                {
                    "comment": "支持告示牌文本的双面设置", 
                    "operation": "调整", 
                    "version": "2.12", 
                    "author": "gx"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetSignBlockText", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "设置告示牌（方块）的文本内容", 
            "doc_class_path": [
                "方块/告示牌"
            ], 
            "param": [
                {
                    "param_comment": "告示牌的位置坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "想要设置的文本内容", 
                    "param_name": "text", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "告示牌所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "设置 正/反 面的文本样式，0表示正面，1表示背面，默认为正面", 
                    "param_name": "side", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置告示牌（方块）的文本内容", 
                    "operation": "新增", 
                    "version": "1.19.0", 
                    "author": "xltang"
                }, 
                {
                    "comment": "新增dimensionId参数，默认为-1", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "lzy"
                }, 
                {
                    "comment": "支持告示牌文本的双面设置", 
                    "operation": "调整", 
                    "version": "2.12", 
                    "author": "gx"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "MayPlace", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "判断方块是否可以放置", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "方块identifier，如minecraft:wheat", 
                    "param_name": "identifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块将要放置的坐标", 
                    "param_name": "blockPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "朝向，详见[Facing枚举](../../枚举值/Facing.md)", 
                    "param_name": "facing", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "维度，默认为主世界0", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "方块是否可以放置"
            }, 
            "state": [
                {
                    "comment": "判断方块是否可以放置", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "ListenOnBlockRemoveEvent", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "是否监听方块BlockRemoveServerEvent事件，可以动态修改json组件<a href=\"../../../mcguide/20-玩法开发/15-自定义游戏内容/2-自定义方块/1-JSON组件.html#netease-listen-block-remove\">netease:listen_block_remove</a>的值", 
            "doc_class_path": [
                "event.BlockRemoveServerEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块identifier，如minecraft:wheat", 
                    "param_name": "identifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否监听", 
                    "param_name": "listen", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "是否监听方块[BlockRemoveServerEvent](../事件/方块.html#blockremoveserverevent)事件", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetDestroyTotalTime", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "获取使用物品破坏方块需要的时间", 
            "doc_class_path": [
                "世界/方块管理"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，格式[namespace:name:auxvalue]，auxvalue默认为0", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "物品标识符，格式[namespace:name:auxvalue]，auxvalue默认为0，默认为None（不使用物品）", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "挖掘参数，包含以下字段：急迫等级haste、潮涌能量等级conduit_power、挖掘疲劳mining_fatigue以及挖掘效率等级mining_efficiency，默认为None（所有参数为0）", 
                    "param_name": "miningArgs", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "需要消耗的时间"
            }, 
            "state": [
                {
                    "comment": "增加可选挖掘参数", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "lidi"
                }, 
                {
                    "comment": "获取使用物品破坏方块需要的时间", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RegisterOnStandOn", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "可以动态注册与修改netease:on_stand_on组件", 
            "doc_class_path": [
                "event.OnStandOnBlockServerEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否注册成功"
            }, 
            "state": [
                {
                    "comment": "可以动态注册与修改原版方块的netease:on_stand_on组件(服务端接口)", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "文档删除sendPythonEvent字段", 
                    "operation": "调整", 
                    "version": "2.5", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "UnRegisterOnStandOn", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "可以动态删除netease:on_stand_on组件", 
            "doc_class_path": [
                "event.OnStandOnBlockServerEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "可以动态删除原版方块的netease:on_stand_on组件(服务端接口)", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RegisterOnStepOn", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "可以动态注册与修改netease:on_step_on组件", 
            "doc_class_path": [
                "event.StepOnBlockServerEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否注册成功"
            }, 
            "state": [
                {
                    "comment": "可以动态注册与修改原版方块的netease:on_step_on组件(服务端接口)", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "文档删除sendPythonEvent字段", 
                    "operation": "调整", 
                    "version": "2.5", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "UnRegisterOnStepOn", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "可以动态删除netease:on_step_on组件", 
            "doc_class_path": [
                "event.StepOnBlockServerEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "可以动态删除原版方块的netease:on_step_on组件(服务端接口)", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RegisterOnStepOff", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "可以动态注册与修改netease:on_step_off组件", 
            "doc_class_path": [
                "event.StepOffBlockServerEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否注册成功"
            }, 
            "state": [
                {
                    "comment": "可以动态注册与修改原版方块的netease:on_step_off组件(服务端接口)", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "文档删除sendPythonEvent字段", 
                    "operation": "调整", 
                    "version": "2.5", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "UnRegisterOnStepOff", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "可以动态删除netease:on_step_off组件", 
            "doc_class_path": [
                "event.StepOffBlockServerEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "可以动态删除原版方块的netease:on_step_off组件(服务端接口)", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RegisterOnEntityInside", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "可以动态注册与修改netease:on_entity_inside组件", 
            "doc_class_path": [
                "event.OnEntityInsideBlockServerEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否注册成功"
            }, 
            "state": [
                {
                    "comment": "可以动态注册与修改原版方块的netease:on_entity_inside组件(服务端接口)", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "文档删除sendPythonEvent字段", 
                    "operation": "调整", 
                    "version": "2.5", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "UnRegisterOnEntityInside", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "可以动态删除netease:on_entity_inside组件", 
            "doc_class_path": [
                "event.OnEntityInsideBlockServerEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，包含命名空间，如minecraft:grass", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "可以动态删除原版方块的netease:on_entity_inside组件(服务端接口)", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "likaiyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetLoadBlocks", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "获取已经加载的方块id", 
            "doc_class_path": [
                "方块/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "List", 
                "return_comment": "方块id列表"
            }, 
            "state": [
                {
                    "comment": "获取已经加载的方块id", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetChestLootTable", 
            "path": "server.component.blockInfoCompServer.BlockInfoComponentServer", 
            "desc": "设置箱子战利品表", 
            "doc_class_path": [
                "方块/属性"
            ], 
            "param": [
                {
                    "param_comment": "方块的坐标", 
                    "param_name": "blockPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在的维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "战利品表位置字符串，如\"loot_tables/entities/zombie.json\"", 
                    "param_name": "lootTable", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否屏蔽随机分堆，默认为False", 
                    "param_name": "isIgnoreSpilt", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置箱子战利品表", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "xusifan"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.timeCompServer.TimeComponentServer": [
        {
            "name": "SetTime", 
            "path": "server.component.timeCompServer.TimeComponentServer", 
            "desc": "设置当前世界时间", 
            "doc_class_path": [
                "世界/时间"
            ], 
            "param": [
                {
                    "param_comment": "时间，单位为帧数，表示该存档从新建起经过的时间，而非当前游戏天内的时间。mc中一个游戏天相当于现实的20分钟，即24000帧", 
                    "param_name": "time", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetTimeOfDay", 
            "path": "server.component.timeCompServer.TimeComponentServer", 
            "desc": "设置当前世界在一天内所在的时间", 
            "doc_class_path": [
                "世界/时间"
            ], 
            "param": [
                {
                    "param_comment": "时间，单位为帧数，表示游戏天内的时间，范围为0到24000。mc中一个游戏天相当于现实的20分钟，即24000帧", 
                    "param_name": "timeOfDay", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置当前世界在一天内所在的时间", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetTime", 
            "path": "server.component.timeCompServer.TimeComponentServer", 
            "desc": "获取当前世界时间", 
            "doc_class_path": [
                "世界/时间"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "当前时间，单位为帧数，表示该存档从新建起经过的时间，而非当前游戏天内的时间。mc中一个游戏天相当于现实的20分钟，即24000帧"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "server.component.blockEntityCompServer.BlockEntityCompServer": [
        {
            "name": "SetCommandBlock", 
            "path": "server.component.blockEntityCompServer.BlockEntityCompServer", 
            "desc": "对命令方块进行内容设置", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "命令输入", 
                    "param_name": "cmd", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "悬浮文本", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块类型，详见枚举[命令方块类型](../../枚举值/CommandBlockType.md)", 
                    "param_name": "mode", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "条件，详见枚举[命令方块条件类型](../../枚举值/ConditionType.md)", 
                    "param_name": "isConditional", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "红石模式，详见枚举[命令方块红石类型](../../枚举值/RedstoneModeType.md)", 
                    "param_name": "redstoneMode", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "对命令方块进行内容设置", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetCommandBlock", 
            "path": "server.component.blockEntityCompServer.BlockEntityCompServer", 
            "desc": "获取命令方块的设置内容", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "命令方块的设置内容，详见备注"
            }, 
            "state": [
                {
                    "comment": "获取命令方块的设置内容", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "ExecuteCommandBlock", 
            "path": "server.component.blockEntityCompServer.BlockEntityCompServer", 
            "desc": "执行一次命令方块", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否执行成功"
            }, 
            "state": [
                {
                    "comment": "执行一次命令方块", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetHopperSpeed", 
            "path": "server.component.blockEntityCompServer.BlockEntityCompServer", 
            "desc": "设置漏斗运输一个物品所需的时间（单位：红石刻，1秒10刻），默认值为4刻，该设置存档", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "运输一个物品所需的时间（单位：刻）", 
                    "param_name": "moveTime", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置漏斗运输一个物品所需的时间（单位：红石刻，1秒10刻），默认值为4刻，该设置存档", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetHopperSpeed", 
            "path": "server.component.blockEntityCompServer.BlockEntityCompServer", 
            "desc": "获取漏斗运输一个物品所需的时间（单位：刻）", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "运输一个物品所需的时间（单位：刻）"
            }, 
            "state": [
                {
                    "comment": "获取漏斗运输一个物品所需的时间（单位：刻）", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetSignTextStyle", 
            "path": "server.component.blockEntityCompServer.BlockEntityCompServer", 
            "desc": "设置告示牌的文本样式", 
            "doc_class_path": [
                "方块/告示牌"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "颜色通道值(r, g, b, a)", 
                    "param_name": "color", 
                    "param_type": "tuple(float,float,float,float)"
                }, 
                {
                    "param_comment": "是否发光，即是否显示被发光墨囊染色后的效果", 
                    "param_name": "lighting", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "设置 正/反 面的文本样式，0表示正面，1表示背面，默认为正面", 
                    "param_name": "side", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置告示牌的文本样式", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }, 
                {
                    "comment": "支持告示牌文本样式的双面设置", 
                    "operation": "调整", 
                    "version": "2.12", 
                    "author": "gx"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetSignTextStyle", 
            "path": "server.component.blockEntityCompServer.BlockEntityCompServer", 
            "desc": "获取告示牌的文本样式信息", 
            "doc_class_path": [
                "方块/告示牌"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "告示牌正/背面，0表示正面，1表示背面，默认为正面", 
                    "param_name": "side", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "样式信息颜色rgba和发光，格式：{“color”:(flota,float,float,float),\"lighting\":bool}"
            }, 
            "state": [
                {
                    "comment": "获取告示牌的文本样式信息", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }, 
                {
                    "comment": "支持告示牌文本样式的双面设置", 
                    "operation": "调整", 
                    "version": "2.12", 
                    "author": "gx"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetFrameRotation", 
            "path": "server.component.blockEntityCompServer.BlockEntityCompServer", 
            "desc": "设置物品展示框里物品的顺时针旋转角度", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "旋转角度，取值范围[0~360]", 
                    "param_name": "rot", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置物品展示框里物品的顺时针旋转角度", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetFrameRotation", 
            "path": "server.component.blockEntityCompServer.BlockEntityCompServer", 
            "desc": "获取物品展示框里物品的顺时针旋转角度", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "旋转角度，取值范围[0~360]，获取失败返回-1"
            }, 
            "state": [
                {
                    "comment": "获取物品展示框里物品的顺时针旋转角度", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetFrameItemDropChange", 
            "path": "server.component.blockEntityCompServer.BlockEntityCompServer", 
            "desc": "设置点击物品展示框时生成掉落的几率，默认为1", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "掉落几率，取值范围为[0,1]", 
                    "param_name": "change", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置点击物品展示框时生成掉落的几率，默认为1", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetFrameItemDropChange", 
            "path": "server.component.blockEntityCompServer.BlockEntityCompServer", 
            "desc": "获取物品展示框里物品的掉落几率", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "掉落几率，取值范围为[0,1]，获取失败返回-1"
            }, 
            "state": [
                {
                    "comment": "获取物品展示框里物品的掉落几率", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetFrameItem", 
            "path": "server.component.blockEntityCompServer.BlockEntityCompServer", 
            "desc": "设置物品展示框的物品", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "详见<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置物品展示框的物品", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetFrameItem", 
            "path": "server.component.blockEntityCompServer.BlockEntityCompServer", 
            "desc": "获取物品展示框的物品", 
            "doc_class_path": [
                "方块/方块实体"
            ], 
            "param": [
                {
                    "param_comment": "方块位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>，获取失败或没有物品则返回None"
            }, 
            "state": [
                {
                    "comment": "获取物品展示框的物品", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.ui.controls.buttonUIControl.ButtonUIControl": [
        {
            "name": "AddTouchEventParams", 
            "path": "client.ui.controls.buttonUIControl.ButtonUIControl", 
            "desc": "开启按钮回调功能，不调用该函数则按钮无回调", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "默认为None，详细说明请见备注。", 
                    "param_name": "args", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddHoverEventParams", 
            "path": "client.ui.controls.buttonUIControl.ButtonUIControl", 
            "desc": "开启按钮的悬浮回调功能，不调用该函数则按钮无悬浮回调", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "按钮悬浮回调", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetButtonTouchDownCallback", 
            "path": "client.ui.controls.buttonUIControl.ButtonUIControl", 
            "desc": "设置按钮按下时触发的回调函数", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "回调函数，必须是UI的类函数", 
                    "param_name": "callbackFunc", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetButtonHoverInCallback", 
            "path": "client.ui.controls.buttonUIControl.ButtonUIControl", 
            "desc": "设置鼠标进入按钮时触发的悬浮回调函数", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "回调函数，必须是UI的类函数", 
                    "param_name": "callbackFunc", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "按钮悬浮事件", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetButtonHoverOutCallback", 
            "path": "client.ui.controls.buttonUIControl.ButtonUIControl", 
            "desc": "设置鼠标退出按钮时触发的悬浮回调函数", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "回调函数，必须是UI的类函数", 
                    "param_name": "callbackFunc", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "按钮悬浮事件", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetButtonTouchUpCallback", 
            "path": "client.ui.controls.buttonUIControl.ButtonUIControl", 
            "desc": "设置触控在按钮范围内弹起时的回调函数", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "回调函数，必须是UI的类函数", 
                    "param_name": "callbackFunc", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetButtonTouchCancelCallback", 
            "path": "client.ui.controls.buttonUIControl.ButtonUIControl", 
            "desc": "设置触控在按钮范围外弹起时触发的回调函数", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "回调函数，必须是UI的类函数", 
                    "param_name": "callbackFunc", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetButtonTouchMoveCallback", 
            "path": "client.ui.controls.buttonUIControl.ButtonUIControl", 
            "desc": "设置按下后触控移动时触发的回调函数", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "回调函数，必须是UI的类函数", 
                    "param_name": "callbackFunc", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetButtonTouchMoveInCallback", 
            "path": "client.ui.controls.buttonUIControl.ButtonUIControl", 
            "desc": "设置按下按钮后进入控件时触发的回调函数", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "回调函数，必须是UI的类函数", 
                    "param_name": "callbackFunc", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetButtonTouchMoveOutCallback", 
            "path": "client.ui.controls.buttonUIControl.ButtonUIControl", 
            "desc": "设置按下按钮后退出控件时触发的回调函数", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "回调函数，必须是UI的类函数", 
                    "param_name": "callbackFunc", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetButtonScreenExitCallback", 
            "path": "client.ui.controls.buttonUIControl.ButtonUIControl", 
            "desc": "设置按钮所在画布退出时若鼠标仍未抬起时触发回调函数", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "回调函数，必须是UI的类函数", 
                    "param_name": "callbackFunc", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置按钮所在画布退出时若鼠标仍未抬起时触发回调函数", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.neteaseShopCompClient.NeteaseShopCompClient": [
        {
            "name": "HideShopGate", 
            "path": "client.component.neteaseShopCompClient.NeteaseShopCompClient", 
            "desc": "隐藏网易商城入口", 
            "doc_class_path": [
                "商城"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "隐藏网易商城入口", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ShowShopGate", 
            "path": "client.component.neteaseShopCompClient.NeteaseShopCompClient", 
            "desc": "显示网易商城入口", 
            "doc_class_path": [
                "商城"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "显示网易商城入口", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "OpenShopWindow", 
            "path": "client.component.neteaseShopCompClient.NeteaseShopCompClient", 
            "desc": "打开网易商城窗口。PC端无效（Apollo的PC端请使用商城插件）", 
            "doc_class_path": [
                "商城"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "打开网易商城窗口", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "OpenItemDetailWindow", 
            "path": "client.component.neteaseShopCompClient.NeteaseShopCompClient", 
            "desc": "打开特定商品的详情界面", 
            "doc_class_path": [
                "商城"
            ], 
            "param": [
                {
                    "param_comment": "商品分类名称", 
                    "param_name": "categoryName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "商品名称", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "打开特定商品的详情界面", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CloseShopWindow", 
            "path": "client.component.neteaseShopCompClient.NeteaseShopCompClient", 
            "desc": "关闭网易商城窗口", 
            "doc_class_path": [
                "商城"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "关闭网易商城窗口", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.ui.controls.itemRendererUIControl.ItemRendererUIControl": [
        {
            "name": "SetUiItem", 
            "path": "client.ui.controls.itemRendererUIControl.ItemRendererUIControl", 
            "desc": "设置ItemRenderer控件显示的物品，ItemRenderer控件的配置方式详见<a href=\"../../../../mcguide/18-界面与交互/30-UI说明文档.html#itemrenderer\">控件介绍ItemRenderer</a>", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "物品identifier", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "物品附加值", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "可选参数，是否显示附魔效果，默认为False不显示", 
                    "param_name": "isEnchanted", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "可选参数，如果是灾厄旗帜或焰火之星等带有userData的需要传入该参数才能正确显示，目前已知仅有灾厄旗帜和焰火之星需要传", 
                    "param_name": "userData", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置结果，True为成功"
            }, 
            "state": [
                {
                    "comment": "新增支持焰火之星", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetUiItem", 
            "path": "client.ui.controls.itemRendererUIControl.ItemRendererUIControl", 
            "desc": "获取ItemRenderer控件显示的物品，ItemRenderer控件的配置方式详见<a href=\"../../../../mcguide/18-界面与交互/30-UI说明文档.html#itemrenderer\">控件介绍ItemRenderer</a>", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "物品字典，详见备注（包含itemName:物品identifier, auxValue:物品附加值, isEnchanted:是否附魔)"
            }, 
            "state": [
                {
                    "comment": "新增获取ItemRenderer控件显示的物品接口", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "jcf"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.chestContainerCompServer.ChestContainerCompServer": [
        {
            "name": "GetChestBoxSize", 
            "path": "server.component.chestContainerCompServer.ChestContainerCompServer", 
            "desc": "获取箱子容量大小", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "该参数已废弃", 
                    "param_name": "playerId", 
                    "param_type": "None"
                }, 
                {
                    "param_comment": "箱子位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "箱子所在维度，可获取对应维度的常加载区块内箱子容量", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "箱子大小，错误值-1"
            }, 
            "state": [
                {
                    "comment": "新增dimensionId参数，默认为-1，传入非负值时不依赖playerId，可获取对应维度的常加载区块内箱子容量", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetChestBoxItemNum", 
            "path": "server.component.chestContainerCompServer.ChestContainerCompServer", 
            "desc": "设置箱子槽位物品数目", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "该参数已废弃", 
                    "param_name": "playerId", 
                    "param_type": "None"
                }, 
                {
                    "param_comment": "箱子位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "箱子槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "物品数目", 
                    "param_name": "num", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "方块所在维度，可在对应维度的常加载区块设置方块", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "增加参数dimensionId，默认为-1，传入非负值时不依赖playerId，可在对应维度的常加载区块设置箱子内物品数量", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetChestBoxItemExchange", 
            "path": "server.component.chestContainerCompServer.ChestContainerCompServer", 
            "desc": "交换箱子里物品的槽位", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "箱子位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "箱子槽位1", 
                    "param_name": "slotPos1", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "箱子槽位2", 
                    "param_name": "slotPos2", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置成功返回True，失败返回False"
            }, 
            "state": [
                {
                    "comment": "新增交换箱子物品接口", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "why117"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.engineTypeCompServer.EngineTypeComponentServer": [
        {
            "name": "GetEngineType", 
            "path": "server.component.engineTypeCompServer.EngineTypeComponentServer", 
            "desc": "获取实体类型，主要用于判断实体是否属于某一类型的生物。", 
            "doc_class_path": [
                "实体/实体类型"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "详见[EntityType枚举](../../枚举值/EntityType.md)"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetEngineTypeStr", 
            "path": "server.component.engineTypeCompServer.EngineTypeComponentServer", 
            "desc": "获取实体的类型名称", 
            "doc_class_path": [
                "实体/实体类型"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "实体类型名称，如minecraft:husk"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "client.component.textNotifyCompClient.TextNotifyComponet": [
        {
            "name": "SetLeftCornerNotify", 
            "path": "client.component.textNotifyCompClient.TextNotifyComponet", 
            "desc": "客户端设置左上角通知信息", 
            "doc_class_path": [
                "世界/消息"
            ], 
            "param": [
                {
                    "param_comment": "通知内容", 
                    "param_name": "textMsg", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "接口过屏蔽字", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.collisionBoxCompClient.CollisionBoxComponentClient": [
        {
            "name": "GetSize", 
            "path": "client.component.collisionBoxCompClient.CollisionBoxComponentClient", 
            "desc": "获取实体的包围盒", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "包围盒大小"
            }, 
            "state": [
                {
                    "comment": "客户端获取实体的包围盒", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.rideCompClient.RideCompClient": [
        {
            "name": "GetEntityRider", 
            "path": "client.component.rideCompClient.RideCompClient", 
            "desc": "获取骑乘者正在骑乘的实体的id。", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "骑乘者直接骑乘对象的实体id，假如该骑乘者没有骑乘则返回“-1”"
            }, 
            "state": [
                {
                    "comment": "客户端获取骑乘者正在骑乘的实体的id。", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.msgCompServer.MsgComponentServer": [
        {
            "name": "SendMsg", 
            "path": "server.component.msgCompServer.MsgComponentServer", 
            "desc": "模拟玩家给所有人发送聊天栏消息", 
            "doc_class_path": [
                "世界/消息"
            ], 
            "param": [
                {
                    "param_comment": "发送者玩家的名字", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "消息内容", 
                    "param_name": "msg", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SendMsgToPlayer", 
            "path": "server.component.msgCompServer.MsgComponentServer", 
            "desc": "模拟玩家给另一个玩家发送聊天栏消息", 
            "doc_class_path": [
                "世界/消息"
            ], 
            "param": [
                {
                    "param_comment": "发送者玩家ID", 
                    "param_name": "fromEntityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "接受者玩家ID", 
                    "param_name": "toEntityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "消息内容", 
                    "param_name": "msg", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "NotifyOneMessage", 
            "path": "server.component.msgCompServer.MsgComponentServer", 
            "desc": "给指定玩家发送聊天框消息", 
            "doc_class_path": [
                "世界/消息"
            ], 
            "param": [
                {
                    "param_comment": "指定玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "消息内容", 
                    "param_name": "msg", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "颜色样式代码字符串，可参考wiki[样式代码](https://zh.minecraft.wiki/w/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81)，默认为白色", 
                    "param_name": "color", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "client.component.blockGeometryCompClient.BlockGeometryCompClient": [
        {
            "name": "CombineBlockPaletteToGeometry", 
            "path": "client.component.blockGeometryCompClient.BlockGeometryCompClient", 
            "desc": "将BlockPalette中的所有方块合并并转换为能用于实体的几何体模型。", 
            "doc_class_path": [
                "方块/方块几何体模型"
            ], 
            "param": [
                {
                    "param_comment": "方块调色板，由GetBlockPaletteBetweenPos以及GetBlockPaletteFromPosList接口获取", 
                    "param_name": "blockPalette", 
                    "param_type": "BlockPaletteComponent"
                }, 
                {
                    "param_comment": "几何体模型的名称，用于标识每个几何体模型，相当于是该模型的id。", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "不支持方块处理方式枚举，可选参数，可输入的值为0、1。默认的值为0。如果方块调色板中有不支持转变为几何体的方块的话，将按以下方式处理：0：跳过不支持的方块继续生成。1：停止生成", 
                    "param_name": "unsupportedMode", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "生成成功后返回几何体模型的名称，生成失败返回None。几何体模型名称与输入的参数geometryName一致。"
            }, 
            "state": [
                {
                    "comment": "将BlockPalette中的所有方块合并并转换为能用于实体的几何体模型", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CombineBlockBetweenPosToGeometry", 
            "path": "client.component.blockGeometryCompClient.BlockGeometryCompClient", 
            "desc": "根据输入的两个位置，搜索这两个位置之间的所有方块，并将这些方块合并和转换为能用于实体的几何体模型。", 
            "doc_class_path": [
                "方块/方块几何体模型"
            ], 
            "param": [
                {
                    "param_comment": "起始位置", 
                    "param_name": "startPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "终点位置", 
                    "param_name": "endPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "几何体模型的名称，用于标识每个几何体模型，相当于是该模型的id", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "不支持方块处理方式枚举，可选参数，可输入的值为0、1。默认的值为0。如果方块调色板中有不支持转变为几何体的方块的话，将按以下方式处理：0：跳过不支持的方块继续生成。1：停止生成", 
                    "param_name": "unsupportedMode", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否使用结构空位代替空气方块，可选参数，默认值为False。True表示使用结构空位，False表示不使用结构空位。", 
                    "param_name": "useStructureVoid", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "BlockPaletteComponent", 
                "return_comment": "返回合并过程中生成的方块调色板实例，如创建失败则返回None"
            }, 
            "state": [
                {
                    "comment": "根据输入的两个位置，搜索这两个位置之间的所有方块，并将这些方块合并和转换为能用于实体的几何体模型", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CombineBlockFromPosListToGeometry", 
            "path": "client.component.blockGeometryCompClient.BlockGeometryCompClient", 
            "desc": "根据输入的方块位置列表，搜索这些位置的所有方块，并将这些方块合并和转换为能用于实体的几何体模型。", 
            "doc_class_path": [
                "方块/方块几何体模型"
            ], 
            "param": [
                {
                    "param_comment": "方块位置列表", 
                    "param_name": "posList", 
                    "param_type": "list(tuple(int,int,int))"
                }, 
                {
                    "param_comment": "几何体模型的名称，用于标识每个几何体模型，相当于是该模型的id", 
                    "param_name": "geometryName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "不支持方块处理方式枚举，可选参数，可输入的值为0、1。默认的值为0。如果方块调色板中有不支持转变为几何体的方块的话，将按以下方式处理：0：跳过不支持的方块继续生成。1：停止生成", 
                    "param_name": "unsupportedMode", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否使用结构空位代替空气方块，可选参数，默认值为False。True表示使用结构空位，False表示不使用结构空位。", 
                    "param_name": "useStructureVoid", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "BlockPaletteComponent", 
                "return_comment": "返回合并过程中生成的方块调色板实例，如创建失败则返回None"
            }, 
            "state": [
                {
                    "comment": "根据输入的两个位置，搜索这两个位置之间的所有方块，并将这些方块合并和转换为能用于实体的几何体模型", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.hurtCompServer.HurtCompServer": [
        {
            "name": "ImmuneDamage", 
            "path": "server.component.hurtCompServer.HurtCompServer", 
            "desc": "设置实体是否免疫伤害（该属性存档）", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "是否免疫伤害", 
                    "param_name": "immune", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置实体是否免疫伤害（该属性存档）", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "Hurt", 
            "path": "server.component.hurtCompServer.HurtCompServer", 
            "desc": "设置实体伤害", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "伤害值SetHurtByEntityNew", 
                    "param_name": "damage", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "伤害来源，详见Minecraft枚举值文档的[ActorDamageCause枚举](../../枚举值/ActorDamageCause.md)", 
                    "param_name": "cause", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "伤害来源的实体id，默认为None", 
                    "param_name": "attackerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "伤害来源的子实体id，默认为None，比如玩家使用抛射物对实体造成伤害，该值应为抛射物Id", 
                    "param_name": "childAttackerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "实体是否被击退，默认值为True", 
                    "param_name": "knocked", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "标识自定义伤害来源，只在cause为Custom生效，可在ActorHurtServerEvent、ActuallyHurtServerEvent、DamageEvent、PlayerHurtEvent、PlayerDieEvent、MobDieEvent监听到标识", 
                    "param_name": "customTag", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置实体伤害", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "cause类型新增Custom类型，新增customTag参数标识自定义伤害来源，可在ActorHurtServerEvent、ActuallyHurtServerEvent、DamageEvent、PlayerHurtEvent、PlayerDieEvent、MobDieEvent监听到标识", 
                    "operation": "调整", 
                    "version": "2.11", 
                    "author": "cxz"
                }, 
                {
                    "comment": "damage改为浮点型", 
                    "operation": "调整", 
                    "version": "3.3", 
                    "author": "xgb"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.playerCompClient.PlayerCompClient": [
        {
            "name": "OpenPlayerHitBlockDetection", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "开启碰撞方块的检测，开启后碰撞时会触发OnPlayerHitBlockClientEvent事件", 
            "doc_class_path": [
                "event.OnPlayerHitBlockClientEvent"
            ], 
            "param": [
                {
                    "param_comment": "碰撞检测精度，参数需要在区间[0, 1)，值越小，表示碰撞检测精度越高（可以理解为轻轻碰一下就能触发）", 
                    "param_name": "precision", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ClosePlayerHitBlockDetection", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "关闭碰撞方块的检测，关闭后将不会触发OnPlayerHitBlockClientEvent事件", 
            "doc_class_path": [
                "event.OnPlayerHitBlockClientEvent"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "OpenPlayerHitMobDetection", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "开启对其他生物的碰撞检测，开启后和生物间发生碰撞时会触发OnMobHitMobClientEvent事件。（该接口对生物同样有效）", 
            "doc_class_path": [
                "event.OnMobHitMobClientEvent"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否开启成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ClosePlayerHitMobDetection", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "关闭碰撞生物的检测，关闭后将不会触发OnMobHitMobClientEvent事件。（该接口对生物同样有效）", 
            "doc_class_path": [
                "event.OnMobHitMobClientEvent"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否关闭成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "isGliding", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "是否鞘翅飞行", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否鞘翅飞行"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否鞘翅飞行", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetPickCenterOffset", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "设置第三人称下，玩家客户端交互中心的偏移", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "偏移量", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置第三人称下，玩家客户端交互中心的偏移", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPickCenterOffset", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "获取玩家设置的第三人称下客户端交互中心的偏移", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "偏移量"
            }, 
            "state": [
                {
                    "comment": "获取玩家设置的第三人称下客户端交互中心的偏移", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetPickRange", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "设置玩家客户端的交互距离", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "交互半径", 
                    "param_name": "pickRange", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家客户端的交互距离", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPickRange", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "获取玩家客户端的交互距离", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "交互范围"
            }, 
            "state": [
                {
                    "comment": "获取玩家客户端的交互距离", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "isSwimming", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "是否游泳", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否游泳"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否在游泳", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "isRiding", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "是否骑乘", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否骑乘"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否在骑乘", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "isSneaking", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "是否潜行", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否潜行"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否在潜行", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "setSneaking", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "设置是否潜行，只能设置本地玩家（只适用于移动端）", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家是否潜行", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "setUsingShield", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "激活盾牌状态", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "True使用盾牌，False取消使用盾牌", 
                    "param_name": "flag", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "1设置成功，0设置失败，-1玩家未持盾"
            }, 
            "state": [
                {
                    "comment": "激活盾牌状态", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "gmy"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "isSprinting", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "是否在疾跑", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否在疾跑"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否在疾跑", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "setSprinting", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "设置行走模式为疾跑/冲刺，只能设置本地玩家（只适用于移动端）", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家是否疾跑/冲刺", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "isInWater", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "是否在水中", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否在水中"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否在水中", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "isMoving", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "是否在行走", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否在行走"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否在行走", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "setMoving", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "设置是否行走，只能设置本地玩家（只适用于移动端）", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置本地玩家行走", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "getUid", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "获取本地玩家的uid", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "long或None", 
                "return_comment": "玩家uid"
            }, 
            "state": [
                {
                    "comment": "客户端获取本机玩家uid", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "why117"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Swing", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "本地玩家播放原版攻击动作", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "本地玩家播放原版攻击动作", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPlayerHunger", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "获取玩家饥饿度，展示在UI饥饿度进度条上，初始值为20，即每一个鸡腿代表2个饥饿度。 **饱和度(saturation)** ：玩家当前饱和度，初始值为5，最大值始终为玩家当前饥饿度(hunger)，该值直接影响玩家**饥饿度(hunger)**。<br>1）增加方法：吃食物。<br>2）减少方法：每触发一次**消耗事件**，该值减少1，如果该值不大于0，直接把玩家 **饥饿度(hunger)** 减少1。", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "玩家饥饿度"
            }, 
            "state": [
                {
                    "comment": "客户端获取玩家饥饿度", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPlayerDestroyTotalTime", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "获取玩家破坏方块需要的时间，受玩家状态（急迫、潮涌、挖掘疲劳）和手持物及手持物附魔（效率）影响", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，格式[namespace:name:auxvalue]，auxvalue默认为0", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "需要消耗的时间"
            }, 
            "state": [
                {
                    "comment": "获取玩家破坏方块需要的时间，受玩家状态（急迫、潮涌、挖掘疲劳）和手持物及手持物附魔（效率）影响", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lidi"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "IsOnLadder", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "获取玩家是否在梯子/藤蔓上", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否在梯子/藤蔓上"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否在梯子/藤蔓上", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "IsInScaffolding", 
            "path": "client.component.playerCompClient.PlayerCompClient", 
            "desc": "获取玩家是否在脚手架中", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否在脚手架中"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否在脚手架中", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.playerCompServer.PlayerCompServer": [
        {
            "name": "GetPlayerHunger", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家饥饿度，展示在UI饥饿度进度条上，初始值为20，即每一个鸡腿代表2个饥饿度。 **饱和度(saturation)** ：玩家当前饱和度，初始值为5，最大值始终为玩家当前饥饿度(hunger)，该值直接影响玩家**饥饿度(hunger)**。<br>1）增加方法：吃食物。<br>2）减少方法：每触发一次**消耗事件**，该值减少1，如果该值不大于0，直接把玩家 **饥饿度(hunger)** 减少1。", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "玩家饥饿度"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerHunger", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家饥饿度。", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "饥饿度", 
                    "param_name": "value", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerCurrentExhaustionValue", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家foodExhaustionLevel的当前消耗度。详见<a href=\"https://zh.minecraft.wiki/w/%E9%A5%A5%E9%A5%BF#%E6%9C%BA%E5%88%B6\">消耗度介绍</a>", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "玩家foodExhaustionLevel的当前消耗度,"
            }, 
            "state": [
                {
                    "comment": "获取玩家当前消耗度", 
                    "operation": "新增", 
                    "version": "3.4", 
                    "author": "qiuyukun"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerCurrentExhaustionValue", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家foodExhaustionLevel的当前消耗度。详见<a href=\"https://zh.minecraft.wiki/w/%E9%A5%A5%E9%A5%BF#%E6%9C%BA%E5%88%B6\">消耗度介绍</a>", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "当前消耗度", 
                    "param_name": "value", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家当前消耗度", 
                    "operation": "新增", 
                    "version": "3.4", 
                    "author": "qiuyukun"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerMaxExhaustionValue", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家foodExhaustionLevel的归零值，常量值，默认为4。**消耗度（exhaustion）**是指玩家当前消耗度水平，初始值为0，该值会随着玩家一系列动作（如跳跃）的影响而增加，当该值大于最大消耗度（maxExhaustion）后归零，并且把饱和度（saturation）减少1（为了说明饥饿度机制，我们将此定义为**消耗事件**）", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "玩家foodExhaustionLevel的归零值"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerMaxExhaustionValue", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家**最大消耗度(maxExhaustion)**，通过调整 **最大消耗度(maxExhaustion)** 的大小，就可以调整 **饥饿度(hunger)** 的消耗速度，当 **最大消耗度(maxExhaustion)** 很大时，饥饿度可以看似一直不下降", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "**最大消耗度(maxExhaustion)**", 
                    "param_name": "value", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerHealthLevel", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家健康临界值，当饥饿值大于等于健康临界值时会自动恢复血量，开启饥饿值且开启自然恢复时有效。原版默认值为18", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "健康临界值，-1表示获取失败"
            }, 
            "state": [
                {
                    "comment": "获取玩家健康临界值", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerHealthLevel", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家健康临界值，当饥饿值大于等于健康临界值时会自动恢复血量，开启饥饿值且开启自然恢复时有效.原版默认值为18", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "健康临界值", 
                    "param_name": "healthLevel", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家健康临界值", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerHealthTick", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家自然恢复速度，当饥饿值大于等于健康临界值时会自动恢复血量，开启饥饿值且开启自然恢复时有效。原版默认值为80刻（即每4秒）恢复1点血量", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "自然恢复速度，-1表示获取失败"
            }, 
            "state": [
                {
                    "comment": "获取玩家自然恢复速度，单位刻", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerHealthTick", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家自然恢复速度，当饥饿值大于等于健康临界值时会自动恢复血量，开启饥饿值且开启自然恢复时有效.原版默认值为80刻（即每4秒）恢复1点血量", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "自然恢复速度", 
                    "param_name": "healthTick", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家自然恢复速度，单位刻", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsPlayerNaturalRegen", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "是否开启玩家自然恢复，当饥饿值大于等于健康临界值时会自动恢复血量，开启饥饿值且开启自然恢复时有效。原版默认开启", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True表示开启，False表示关闭，None表示获取失败"
            }, 
            "state": [
                {
                    "comment": "获取是否开启玩家自然恢复", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerNaturalRegen", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置是否开启玩家自然恢复，当饥饿值大于等于健康临界值时会自动恢复血量，开启饥饿值且开启自然恢复时有效.原版默认开启", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "True开启，False关闭", 
                    "param_name": "value", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置是否开启玩家自然恢复", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerStarveLevel", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家饥饿临界值，当饥饿值小于饥饿临界值时会自动扣除血量，开启饥饿值且开启饥饿掉血时有效。原版默认值为1", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "饥饿临界值 -1表示获取失败"
            }, 
            "state": [
                {
                    "comment": "获取玩家饥饿临界值", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerStarveLevel", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家饥饿临界值，当饥饿值小于饥饿临界值时会自动扣除血量，开启饥饿值且开启饥饿掉血时有效。原版默认值为1", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "饥饿临界值", 
                    "param_name": "starveLevel", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家饥饿临界值，如果该值大于健康临界值，将被设置为健康临界值", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerStarveTick", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家饥饿掉血速度，当饥饿值小于饥饿临界值时会自动扣除血量，开启饥饿值且开启饥饿掉血时有效。原版默认值为80刻（即每4秒）扣除1点血量", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "饥饿掉血速度，-1表示获取失败"
            }, 
            "state": [
                {
                    "comment": "获取玩家饥饿掉血速度，单位刻", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerStarveTick", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家饥饿掉血速度，当饥饿值小于饥饿临界值时会自动扣除血量，开启饥饿值且开启饥饿掉血时有效.原版默认值为80刻（即每4秒）扣除1点血量", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "饥饿掉血速度", 
                    "param_name": "starveTick", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家饥饿掉血速度，单位刻", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsPlayerNaturalStarve", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "是否开启玩家饥饿掉血，当饥饿值小于饥饿临界值时会自动恢复血量，开启饥饿值且开启饥饿掉血时有效。原版默认开启", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True表示开启，False表示关闭，None表示获取失败"
            }, 
            "state": [
                {
                    "comment": "获取是否开启玩家饥饿掉血", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerNaturalStarve", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置是否开启玩家饥饿掉血，当饥饿值小于饥饿临界值时会自动扣除血量，开启饥饿值且开启饥饿掉血时有效.原版默认开启", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "True开启，False关闭", 
                    "param_name": "value", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置是否开启玩家饥饿掉血", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "OpenPlayerCritBox", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "开启玩家爆头，开启后该玩家头部被击中后会触发ProjectileCritHitEvent事件。", 
            "doc_class_path": [
                "event.ProjectileCritHitEvent"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "ClosePlayerCritBox", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "关闭玩家爆头，关闭后将无法触发ProjectileCritHitEvent事件。", 
            "doc_class_path": [
                "event.ProjectileCritHitEvent"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerMovable", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家是否可移动", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "是否可移动,True允许移动，False禁止移动", 
                    "param_name": "isMovable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerJumpable", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家是否可跳跃", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "是否可跳跃,True允许跳跃，False禁止跳跃", 
                    "param_name": "isJumpable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerGameType", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家个人游戏模式", 
            "doc_class_path": [
                "玩家/游戏模式"
            ], 
            "param": [
                {
                    "param_comment": "[GameType枚举](../../枚举值/GameType.md)", 
                    "param_name": "gameType", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "修复了在AddServerPlayerEvent中使用会导致崩溃的问题", 
                    "operation": "修复", 
                    "version": "1.25", 
                    "author": "czh"
                }, 
                {
                    "comment": "新增对旁观模式的支持", 
                    "operation": "调整", 
                    "version": "3.0", 
                    "author": "qyk"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "OpenPlayerHitBlockDetection", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "开启碰撞方块的检测，开启后碰撞时会触发OnPlayerHitBlockServerEvent事件", 
            "doc_class_path": [
                "event.OnPlayerHitBlockServerEvent"
            ], 
            "param": [
                {
                    "param_comment": "碰撞检测精度，参数需要在区间[0, 1)，值越小，表示碰撞检测精度越高（可以理解为轻轻碰一下就能触发）", 
                    "param_name": "precision", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "ClosePlayerHitBlockDetection", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "关闭碰撞方块的检测，关闭后将不会触发OnPlayerHitBlockServerEvent事件", 
            "doc_class_path": [
                "event.OnPlayerHitBlockServerEvent"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "OpenPlayerHitMobDetection", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "开启对其他生物的碰撞检测，开启后和生物间发生碰撞时会触发OnMobHitMobServerEvent事件。（该接口对生物同样有效）", 
            "doc_class_path": [
                "event.OnMobHitMobServerEvent"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否开启成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "ClosePlayerHitMobDetection", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "关闭碰撞生物的检测，关闭后将不会触发OnMobHitMobServerEvent事件。", 
            "doc_class_path": [
                "event.OnMobHitMobServerEvent"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否关闭成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetPickUpArea", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家的拾取物品范围，设置后该玩家的拾取物品范围会在原版拾取范围的基础上进行改变。", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "拾取物品范围，传入(0, 0, 0)时视作取消设置", 
                    "param_name": "area", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "EnableKeepInventory", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家死亡不掉落物品", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "True：不掉落，False：掉落", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "isSneaking", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家是否处于潜行状态", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "当前玩家是否处于潜行状态"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否处于潜行状态", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "isSwimming", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家是否处于游泳状态。", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "当前玩家是否处于游泳状态"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否处于游泳状态", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "ClearDefinedLevelUpCost", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "接口用于重置升级经验。使用ChangeLevelUpCostServerEvent事件设置升级经验后，升级经验无法调整。需要调整升级经验时，可使用该接口。使用步骤如下：1、使用ClearDefineLevelUpconst，2、在升级抛出ChangeLevelUpCostServerEvent事件后重新设置经验。", 
            "doc_class_path": [
                "event.ChangeLevelUpCostServerEvent"
            ], 
            "param": [
                {
                    "param_comment": "指定清理的等级，加入传入的数值小于0，则清理所有等级的升级经验值缓存", 
                    "param_name": "level", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否清理成功。"
            }, 
            "state": [
                {
                    "comment": "清理自定义的升级经验，清理后才有会再次回调ChangeLevelUpCostServerEvent事件并再次设置新的升级经验值。", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "ChangeSelectSlot", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家当前选中快捷栏物品的index", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "快捷栏物品的index，从0开始，最大为8", 
                    "param_name": "slot", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家当前选中快捷栏物品的index", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerOperation", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家权限类型信息", 
            "doc_class_path": [
                "玩家/权限"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "权限类型，Visitor为0，Member为1，Operator为2，Custom为3"
            }, 
            "state": [
                {
                    "comment": "获取玩家权限类型信息", 
                    "operation": "新增", 
                    "version": "1.19.release20201022", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerAbilities", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家具体权限", 
            "doc_class_path": [
                "玩家/权限"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "具体权限，详见备注"
            }, 
            "state": [
                {
                    "comment": "获取玩家具体权限", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "jishaobin"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerExhaustionRatioByType", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家某行为饥饿度消耗倍率", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": " 行为枚举[PlayerExhauseRatioType枚举](../../枚举值/PlayerExhauseRatioType.md)", 
                    "param_name": "type", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "饥饿度消耗倍率值, -1为获取失败（例如在创造模式下）"
            }, 
            "state": [
                {
                    "comment": "获取玩家某行为饥饿度消耗倍率", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerExhaustionRatioByType", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家某行为饥饿度消耗倍率", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": " 行为枚举[PlayerExhauseRatioType枚举](../../枚举值/PlayerExhauseRatioType.md)", 
                    "param_name": "type", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": " 倍率", 
                    "param_name": "ratio", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家某行为饥饿度消耗倍率", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "hdy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetInteracteCenterOffset", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家服务端交互中心的偏移", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "偏移量", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家服务端交互中心的偏移", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetInteracteCenterOffset", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家[服务端交互中心](../../更新信息/2.8.md#玩家摄像机)的偏移", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "偏移量"
            }, 
            "state": [
                {
                    "comment": "获取玩家服务端交互中心的偏移", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerInteracteRange", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家服务端的交互距离", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "交互半径"
            }, 
            "state": [
                {
                    "comment": "获取玩家服务端的交互距离", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerInteracteRange", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家服务端的交互距离", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "交互半径", 
                    "param_name": "interacteRange", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家服务端的交互距离", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerRespawnPos", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家复活的位置与维度", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "复活点的位置坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "复活点的维度，默认值为0（主世界），注意1：维度21是不可用的；注意2：不能在玩家死亡（PlayerDieEvent）之后设置复活点", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "新增参数dimensionId，支持设置复活维度", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerRespawnPos", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家复活点", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "复活点信息，包括维度和坐标"
            }, 
            "state": [
                {
                    "comment": "新增获取玩家复活点接口", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "CollectOnlineClientData", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "收集在线玩家客户端数据，用于判断玩家是否作弊", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "数据类型，不同类型收集到不同数据，具体说明参见备注。", 
                    "param_name": "collectTypes", 
                    "param_type": "list(str)"
                }, 
                {
                    "param_comment": "回调函数，用于分析数据并判断玩家是否作弊，包含两个参数，第一个参数是playerId，类型str；第二个参数表示收集到的数据，dict类型，内容由collectTypes决定的，具体参见备注，若数据收集失败则为None（比如玩家不在线）", 
                    "param_name": "callback", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "默认为None，根据collectTypes传入不同参数，具体说明参见备注。", 
                    "param_name": "extraArgs", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "收集玩家客户端数据，用于判断玩家是否作弊", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "yfgn0711"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerAttackSpeedAmplifier", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家攻击速度倍数，1.0表示正常水平，1.2表示速度减益20%，0.8表示速度增益20%", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "攻击速度倍数，范围[0.5,2.0]", 
                    "param_name": "amplifier", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家攻击速度倍数", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetIsBlocking", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家激活盾牌状态", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "玩家盾牌状态是否激活"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否处于抵挡状态", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "gmy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetRelevantPlayer", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取附近玩家id列表", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "排除的玩家id列表,默认值为None,不排除其他玩家及自身", 
                    "param_name": "exceptList", 
                    "param_type": "list(str)"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "附近玩家id列表"
            }, 
            "state": [
                {
                    "comment": "获取附近玩家id列表", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetBanPlayerFishing", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置是否屏蔽玩家钓鱼功能，屏蔽后玩家可以正常抛甩鱼竿，但无法钓起任何物品", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "是否屏蔽玩家钓鱼功能，True为屏蔽，False为取消屏蔽", 
                    "param_name": "isBan", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置是否屏蔽玩家钓鱼功能", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "wj"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEnchantmentSeed", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家的附魔种子，该种子会决定附魔台上准备附魔的装备的附魔项", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "附魔种子"
            }, 
            "state": [
                {
                    "comment": "获取玩家的附魔种子，该种子会决定附魔台上准备附魔的装备的附魔项", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetEnchantmentSeed", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家的附魔种子，该种子会决定附魔台上准备附魔的装备的附魔项", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "种子，随机数量多，开发者可使用[GetEnchantmentSeed](#getenchantmentseed)获取当前的随机种子，自行记录", 
                    "param_name": "enchantmentSeed", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家的附魔种子，该种子会决定附魔台上准备附魔的装备的附魔项", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetBuildAbility", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家能否放置方块，该接口的设置会存档，且只影响生存模式", 
            "doc_class_path": [
                "玩家/权限"
            ], 
            "param": [
                {
                    "param_comment": "能否放置方块", 
                    "param_name": "canBuild", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家能否放置方块，该接口的设置会存档，且只影响生存模式", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetMineAbility", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家能否摧毁方块，该接口的设置会存档，且只影响生存模式", 
            "doc_class_path": [
                "玩家/权限"
            ], 
            "param": [
                {
                    "param_comment": "能否摧毁方块", 
                    "param_name": "canMine", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家能否摧毁方块，该接口的设置会存档，且只影响生存模式", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetOperateDoorsAndSwitchesAbility", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家能否与门和开关交互", 
            "doc_class_path": [
                "玩家/权限"
            ], 
            "param": [
                {
                    "param_comment": "能否与门和开关交互", 
                    "param_name": "canOperate", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家能否与门和开关交互", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetOpenContainersAbility", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家能否打开容器", 
            "doc_class_path": [
                "玩家/权限"
            ], 
            "param": [
                {
                    "param_comment": "能否打开容器", 
                    "param_name": "canOpen", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家能否打开容器", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetAttackPlayersAbility", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家能否攻击其他玩家", 
            "doc_class_path": [
                "玩家/权限"
            ], 
            "param": [
                {
                    "param_comment": "能否攻击其他玩家", 
                    "param_name": "canAttack", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家能否攻击其他玩家", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetAttackMobsAbility", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家能否攻击生物", 
            "doc_class_path": [
                "玩家/权限"
            ], 
            "param": [
                {
                    "param_comment": "能否攻击生物", 
                    "param_name": "canAttack", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家能否攻击生物", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetOperatorCommandAbility", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家是否具有操作员命令权限", 
            "doc_class_path": [
                "玩家/权限"
            ], 
            "param": [
                {
                    "param_comment": "是否能发送操作员命令", 
                    "param_name": "canOperate", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家是否具有操作员命令权限", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetTeleportAbility", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家能否使用TP指令", 
            "doc_class_path": [
                "玩家/权限"
            ], 
            "param": [
                {
                    "param_comment": "能否使用TP指令", 
                    "param_name": "canTeleport", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家能否使用TP指令", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerMute", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家是否禁言，该接口的设置不存档", 
            "doc_class_path": [
                "玩家/权限"
            ], 
            "param": [
                {
                    "param_comment": "是否禁言", 
                    "param_name": "isMute", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家是否禁言，该接口的设置不存档", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPermissionLevel", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "设置玩家权限等级", 
            "doc_class_path": [
                "玩家/权限"
            ], 
            "param": [
                {
                    "param_comment": "权限等级，0为访客、1为成员、2为操作员、3为自定义", 
                    "param_name": "level", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家权限等级", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "PlayerAttackEntity", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "玩家使用手持武器攻击某个生物", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "生物entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "模拟玩家攻击某个生物", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "dxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerDestroyTotalTime", 
            "path": "server.component.playerCompServer.PlayerCompServer", 
            "desc": "获取玩家破坏方块需要的时间，受玩家状态（急迫、潮涌、挖掘疲劳）和手持物及手持物附魔（效率）影响", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "方块标识符，格式[namespace:name:auxvalue]，auxvalue默认为0", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "需要消耗的时间"
            }, 
            "state": [
                {
                    "comment": "获取玩家破坏方块需要的时间，受玩家状态（急迫、潮涌、挖掘疲劳）和手持物及手持物附魔（效率）影响", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.ui.controls.selectionWheelUIControl.SelectionWheelUIControl": [
        {
            "name": "GetSliceCount", 
            "path": "client.ui.controls.selectionWheelUIControl.SelectionWheelUIControl", 
            "desc": "获取轮盘可以选择的总切片数量", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "轮盘可以选择的总切片数量"
            }, 
            "state": [
                {
                    "comment": "获取轮盘可以选择的总切片数量", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetCurrentSliceIndex", 
            "path": "client.ui.controls.selectionWheelUIControl.SelectionWheelUIControl", 
            "desc": "获取轮盘当前选择的切片的index，一般是在SetHoverCallback和SetTouchUpCallback中使用，表示当前鼠标悬浮或者点击的轮盘切片index", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "轮盘当前选择的切片的index，-1表示轮盘当前没有选择任何切片"
            }, 
            "state": [
                {
                    "comment": "获取轮盘当前选择的切片的index", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCurrentSliceIndex", 
            "path": "client.ui.controls.selectionWheelUIControl.SelectionWheelUIControl", 
            "desc": "设置轮盘选择的切片", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "轮盘选择的切片的index，取值范围为 [-1, GetSliceCount() - 1]，-1表示轮盘无选择", 
                    "param_name": "index", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置轮盘选择的切片", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetTouchUpCallback", 
            "path": "client.ui.controls.selectionWheelUIControl.SelectionWheelUIControl", 
            "desc": "设置轮盘选择切片并且鼠标按下抬起后触发回调函数", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "回调函数，必须是UI的类函数，并且无参数", 
                    "param_name": "callbackFunc", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置轮盘选择切片并且鼠标按下抬起后触发回调函数", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetHoverCallback", 
            "path": "client.ui.controls.selectionWheelUIControl.SelectionWheelUIControl", 
            "desc": "设置轮盘选择切片触发回调函数", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "回调函数，必须是UI的类函数，并且无参数", 
                    "param_name": "callbackFunc", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置轮盘选择切片触发回调函数", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.ui.controls.inputPanelUIControl.InputPanelUIControl": [
        {
            "name": "SetIsModal", 
            "path": "client.ui.controls.inputPanelUIControl.InputPanelUIControl", 
            "desc": "设置当前面板是否为模态框", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "当前面板是否为模态框", 
                    "param_name": "isModal", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置当前面板是否为模态框", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetIsModal", 
            "path": "client.ui.controls.inputPanelUIControl.InputPanelUIControl", 
            "desc": "判断当前面板是否为模态框", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "当前面板是否为模态框"
            }, 
            "state": [
                {
                    "comment": "判断当前面板是否为模态框", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetIsSwallow", 
            "path": "client.ui.controls.inputPanelUIControl.InputPanelUIControl", 
            "desc": "设置当前面板输入是否会吞噬事件，isSwallow为Ture时，点击时，点击事件不会穿透到世界。如破坏方块、镜头转向不会被响应", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "设置当前面板输入是否会吞噬事件", 
                    "param_name": "isSwallow", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置当前面板输入是否会吞噬事件", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetIsSwallow", 
            "path": "client.ui.controls.inputPanelUIControl.InputPanelUIControl", 
            "desc": "判断当前面板输入是否会吞噬事件，isSwallow为Ture时，点击时，点击事件不会穿透到世界。如破坏方块、镜头转向不会被响应", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "当前当前面板输入是否会吞噬事件"
            }, 
            "state": [
                {
                    "comment": "判断当前面板输入是否会吞噬事件", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetOffsetDelta", 
            "path": "client.ui.controls.inputPanelUIControl.InputPanelUIControl", 
            "desc": "设置点击面板的拖拽偏移量", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "该控件的拖拽偏移量，第一项为横轴，第二项为纵轴", 
                    "param_name": "offset_delta", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置点击面板的拖拽偏移量", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetOffsetDelta", 
            "path": "client.ui.controls.inputPanelUIControl.InputPanelUIControl", 
            "desc": "获得点击面板的拖拽偏移量", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "该控件的拖拽偏移量，第一项为横轴，第二项为纵轴"
            }, 
            "state": [
                {
                    "comment": "获得点击面板的拖拽偏移量", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.neteaseWindowCompClient.NeteaseWindowCompClient": [
        {
            "name": "OpenResourceCenterDetailWindow", 
            "path": "client.component.neteaseWindowCompClient.NeteaseWindowCompClient", 
            "desc": "打开网易资源中心组件详情界面。该接口只能在横屏版本手机端使用", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [
                {
                    "param_comment": "组件id", 
                    "param_name": "itemId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "打开网易资源中心组件详情界面", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "dxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "OpenDeveloperHomeWindow", 
            "path": "client.component.neteaseWindowCompClient.NeteaseWindowCompClient", 
            "desc": "打开网易资源中心开发者主页。该接口只能在横屏版本手机端使用", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [
                {
                    "param_comment": "开发者邮箱", 
                    "param_name": "mailAddress", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "打开网易资源中心开发者主页", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "dxz"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer": [
        {
            "name": "GetEntityNBTTags", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取实体的NBT标签", 
            "doc_class_path": [
                "实体/实体类型"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict或None", 
                "return_comment": "实体NBT标签的dict"
            }, 
            "state": [
                {
                    "comment": "获取实体的NBT标签", 
                    "operation": "新增", 
                    "version": "3.0", 
                    "author": "qyk"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntityDefinitions", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取实体的命名空间ID及其当前和之前的定义组件群", 
            "doc_class_path": [
                "实体/实体类型"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "实体的命名空间ID及其当前和之前的定义组件群的list"
            }, 
            "state": [
                {
                    "comment": "获取实体的命名空间ID及其当前和之前的定义组件群", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntityFallDistance", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取实体的坠落高度，越大的值会给予实体更大的坠落伤害，建议在[OnGroundServerEvent](../../事件/实体.md#ongroundserverevent)事件中调用", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "坠落高度，无坠落为0，获取失败为-1"
            }, 
            "state": [
                {
                    "comment": "获取实体的坠落高度，越大的值会给予实体更大的坠落伤害", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntityLinksTag", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取实体相连接的实体，如获取entityId为马，会返回骑乘者的信息", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "相连接实体的dict"
            }, 
            "state": [
                {
                    "comment": "获取实体相连接的实体，如获取entityId为马，会返回骑乘者的信息", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsLootDropped", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取生物是否生成掉落物", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否能生成战利品"
            }, 
            "state": [
                {
                    "comment": "获取生物是否生成掉落物", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetLootDropped", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "设置生物是否生成掉落物", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "设置生物是否生成掉落物", 
                    "param_name": "isLootDropped", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置生物是否生成掉落物", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetMobColor", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取生物的颜色，截止至网易2.9版本，只对羊和热带鱼有效", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "颜色枚举值，详见[EntityColorType枚举](../../枚举值/EntityColorType.md)"
            }, 
            "state": [
                {
                    "comment": "获取生物的颜色，截止至网易2.9版本，只对羊和热带鱼有效", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetMobColor", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "设置生物的颜色，截止至网易2.9版本，只对羊和热带鱼有效", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "颜色枚举值，详见[EntityColorType枚举](../../枚举值/EntityColorType.md)", 
                    "param_name": "colorType", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置生物的颜色，截止至网易2.9版本，只对羊和热带鱼有效", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetMobStrength", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取生物的强度，截止至网易2.9版本，只对羊驼有效，强度越大羊驼驮运的箱子时格子数量越多", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "强度值，取值范围为 1~5"
            }, 
            "state": [
                {
                    "comment": "获取生物的强度，截止至网易2.9版本，只对羊驼有效，强度越大羊驼驮运的箱子时格子数量越多", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetMobStrength", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "设置生物的强度，截止至网易2.9版本，只对羊驼有效，强度越大羊驼驮运的箱子时格子数量越多", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "强度值，取值范围为 1~5，如果设置值大于[GetMobStrengthMax](#getmobstrengthmax)的值，将被设置为[GetMobStrengthMax](#getmobstrengthmax)的值", 
                    "param_name": "strength", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "修复当羊驼被打时候，强度值恢复。修复强度值没有存档。", 
                    "operation": "修复", 
                    "version": "3.0", 
                    "author": "bl"
                }, 
                {
                    "comment": "设置生物的强度，截止至网易2.9版本，只对羊驼有效，强度越大羊驼驮运的箱子时格子数量越多", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetMobStrengthMax", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取生物强度的最大值，截止至网易2.9版本，只对羊驼有效，强度越大羊驼驮运的箱子时格子数量越多，[SetMobStrength](#setstrength)无法超过SetMobStrengthMax的值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "强度值，取值范围为 1~5，原版默认值为5"
            }, 
            "state": [
                {
                    "comment": "获取生物强度的最大值，截止至网易2.9版本，只对羊驼有效，强度越大羊驼驮运的箱子时格子数量越多，[SetMobStrength](#setstrength)无法超过SetMobStrengthMax的值", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetMobStrengthMax", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "设置生物强度的最大值，截止至网易2.9版本，只对羊驼有效，强度越大羊驼驮运的箱子时格子数量越多，[SetMobStrength](#setmobstrength)无法超过SetMobStrengthMax的值。由于引擎限制，在羊驼被打时候会reload组件，strengthMax会恢复成llama.json中的配置值(minecraft:strength)", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "强度值，取值范围为 1~5，原版默认值为5", 
                    "param_name": "strength", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "增加的接口特殊情况说明：由于引擎限制，在羊驼被打时候会reload组件，strengthMax会恢复成llama.json中的配置值(minecraft:strength)", 
                    "operation": "调整", 
                    "version": "3.0", 
                    "author": "bl"
                }, 
                {
                    "comment": "设置生物强度的最大值，截止至网易2.9版本，只对羊驼有效，强度越大羊驼驮运的箱子时格子数量越多，[SetMobStrength](#setmobstrength)无法超过SetMobStrengthMax的值", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsSheared", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "判断实体是否被剃毛，截止至网易2.9版本，只对羊有效", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "已经被剃毛返回True，没有返回False，调用失败返回None"
            }, 
            "state": [
                {
                    "comment": "判断实体是否被剃毛，截止至网易2.9版本，只对羊有效", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetSheared", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "设置实体是否被剃毛，截止至网易2.9版本，只对羊有效", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "是否剃毛", 
                    "param_name": "isSheared", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置实体是否被剃毛，截止至网易2.9版本，只对羊有效", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsIllagerCaptain", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "判断实体是否为袭击队长，截止至网易2.9版本，只对掠夺者和卫道士有效", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否为袭击队长，是返回True，否返回False，调用失败返回None"
            }, 
            "state": [
                {
                    "comment": "判断实体是否为袭击队长，截止至网易2.9版本，只对掠夺者和卫道士有效", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "PromoteToIllagerCaptain", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "晋升实体为袭击队长，截止至网易2.9版本，只对掠夺者和卫道士有效", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "晋升实体为袭击队长，截止至网易2.9版本，只对掠夺者和卫道士有效", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsSitting", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "判断实体是否处于坐下状态", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否处于坐下状态，调用失败返回None"
            }, 
            "state": [
                {
                    "comment": "判断实体是否处于坐下状态", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetSitting", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "设置生物是否坐下", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "是否坐下", 
                    "param_name": "shouldSitDown", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置生物是否坐下", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsBaby", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "判断实体是否为幼年", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否为幼年，调用失败返回None"
            }, 
            "state": [
                {
                    "comment": "判断实体是否为幼年", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetAsAdult", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "设置实体为成年体", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否为成功"
            }, 
            "state": [
                {
                    "comment": "设置实体为成年体", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsTamed", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "判断实体是否被驯服", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否为被驯服，调用失败返回None"
            }, 
            "state": [
                {
                    "comment": "判断实体是否被驯服", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsAngry", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "判断实体是否处于激怒状态", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否处于激怒状态，调用失败返回None"
            }, 
            "state": [
                {
                    "comment": "判断实体是否处于激怒状态", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetAngry", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "设置实体是否处于激怒状态", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "是否设置为激怒状态", 
                    "param_name": "isAngry", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "攻击的目标id，设置为True时必须设置目标，设置为isAngry为False的时候不用填", 
                    "param_name": "targerId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置实体是否处于激怒状态", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsOutOfControl", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "判断实体是否处于失控状态，截止至网易2.9版本，只对船有效", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否失控，调用失败返回None"
            }, 
            "state": [
                {
                    "comment": "判断实体是否处于失控状态，截止至网易2.9版本，只对船有效", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetOutOfControl", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "设置实体是否处于失控状态，截止至网易2.9版本，只对船有效", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "是否处于失控状态", 
                    "param_name": "isOutOfControl", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置实体是否处于失控状态，截止至网易2.9版本，只对船有效", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetVariant", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取实体的变种属性值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "变种枚举值，获取失败返回-1，详见[猫变种枚举](../../枚举值/CatVariantType.md)、[马变种枚举](../../枚举值/HorseType.md)、[狐狸变种枚举](../../枚举值/FoxType.md)"
            }, 
            "state": [
                {
                    "comment": "获取实体的变种属性值", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetVariant", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "设置实体的变种属性值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "变种枚举值，详见[猫变种枚举](../../枚举值/CatVariantType.md)、[马变种枚举](../../枚举值/HorseType.md)、[狐狸变种枚举](../../枚举值/FoxType.md)", 
                    "param_name": "variantType", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置实体的变种属性值", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetMarkVariant", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取实体的标记变种属性值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "标记变种枚举值，获取失败返回-1，详见[马的标记变种枚举](../../枚举值/HorseSpotType.md)、[V2版村民服装枚举](../../枚举值/VillagerClothingType.md)."
            }, 
            "state": [
                {
                    "comment": "获取实体的标记变种属性值", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetMarkVariant", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "设置实体的标记变种属性值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "变种枚举值，详见[马的标记变种枚举](../../枚举值/HorseSpotType.md)、[V2版村民服装枚举](../../枚举值/VillagerClothingType.md).", 
                    "param_name": "variantType", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置实体的标记变种属性值", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "HasSaddle", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "判断实体是否装备了鞍", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否装备了鞍，调用失败返回None"
            }, 
            "state": [
                {
                    "comment": "判断实体是否装备了鞍", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "HasChest", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "判断生物是否背负了箱子，截止至网易2.9版本，只对羊驼、驴、骡生效", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否背负了箱子，获取失败返回None"
            }, 
            "state": [
                {
                    "comment": "判断生物是否背负了箱子，截止至网易2.9版本，只对羊驼、驴、骡生效", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetChest", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "设置生物是否背负了箱子，截止至网易2.9版本，只对羊驼、驴、骡生效", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "是否背负箱子", 
                    "param_name": "hasChest", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置生物是否背负了箱子，截止至网易2.9版本，只对羊驼、驴、骡生效", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsEating", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "判断非玩家实体是否在进食", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否在进食"
            }, 
            "state": [
                {
                    "comment": "判断非玩家实体是否在进食", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsStunned", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "判断是否处于眩晕状态，截止至网易2.9版本，仅对劫掠兽有效", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否处于眩晕状态"
            }, 
            "state": [
                {
                    "comment": "判断是否处于眩晕状态，截止至网易2.9版本，仅对劫掠兽有效", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsRoaring", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "判断是否处于咆哮状态，截止至网易2.9版本，仅对劫掠兽有效", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否处于咆哮状态"
            }, 
            "state": [
                {
                    "comment": "判断是否处于咆哮状态，截止至网易2.9版本，仅对劫掠兽有效", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsPersistent", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "判断是否为持久性生物", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否为持久性生物"
            }, 
            "state": [
                {
                    "comment": "判断是否为持久性生物", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetLeashHolder", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取实体被使用拴绳牵引时牵引者的ID", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "牵引者ID，调用失败或者没有则返回 -1"
            }, 
            "state": [
                {
                    "comment": "获取实体被使用拴绳牵引时牵引者的ID", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetLeashHolder", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "为实体添加牵引者，与原版拴绳的作用相同，详见<a href=\"https://zh.minecraft.wiki/w/%E6%8B%B4%E7%BB%B3\">基岩版栓绳介绍</a>", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "牵引者Id", 
                    "param_name": "holderId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "为实体添加牵引者，与原版拴绳的作用相同", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetTradeLevel", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取村民的交易等级", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "村民的交易等级，调用失败返回 -1，详见[TradeLevelType](../../枚举值/TradeLevelType.md)"
            }, 
            "state": [
                {
                    "comment": "获取村民的交易等级", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetTradeLevel", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "设置村民的交易等级", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "村民的交易等级，详见[TradeLevelType](../../枚举值/TradeLevelType.md)", 
                    "param_name": "holderId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "设置村民的交易等级", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetDeathTime", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取生物死亡后持续的时间（刻，1秒20刻），用于控制死亡动画。0表示生物未死亡。", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "死亡时间，0表示生物未死亡, -1为调用失败"
            }, 
            "state": [
                {
                    "comment": "获取生物死亡后持续的时间（刻，1秒20刻），用于控制死亡动画。0表示生物未死亡。", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsNaturallySpawned", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取生物是否为自然生成的", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否为自然生成的，调用失败返回None"
            }, 
            "state": [
                {
                    "comment": "获取生物是否为自然生成的", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsPregnant", 
            "path": "server.component.entityDefinitionsCompServer.EntityDefinitionsCompServer", 
            "desc": "获取生物是否怀孕，截止至网易2.9版本，只对海龟有效", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否怀孕，调用失败返回None"
            }, 
            "state": [
                {
                    "comment": "获取生物是否怀孕，截止至网易2.9版本，只对海龟有效", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.posCompServer.PosComponentServer": [
        {
            "name": "SetPos", 
            "path": "server.component.posCompServer.PosComponentServer", 
            "desc": "设置实体位置", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "xyz值", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "在床上时调用该接口会返回False", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "修改行为与使用tp命令一致", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "jishaobin"
                }, 
                {
                    "comment": "修改文档类型描述", 
                    "operation": "调整", 
                    "version": "3.4", 
                    "author": "bailei"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPos", 
            "path": "server.component.posCompServer.PosComponentServer", 
            "desc": "获取实体位置", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "位置信息"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetFootPos", 
            "path": "server.component.posCompServer.PosComponentServer", 
            "desc": "获取实体脚所在的位置", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "位置信息"
            }, 
            "state": [
                {
                    "comment": "获取实体脚底的位置（除了睡觉时）", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetFootPos", 
            "path": "server.component.posCompServer.PosComponentServer", 
            "desc": "设置实体脚底所在的位置", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "实体脚所在的位置", 
                    "param_name": "footPos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "在床上时调用该接口会返回False", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "设置实体脚所在的位置", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "修改行为与使用tp命令一致", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "jishaobin"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.frameAniControlComp.FrameAniControlComp": [
        {
            "name": "Play", 
            "path": "client.component.frameAniControlComp.FrameAniControlComp", 
            "desc": "播放序列帧", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "Pause", 
            "path": "client.component.frameAniControlComp.FrameAniControlComp", 
            "desc": "暂停播放，序列帧定格在当前时刻，再次调用Play时继续播放", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "暂停序列帧播放", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Stop", 
            "path": "client.component.frameAniControlComp.FrameAniControlComp", 
            "desc": "停止序列帧（不是暂停）", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetFaceCamera", 
            "path": "client.component.frameAniControlComp.FrameAniControlComp", 
            "desc": "设置序列帧是否始终朝向摄像机，默认为是", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "True表示朝摄像机", 
                    "param_name": "face", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetLoop", 
            "path": "client.component.frameAniControlComp.FrameAniControlComp", 
            "desc": "设置序列帧是否循环播放，默认为否", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "True表示循环播放", 
                    "param_name": "loop", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetDeepTest", 
            "path": "client.component.frameAniControlComp.FrameAniControlComp", 
            "desc": "设置序列帧是否透视，默认为否", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "False表示透视，则被物体/方块阻挡时仍然能看到序列帧", 
                    "param_name": "deepTest", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetLayer", 
            "path": "client.component.frameAniControlComp.FrameAniControlComp", 
            "desc": "设置序列帧渲染层级，默认层级为1，当层级不为1时表示该特效开启特效分层渲染功能。特效（粒子和帧动画）分层渲染时，层级越高渲染越靠后，层级大的会遮挡层级低的，且同一层级的特效会根据特效的相对位置产生正确的相互遮挡关系。", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "粒子渲染层级，总共包含0-15的层级。", 
                    "param_name": "layer", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetMixColor", 
            "path": "client.component.frameAniControlComp.FrameAniControlComp", 
            "desc": "设置序列帧混合颜色", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "颜色的RGBA值，范围0-1", 
                    "param_name": "color", 
                    "param_type": "tuple(float,float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "增加设置序列帧混合颜色的方法", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetFadeDistance", 
            "path": "client.component.frameAniControlComp.FrameAniControlComp", 
            "desc": "设置序列帧开始自动调整透明度的距离。序列帧与摄像机之间的距离小于该值时会自动调整序列帧的透明度，距离摄像机越近，序列帧越透明", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "自动调整透明度的距离，应为正数，负数将视作零来处理", 
                    "param_name": "fadeDistance", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置序列帧开始自动调整透明度的距离", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "liaoyi"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetUsePointFiltering", 
            "path": "client.component.frameAniControlComp.FrameAniControlComp", 
            "desc": "设置序列帧是否使用点滤波", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "True为使用点滤波，False为使用双线性插值（默认使用）", 
                    "param_name": "use", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置序列帧是否使用点滤波", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "liaoyi"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetGlobal", 
            "path": "client.component.frameAniControlComp.FrameAniControlComp", 
            "desc": "设置序列帧是否是全局的，默认为否", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "True为全局，False为非全局", 
                    "param_name": "isGlobal", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置序列帧是否是全局的", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "chenyuekai"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.auxValueCompClient.AuxValueComponentClient": [
        {
            "name": "GetAuxValue", 
            "path": "client.component.auxValueCompClient.AuxValueComponentClient", 
            "desc": "获取射出的弓箭或投掷出的药水的附加值", 
            "doc_class_path": [
                "实体/附加值"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "具体数值见wiki的“箭”及“药水”页面"
            }, 
            "state": [], 
            "side": "客户端"
        }
    ], 
    "client.component.biomeCompClient.BiomeCompClient": [
        {
            "name": "GetBiomeName", 
            "path": "client.component.biomeCompClient.BiomeCompClient", 
            "desc": "获取客户端当前维度已加载区域某一位置所属的生物群系信息", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "指定位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "该位置所属生物群系name"
            }, 
            "state": [
                {
                    "comment": "获取客户端当前维度已加载区域某一位置所属的生物群系信息", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.expCompServer.ExpComponentServer": [
        {
            "name": "GetPlayerExp", 
            "path": "server.component.expCompServer.ExpComponentServer", 
            "desc": "获取玩家当前等级下的经验值", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "是否为百分比", 
                    "param_name": "isPercent", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "玩家经验值"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "AddPlayerExperience", 
            "path": "server.component.expCompServer.ExpComponentServer", 
            "desc": "增加玩家经验值", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "玩家经验值，可设置负数", 
                    "param_name": "exp", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetOrbExperience", 
            "path": "server.component.expCompServer.ExpComponentServer", 
            "desc": "设置经验球经验", 
            "doc_class_path": [
                "实体/经验球"
            ], 
            "param": [
                {
                    "param_comment": "经验球经验", 
                    "param_name": "exp", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置经验球经验", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "CreateExperienceOrb", 
            "path": "server.component.expCompServer.ExpComponentServer", 
            "desc": "创建专属经验球", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "经验球经验", 
                    "param_name": "exp", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "创建的位置", 
                    "param_name": "position", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "是否专属经验球", 
                    "param_name": "isSpecial", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "创建专属经验球", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetOrbExperience", 
            "path": "server.component.expCompServer.ExpComponentServer", 
            "desc": "获取经验球的经验", 
            "doc_class_path": [
                "实体/经验球"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "经验值，正整数。获取失败的情况下返回-1。"
            }, 
            "state": [
                {
                    "comment": "获取经验球的经验", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "sutao"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerTotalExp", 
            "path": "server.component.expCompServer.ExpComponentServer", 
            "desc": "获取玩家的总经验值", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "总经验值，正整数。获取失败的情况下返回-1。"
            }, 
            "state": [
                {
                    "comment": "获取玩家的总经验值", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "sutao"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerTotalExp", 
            "path": "server.component.expCompServer.ExpComponentServer", 
            "desc": "设置玩家的总经验值", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "总经验值，正整数", 
                    "param_name": "exp", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家的总经验值", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "sutao"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.modAttrCompClient.ModAttrComponentClient": [
        {
            "name": "RegisterUpdateFunc", 
            "path": "client.component.modAttrCompClient.ModAttrComponentClient", 
            "desc": "注册属性值变换时的回调函数，当属性变化时会调用该函数", 
            "doc_class_path": [
                "实体/自定义属性"
            ], 
            "param": [
                {
                    "param_comment": "监听的属性名称", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "监听的回调函数", 
                    "param_name": "func", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "UnRegisterUpdateFunc", 
            "path": "client.component.modAttrCompClient.ModAttrComponentClient", 
            "desc": "反注册属性值变换时的回调函数", 
            "doc_class_path": [
                "实体/自定义属性"
            ], 
            "param": [
                {
                    "param_comment": "监听的属性名称", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "监听的回调函数", 
                    "param_name": "func", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetAttr", 
            "path": "client.component.modAttrCompClient.ModAttrComponentClient", 
            "desc": "设置客户端属性值", 
            "doc_class_path": [
                "实体/自定义属性"
            ], 
            "param": [
                {
                    "param_comment": "属性名称，str的名称建议以mod命名为前缀，避免多个mod之间冲突", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "属性值，支持python基础数据", 
                    "param_name": "paramValue", 
                    "param_type": "any"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetAttr", 
            "path": "client.component.modAttrCompClient.ModAttrComponentClient", 
            "desc": "获取SetAttr设置的属性值", 
            "doc_class_path": [
                "实体/自定义属性"
            ], 
            "param": [
                {
                    "param_comment": "属性名称，str的名称建议以mod命名为前缀，避免多个mod之间冲突", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "属性默认值，属性不存在时返回该默认值，此时属性值依然未设置", 
                    "param_name": "defaultValue", 
                    "param_type": "any"
                }
            ], 
            "return": {
                "return_type": "any", 
                "return_comment": "返回属性值"
            }, 
            "state": [], 
            "side": "客户端"
        }
    ], 
    "server.component.scaleCompServer.ScaleComponentServer": [
        {
            "name": "SetEntityScale", 
            "path": "server.component.scaleCompServer.ScaleComponentServer", 
            "desc": "设置实体的放缩比例大小，设置比例过大会导致游戏卡顿，建议控制在20倍以内。实体的scale的立方乘以包围盒的体积不可超过32768", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "要设置的实体", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "比例因子", 
                    "param_name": "scale", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "成功返回1，失败返回-1"
            }, 
            "state": [
                {
                    "comment": "修复了某些情况大小会被重置的问题", 
                    "operation": "修复", 
                    "version": "1.24", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntityScale", 
            "path": "server.component.scaleCompServer.ScaleComponentServer", 
            "desc": "获取实体的放缩比例大小", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "比例因子"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "client.component.engineTypeCompClient.EngineTypeComponentClient": [
        {
            "name": "GetEngineType", 
            "path": "client.component.engineTypeCompClient.EngineTypeComponentClient", 
            "desc": "获取实体类型，主要用于判断实体是否属于某一类型的生物。", 
            "doc_class_path": [
                "实体/实体类型"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "详见[EntityType枚举](../../枚举值/EntityType.md)"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetEngineTypeStr", 
            "path": "client.component.engineTypeCompClient.EngineTypeComponentClient", 
            "desc": "获取实体的类型名称", 
            "doc_class_path": [
                "实体/实体类型"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "实体类型名称，如minecraft:husk"
            }, 
            "state": [], 
            "side": "客户端"
        }
    ], 
    "client.ui.controls.switchToggleUIControl.SwitchToggleUIControl": [
        {
            "name": "SetToggleState", 
            "path": "client.ui.controls.switchToggleUIControl.SwitchToggleUIControl", 
            "desc": "设置Toggle开关控件的值", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "设置Toggle开关控件是打开还是关闭状态", 
                    "param_name": "is_on", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "实际toggle控件相对路径，由UI编辑器生成的开关控件该参数即为默认值\"/this_toggle\"", 
                    "param_name": "toggle_path", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置Toggle开关控件的值", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "sutao"
                }, 
                {
                    "comment": "新增参数，可调整toggle路径", 
                    "operation": "调整", 
                    "version": "1.25", 
                    "author": "panlei01"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetToggleState", 
            "path": "client.ui.controls.switchToggleUIControl.SwitchToggleUIControl", 
            "desc": "获取Toggle开关控件的状态", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "实际toggle控件相对路径，由UI编辑器生成的开关控件该参数即为默认值\"/this_toggle\"", 
                    "param_name": "toggle_path", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否处于开启状态 True:开启状态 False:关闭状态"
            }, 
            "state": [
                {
                    "comment": "获取Toggle开关控件的值", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.configCompClient.ConfigCompClient": [
        {
            "name": "GetConfigData", 
            "path": "client.component.configCompClient.ConfigCompClient", 
            "desc": "获取本地配置文件中存储的数据", 
            "doc_class_path": [
                "通用/本地存储"
            ], 
            "param": [
                {
                    "param_comment": "配置名称，只能包含字母、数字和下划线字符，另外为了避免addon之间的冲突，建议加上addon的命名空间作为前缀", 
                    "param_name": "configName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "存档配置or全局配置，默认为False", 
                    "param_name": "isGlobal", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "返回本地存储数据"
            }, 
            "state": [
                {
                    "comment": "获取本地配置文件中存储的数据", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetConfigData", 
            "path": "client.component.configCompClient.ConfigCompClient", 
            "desc": "以本地配置文件的方式存储数据", 
            "doc_class_path": [
                "通用/本地存储"
            ], 
            "param": [
                {
                    "param_comment": "配置名称，只能包含字母、数字和下划线字符，另外为了避免addon之间的冲突，建议加上addon的命名空间作为前缀", 
                    "param_name": "configName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "数据", 
                    "param_name": "value", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "为True时是全局配置，否则为存档配置，默认为False", 
                    "param_name": "isGlobal", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "以本地配置文件的方式存储数据", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.dimensionCompClient.DimensionCompClient": [
        {
            "name": "GetLocalTime", 
            "path": "client.component.dimensionCompClient.DimensionCompClient", 
            "desc": "获取当前维度的时间", 
            "doc_class_path": [
                "世界/时间"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "时间，单位为帧数，表示该存档从新建起经过的时间，而非当前游戏天内的时间。mc中一个游戏天相当于现实的20分钟，即24000帧"
            }, 
            "state": [
                {
                    "comment": "获取当前维度的时间", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.modelCompClient.ModelComponentClient": [
        {
            "name": "SetModel", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "替换实体的骨骼模型", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "骨骼模型的名称", 
                    "param_name": "modelName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "替换的骨骼模型实例的id。失败返回-1"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetModelId", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "获取骨骼模型的Id，主要用于特效绑定骨骼模型", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "当前骨骼模型实例的id"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ResetModel", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "恢复实体为原版模型", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetBonePositionFromMinecraftObject", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "获取原版模型的骨骼世界坐标", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "骨骼名称", 
                    "param_name": "boneName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "世界坐标, 未找到骨骼时返回None"
            }, 
            "state": [
                {
                    "comment": "获取原版模型的骨骼世界坐标", 
                    "operation": "新增", 
                    "version": "3.0", 
                    "author": "qyk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "PlayAnim", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "播放骨骼动画", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "动画名称", 
                    "param_name": "aniName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否循环播放", 
                    "param_name": "isLoop", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "需要指定的模型id，默认为None，表示使用CreateModel时传入的entityID挂接的模型", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "增加modelId参数，用于选择指定模型", 
                    "operation": "调整", 
                    "version": "2.9", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPlayingAnimList", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "获取指定的骨骼模型中正处于播放状态的骨骼动画名称列表", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "骨骼模型Id", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "骨骼动画名称列表"
            }, 
            "state": [
                {
                    "comment": "获取指定的骨骼模型中正在播放的骨骼动画名称列表", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetAnimLength", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "获取某个骨骼动画的长度，单位为秒", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "骨骼动画名称", 
                    "param_name": "aniName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "需要指定的模型id，默认为None，表示使用CreateModel时传入的entityID挂接的模型", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "骨骼动画长度"
            }, 
            "state": [
                {
                    "comment": "增加modelId参数，用于选择指定模型", 
                    "operation": "调整", 
                    "version": "2.9", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetAnimSpeed", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置某个骨骼动画的播放速度", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "骨骼动画名称", 
                    "param_name": "aniName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "速度倍率", 
                    "param_name": "speed", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "需要指定的模型id，默认为None，表示使用CreateModel时传入的entityID挂接的模型", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "增加modelId参数，用于选择指定模型", 
                    "operation": "调整", 
                    "version": "2.9", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "BindModelToModel", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "在骨骼模型上挂接其他骨骼模型", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "挂接的骨骼名称", 
                    "param_name": "boneName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "要挂接的骨骼模型名称", 
                    "param_name": "modelName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "挂到骨骼上的骨骼模型的Id，失败返回-1"
            }, 
            "state": [
                {
                    "comment": "挂接的模型不再会与实体模型播放相同的动作，现在可以对挂接模型播放单独的骨骼动画。", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }, 
                {
                    "comment": "在骨骼模型上挂接其他骨骼模型", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "UnBindModelToModel", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "取消骨骼模型上挂接的某个骨骼模型。取消挂接后，这个modelId的模型便会销毁，无法再使用，如果是临时隐藏可以使用HideModel", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "要取消挂接的骨骼模型的id", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "取消骨骼模型上挂接的某个骨骼模型", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "BindModelToEntity", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "实体替换骨骼模型后，再往上挂接其他骨骼模型。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "挂接的骨骼名称", 
                    "param_name": "boneName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "要挂接的骨骼模型名称", 
                    "param_name": "modelName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "偏移量", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "旋转", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "缩放", 
                    "param_name": "scale", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "挂到骨骼上的骨骼模型的Id，失败返回-1"
            }, 
            "state": [
                {
                    "comment": "挂接的模型不再会与实体模型播放相同的动作，现在可以对挂接模型播放单独的骨骼动画。", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }, 
                {
                    "comment": "给替换骨骼模型的实体的骨骼上挂接其他骨骼模型。", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "czh"
                }, 
                {
                    "comment": "新增scale参数控制挂接的模型缩放", 
                    "operation": "调整", 
                    "version": "3.0", 
                    "author": "qyk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "UnBindModelToEntity", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "取消实体上挂接的某个骨骼模型。取消挂接后，这个modelId的模型便会销毁，无法再使用，如果是临时隐藏可以使用HideModel", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "要取消挂接的骨骼模型的id", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "取消挂接是否成功"
            }, 
            "state": [
                {
                    "comment": "取消实体上挂接的某个骨骼模型", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetAllBindModelToEntity", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "获取实体上某个骨骼上挂接的所有骨骼模型的id", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "要获取的骨骼名称", 
                    "param_name": "boneName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "list(int)", 
                "return_comment": "骨骼模型的id的列表"
            }, 
            "state": [
                {
                    "comment": "获取实体上挂接的骨骼模型", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetTexture", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置骨骼模型的贴图，该接口与SetModelTexture功能相同，但属于客户端接口。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "贴图路径，以textures\\models为当前路径的相对路径", 
                    "param_name": "texture", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "需要指定的模型id，默认为None，表示使用CreateModel时传入的entityID挂接的模型", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "增加modelId参数，用于选择指定模型", 
                    "operation": "调整", 
                    "version": "2.9", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetTexture", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "获取骨骼模型的贴图路径", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "需要指定的模型id，默认为None，表示使用CreateModel时传入的entityID挂接的模型", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "贴图路径, 以textures\\models为当前路径的相对路径"
            }, 
            "state": [
                {
                    "comment": "获取模型贴图名称路径", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "huangxiaojie03"
                }, 
                {
                    "comment": "增加modelId参数，用于选择指定模型", 
                    "operation": "调整", 
                    "version": "2.9", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSkin", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "更换原版自定义皮肤", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "贴图路径，以textures/models为当前路径的相对路径", 
                    "param_name": "skin", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ResetSkin", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "还原默认皮肤", 
            "doc_class_path": [
                "玩家/渲染"
            ], 
            "param": [
                {
                    "param_comment": "是否还原成Steve默认皮肤, 默认为True。当isSteve为False时，则还原成资源中心中购买并穿戴的皮肤", 
                    "param_name": "isSteve", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "还原默认皮肤", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "huangxiaojie03"
                }, 
                {
                    "comment": "增加isSteve参数，用于指定是否还原到Steve模型的皮肤,默认为True。当isSteve为False时，则还原成资源中心中购买并穿戴的皮肤", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetLegacyBindRot", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "用于修复特效挂接到骨骼时的方向", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "设置为False时，可以使特效与骨骼方向一致", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "需要指定的模型id，默认为None，表示使用CreateModel时传入的entityID挂接的模型", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "为了适配studio，调整为骨骼模型创建时默认为False，不再需要设置。但是对于旧版特效，仍然可以设置为True来适配。", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "czh"
                }, 
                {
                    "comment": "增加modelId参数，用于选择指定模型", 
                    "operation": "调整", 
                    "version": "2.9", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBoneWorldPos", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "获取骨骼的坐标", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "骨骼名称", 
                    "param_name": "boneName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "需要指定的模型id，默认为None，表示使用CreateModel时传入的entityID挂接的模型", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "位置坐标"
            }, 
            "state": [
                {
                    "comment": "增加modelId参数，用于选择指定模型", 
                    "operation": "调整", 
                    "version": "2.9", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetEntityBoneWorldPos", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "获取换了骨骼模型的实体的骨骼坐标", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "骨骼名称", 
                    "param_name": "boneName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "位置坐标"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "CreateFreeModel", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "创建自由的模型（无需绑定Entity）", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "模型名称", 
                    "param_name": "modelName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "创建成功返回 modelId，创建失败返回 0"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveFreeModel", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "移除自由模型", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "要移除的modelId", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功移除"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetFreeModelPos", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置自由模型的位置", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "要设置的modelId", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "要设置的位置X轴参数", 
                    "param_name": "x", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "要设置的位置Y轴参数", 
                    "param_name": "y", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "要设置的位置Z轴参数", 
                    "param_name": "z", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功设置"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetFreeModelRot", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置自由模型的方向", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "要设置的modelId", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "沿X方向的旋转参数", 
                    "param_name": "x", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "沿Y方向的旋转参数", 
                    "param_name": "y", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "沿Z方向的旋转参数", 
                    "param_name": "z", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功设置"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetFreeModelAniSpeed", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置自由模型动画的播放速度", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "要设置的modelId", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "要设置的动画名称", 
                    "param_name": "aniName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "播放速度,速度上限为动画帧数,正负数效果相同", 
                    "param_name": "speed", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功设置"
            }, 
            "state": [
                {
                    "comment": "设置自由模型动画的播放速度", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "xusifan"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetFreeModelScale", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置自由模型的大小", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "要设置的modelId", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "沿X方向的比例因子", 
                    "param_name": "x", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "沿Y方向的比例因子", 
                    "param_name": "y", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "沿Z方向的比例因子", 
                    "param_name": "z", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功设置"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ModelPlayAni", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "纯骨骼播放动作。 支持骨骼动画混合，可参考SetAnimationBoneMask接口以及RegisterAnim1DControlParam接口说明。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "需要设置的模型id，包括实体模型以及自由模型。", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "要设置的动画名称", 
                    "param_name": "aniName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否循环播放，默认为 False", 
                    "param_name": "isLoop", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "播放时是与当前动画混合还是中止当前动画的播放，默认False，即中止当前动画播放。设置为True时，将允许即将播放的动画进行混合。注意，动画混合仅在相同层级的动画之间进行。若当前播放的动画与即将播放的动画层级不一样，则isBlended参数无效。", 
                    "param_name": "isBlended", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "设置骨骼动画的层级，范围为0~255，默认为0。注意，如果播放的动画已经存在，则会将原有的动画层级覆盖。动画层级越大，则优先度越高，骨骼模型的骨骼优先播放优先度最高的动画。", 
                    "param_name": "layer", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增动画混合功能, 新增设置动画层级参数，增加是否播放成功的返回值。", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "HideModel", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "隐藏纯模型", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "要隐藏的modelId", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "None", 
                "return_comment": "无返回值"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ShowModel", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "显示纯模型", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "要显示的modelId", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "None", 
                "return_comment": "无返回值"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetFreeModelBoundingBox", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置自由模型的包围盒", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "要设置的modelId", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "包围盒最小点", 
                    "param_name": "min", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "包围盒最大点", 
                    "param_name": "max", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "成功返回True，失败返回False"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "BindEntityToEntity", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "绑定骨骼模型跟随其他entity,如果当前entity是本地玩家，摄像机也跟随其他entity", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "绑定跟随的实体Id", 
                    "param_name": "bindEntityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "False表示失败，True表示成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ResetBindEntity", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "取消目标entity的绑定实体，取消后不再跟随任何其他entity", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "False表示失败，True表示成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetModelOffset", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "模型增加偏移量", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "偏移向量", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "BindItemToBone", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "将使用了骨骼模型的玩家的手持物绑定到指定的骨骼上", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "指定挂接的骨骼模型id", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "指定骨骼模型的骨骼名", 
                    "param_name": "boneName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "绑定手持物的slot，0为主手，1为副手，默认值为0", 
                    "param_name": "bindSlot", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "偏移量，默认值为(0,0,0)", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "旋转角度，默认值为(0,0,0)", 
                    "param_name": "rotation", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "缩放，默认值为(1,1,1)", 
                    "param_name": "scale", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "将使用了骨骼模型的玩家的手持物绑定到指定的骨骼上", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetModelPerspectiveEffect", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置模型透视效果。注：只对自定义骨骼模型生效", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "是否显示透视颜色", 
                    "param_name": "isPerspective", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "透视颜色的RGBA值，范围0-1", 
                    "param_name": "color", 
                    "param_type": "tuple(float,float,float,float)"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetEntityOpacity", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置骨骼模型的透明度，只能对骨骼模型生效，如果设置的是原版模型，则模型的影子会被隐藏。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "透明度值，取值范围为[0, 1]，值越小越透明", 
                    "param_name": "opacity", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "更正接口功能作用范围为：只对骨骼模型生效", 
                    "operation": "调整", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ShowCommonHurtColor", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置挂接骨骼模型的实体是否显示通用的受伤变红效果", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "是否显示", 
                    "param_name": "show", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置挂接骨骼模型的实体是否显示通用的受伤变红效果", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetShowArmModel", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置使用骨骼模型后切换至第一人称时是否显示手部模型。需要先为骨骼模型定义arm_model，arm_model的定义可参考demo示例-AwesomeMod中的resourcePack/models/netease_models.json中的大天狗模型定义", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "模型id", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否显示", 
                    "param_name": "show", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置使用骨骼模型后切换至第一人称时是否显示手部模型", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetExtraUniformValue", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置shader中特定Uniform的值", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "要设置的modelId", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "要设置的uniform下标，目前支持4个，范围为1到4。分别对应Shader中的EXTRA_VECTOR1,EXTRA_VECTOR2,EXTRA_VECTOR3,EXTRA_VECTOR4", 
                    "param_name": "uniformIndex", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "要设置的vec4的值。初始值为(0.0, 0.0, 0.0, 0.0)", 
                    "param_name": "vec4data", 
                    "param_type": "tuple(float,float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置shader中特定Uniform的值", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetExtraUniformValue", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "获取在骨骼模型shader中使用的自定义变量Uniform的值", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "需要查询的骨骼模型modelId", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "需要设置的自定义变量的下标，值范围为1~4，分别对应Shader中的EXTRA_VECTOR1,EXTRA_VECTOR2,EXTRA_VECTOR3,EXTRA_VECTOR4", 
                    "param_name": "uniformIndex", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float,float)", 
                "return_comment": "返回的对应自定义变量的值。获取失败则返回None。"
            }, 
            "state": [
                {
                    "comment": "获取在骨骼模型shader中使用的自定义变量Uniform的值", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelStopAni", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "暂停指定的骨骼动画", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "需要设置的模型id，包括实体模型以及自由模型", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "动画名称", 
                    "param_name": "aniName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "增加停止播放骨骼动画接口", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetAnimationBoneMask", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置是否屏蔽动画中指定的骨骼的动画，若开启骨骼屏蔽后，该骨骼将不再播放该动画中的动作。通过屏蔽指定骨骼的动画可实现同一个骨骼模型同时在不同骨骼上播放不同的动作动画，从而实现快捷的动作融合。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "需要设置的模型id，包括实体模型以及自由模型", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "动画名称", 
                    "param_name": "aniName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "骨骼名称列表", 
                    "param_name": "boneNamesList", 
                    "param_type": "list(str)"
                }, 
                {
                    "param_comment": "是否启用该骨骼的动画。True为不屏蔽，启动该骨骼的动画。False为屏蔽，不启动该骨骼的动画。", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "True为对该骨骼及其子骨骼生效，False为仅对该骨骼生效，默认为True", 
                    "param_name": "applyToChild", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增动作融合功能接口：设置屏蔽骨骼动画中的指定骨骼", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetAnimationAllBoneMask", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置是否屏蔽动画中所有骨骼的动画，若开启骨骼屏蔽后，该骨骼将不再播放该动画中的动作。该接口会对该动画中所有骨骼生效，可通过参数ignoreBoneList来指定不受影响的骨骼名称。通过屏蔽指定骨骼的动画可实现同一个骨骼模型同时在不同骨骼上播放不同的动作动画，从而实现快捷的动作融合。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "需要设置的模型id，包括实体模型以及自由模型", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "动画名称", 
                    "param_name": "aniName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "忽视的骨骼名称列表。在这个列表中的骨骼将不会被影响。输入空列表时则对所有骨骼执行这次设置。", 
                    "param_name": "ignoreBonesList", 
                    "param_type": "list(str)"
                }, 
                {
                    "param_comment": "是否启用该骨骼的动画。True为不屏蔽，启动该骨骼的动画。False为屏蔽，不启动该骨骼的动画。", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "True为对ignoreBoneList中的骨骼的子骨骼也生效，False为仅对ignoreBoneList中的骨骼生效，默认为True。若ignoreBoneList为空列表，则applyToChild无效果。", 
                    "param_name": "applyToChild", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增动作融合功能接口：设置屏蔽骨骼动画中的所有骨骼", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CancelAllBoneMask", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "取消动画中的所有骨骼屏蔽。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "需要设置的模型id，包括实体模型以及自由模型", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "动画名称", 
                    "param_name": "aniName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增动作融合功能接口：取消屏蔽骨骼动画中的骨骼屏蔽", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetAnimLayer", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置骨骼动画的层级，动画层级越大，则优先度越高，骨骼模型的骨骼优先播放优先度最高的动画，相同层级的动画则优先播放率先播放的动画。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "需要设置的模型id，包括实体模型以及自由模型", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "动画名称", 
                    "param_name": "aniName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画层级， 正整数，范围为0~255", 
                    "param_name": "layer", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增动作融合功能接口：设置骨骼动画层级", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RegisterAnim1DControlParam", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "当同时播放多个骨骼动画时，新建用于控制动画进行1D线性混合的参数。目前线性混合仅支持对两个动画进行混合。新建的参数值范围为[0,1]。指定的骨骼将会按照这个参数的值对两个动画进行线性混合。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "骨需要设置的模型id，包括实体模型以及自由模型。", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "混合的第一个动画名称，当1D参数的值为0时指定的骨骼仅播放这个动画。", 
                    "param_name": "leftAniName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "混合的第二个动画名称，当1D参数的值为1时指定的骨骼仅播放这个动画。", 
                    "param_name": "rightAniName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "自定义的1D参数名称。该参数新建后的初始值为0。", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增动作融合功能接口：注册用于控制两个动画融合的1D控制参数", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetAnim1DControlParam", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "新建动画的1D控制参数后，使用该接口对相应的参数进行控制。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "需要设置的模型id，包括实体模型以及自由模型。", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "使用接口RegisterAnim1DControlParam所新建的自定义1D参数名称。该参数新建后的初始值为0。", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "参数的值，范围为[0,1]。当1D参数的值为0时仅播放接口RegisterAnim1DControlParam中的leftAniName参数指定的动画，当1D参数的值为1时仅播放接口RegisterAnim1DControlParam中的rightAniName参数指定的动画", 
                    "param_name": "value", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增动作融合功能接口：设置用于控制两个动画融合的1D控制参数的值", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RegisterAnim1DMultiControlParam", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "当同时播放多个骨骼动画时，注册用于根据权重控制多动画进行混合的参数", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "模型id", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "自定义的多动作混合参数名称", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "需要混合的动作列表", 
                    "param_name": "animList", 
                    "param_type": "list(str)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增多动作融合功能接口：注册用于根据权重控制多动画进行混合的参数", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "hdy"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetAnim1DMultiControlParam", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "新建动画的1D控制参数后，设置用于根据权重控制多动画进行混合的参数", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "模型id", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "自定义的多动作混合参数名称", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动作权重表，可在表中设置每个动作的混合权重", 
                    "param_name": "animWeightDict", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增多动作融合功能接口：设置用于根据权重控制多动画进行混合的参数", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "hdy"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveAnim1DMultiControlParam", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "删除用于根据权重控制多动画进行混合的参数", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "模型id", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "自定义的多动作混合参数名称", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置删除成功"
            }, 
            "state": [
                {
                    "comment": "新增多动作融合功能接口：删除用于根据权重控制多动画进行混合的参数", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "hdy"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetEntityShadowShow", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置实体打开/关闭影子渲染", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "True为打开影子渲染，False为关闭影子渲染", 
                    "param_name": "flag", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置实体打开/关闭影子渲染", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetModelPartVisible", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "对骨骼模型中指定的骨骼进行渲染屏蔽，屏蔽后该骨骼不会被渲染出来。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "需要进行屏蔽操作的骨骼模型Id。", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "骨骼模型中的骨骼名称。", 
                    "param_name": "boneName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "显示或者屏蔽。True为显示，False为屏蔽", 
                    "param_name": "visible", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增屏蔽骨骼模型中指定骨骼渲染的接口", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetModelMaterial", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置骨骼模型所使用的的材质，除了可以设置骨骼模型所使用的<a href=\"../../../mcguide/16-美术/6-模型和动作/04-骨骼模型的使用.html#7.模型使用自定义材质及更多贴图\">自定义材质</a>以外，也可对单个骨骼设置所使用的<a href=\"../../../mcguide/16-美术/6-模型和动作/04-骨骼模型的使用.html#7.模型使用自定义材质及更多贴图\">自定义材质</a>。如果需要设置单个骨骼所使用的材质，需要先在netease_model.json下设置\"useSplitMeshes\"字段为true。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "需要进行设置材质操作的骨骼模型Id。", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "需要设置的自定义材质的名称。该材质为GPU骨骼渲染下所使用的材质，大多数情况下只会使用到这个材质。", 
                    "param_name": "material", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "需要设置的自定义材质的名称，该材质为针对部分低端机设备所使用的CPU蒙皮材质，大多数情况下不会使用到这个参数，默认值为空字符串。如果该参数为空，或者所填入的CPU材质名称不存在，则会使用GPU材质替代。因此此时如果GPU材质设置成功，则接口也会返回True.", 
                    "param_name": "materialcpu", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "骨骼模型中的骨骼名称。默认值为空字符串。", 
                    "param_name": "boneName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增设置骨骼模型的所使用的自定义材质接口", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetModelMultiPassMaterial", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "设置骨骼模型多pass中使用到的<a href=\"../../../mcguide/16-美术/6-模型和动作/04-骨骼模型的使用.html#9.骨骼模型自定义多pass\">材质列表</a>，也可对单个骨骼设置所使用的自定义多Pass材质。如果需要设置单个骨骼所使用的多Pass材质，需要先在netease_model.json下设置\"useSplitMeshes\"字段为true。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "需要进行设置材质操作的骨骼模型Id。", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "多pass所使用的材质列表。", 
                    "param_name": "materialList", 
                    "param_type": "list(str)"
                }, 
                {
                    "param_comment": "多pass所使用的CPU蒙皮材质列表。这些材质为针对部分低端机设备所使用的CPU蒙皮材质。默认值为None。大多数情况下不会使用到这个参数，如果该参数为None，或者为空列表，或者所填入的CPU材质名称不存在，则会使用GPU材质替代。因此此时如果GPU材质设置成功，则接口也会返回True.", 
                    "param_name": "materialCpuList", 
                    "param_type": "list(str)"
                }, 
                {
                    "param_comment": "骨骼模型中的骨骼名称。默认值为空字符串。", 
                    "param_name": "boneName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增设置骨骼模型的所使用的多Pass材质接口", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetModelMaterial", 
            "path": "client.component.modelCompClient.ModelComponentClient", 
            "desc": "获取骨骼模型的正在使用的材质名称，也可获取骨骼模型中指定骨骼所使用的<a href=\"../../../mcguide/16-美术/6-模型和动作/04-骨骼模型的使用.html#7.模型使用自定义材质及更多贴图\">材质名称</a>。如果获取指定骨骼所使用的材质，需要先在netease_model.json下设置\"useSplitMeshes\"字段为true。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "需要进行设置材质操作的骨骼模型Id。", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "骨骼模型中的骨骼名称。默认值为空字符串。", 
                    "param_name": "boneName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "正在使用的材质名称列表"
            }, 
            "state": [
                {
                    "comment": "新增获取骨骼模型的正在使用的材质名称的接口", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.gravityCompServer.GravityComponentServer": [
        {
            "name": "SetGravity", 
            "path": "server.component.gravityCompServer.GravityComponentServer", 
            "desc": "设置实体的重力因子，当生物重力因子为0时则应用世界的重力因子", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "负数，表示每帧向下的速度", 
                    "param_name": "gravity", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetGravity", 
            "path": "server.component.gravityCompServer.GravityComponentServer", 
            "desc": "获取实体的重力因子，当生物重力因子为0时则应用世界的重力因子", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "重力因子"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetJumpPower", 
            "path": "server.component.gravityCompServer.GravityComponentServer", 
            "desc": "设置生物跳跃力度，0.42表示正常水平", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "跳跃力度，正常是0.42", 
                    "param_name": "jumpPower", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置生物跳跃力度", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "gmy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetJumpPower", 
            "path": "server.component.gravityCompServer.GravityComponentServer", 
            "desc": "获取生物跳跃力度，0.42表示正常水平", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "返回生物跳跃力度"
            }, 
            "state": [
                {
                    "comment": "获取生物跳跃力度", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "wkm"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.actorCollidableCompServer.ActorCollidableCompServer": [
        {
            "name": "SetActorCollidable", 
            "path": "server.component.actorCollidableCompServer.ActorCollidableCompServer", 
            "desc": "设置实体是否可碰撞", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "0:可碰撞  1:不可碰撞", 
                    "param_name": "isCollidable", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True表示设置成功"
            }, 
            "state": [
                {
                    "comment": "设置实体是否可碰撞", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.controlAiCompServer.ControlAiCompServer": [
        {
            "name": "SetBlockControlAi", 
            "path": "server.component.controlAiCompServer.ControlAiCompServer", 
            "desc": "设置屏蔽生物原生AI", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "是否保留AI，False为屏蔽", 
                    "param_name": "isBlock", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "屏蔽AI时是否冻结动作，默认为False，仅当isBlock为False时生效。重进世界会恢复成初始动作", 
                    "param_name": "freezeAnim", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "原版模型关闭AI时动作也会冻结", 
                    "operation": "调整", 
                    "version": "2.0", 
                    "author": "czh"
                }, 
                {
                    "comment": "新增是否冻结动作的参数", 
                    "operation": "调整", 
                    "version": "2.1", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBlockControlAi", 
            "path": "server.component.controlAiCompServer.ControlAiCompServer", 
            "desc": "获取生物原生AI是否被屏蔽", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "AI是否保留。False为AI被屏蔽。"
            }, 
            "state": [
                {
                    "comment": "获取生物原生AI是否被屏蔽", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.modelCompServer.ModelComponentServer": [
        {
            "name": "SetModel", 
            "path": "server.component.modelCompServer.ModelComponentServer", 
            "desc": "设置骨骼模型", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "模型名称,值为\"\"时重置模型", 
                    "param_name": "modelName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetModelTexture", 
            "path": "server.component.modelCompServer.ModelComponentServer", 
            "desc": "设置骨骼模型贴图，该接口与SetTexture功能相同，但属于服务端接口。", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "贴图路径，以textures\\models为当前路径的相对路径", 
                    "param_name": "texture", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetModelOffset", 
            "path": "server.component.modelCompServer.ModelComponentServer", 
            "desc": "设置骨骼模型相对于局部坐标系的偏移量，初始值为(0, 0, 0)", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "偏移量", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetModelName", 
            "path": "server.component.modelCompServer.ModelComponentServer", 
            "desc": "获取实体的模型名称", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "模型名称"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "ShowCommonHurtColor", 
            "path": "server.component.modelCompServer.ModelComponentServer", 
            "desc": "设置挂接骨骼模型的实体是否显示通用的受伤变红效果", 
            "doc_class_path": [
                "模型"
            ], 
            "param": [
                {
                    "param_comment": "是否显示", 
                    "param_name": "show", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置挂接骨骼模型的实体是否显示通用的受伤变红效果", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.timeCompClient.TimeComponentClient": [
        {
            "name": "GetTime", 
            "path": "client.component.timeCompClient.TimeComponentClient", 
            "desc": "获取当前世界时间", 
            "doc_class_path": [
                "世界/时间"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "当前时间，单位为帧数，表示该存档从新建起经过的时间，而非当前游戏天内的时间。mc中一个游戏天相当于现实的20分钟，即24000帧"
            }, 
            "state": [
                {
                    "comment": "客户端获取当前世界时间", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.extraServerApi": [
        {
            "name": "RegisterComponent", 
            "path": "server.extraServerApi", 
            "desc": "用于将组件注册到引擎中", 
            "doc_class_path": [
                "通用/Component"
            ], 
            "param": [
                {
                    "param_comment": "命名空间，建议为mod名字", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件名称", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件类路径，路径从脚本的第一层开始算起", 
                    "param_name": "clsPath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "注册成功与否"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "RegisterSystem", 
            "path": "server.extraServerApi", 
            "desc": "用于将系统注册到引擎中，引擎会创建一个该系统的实例，并在退出游戏时回收。系统可以执行我们引擎赋予的基本逻辑，例如监听事件、执行Tick函数、与客户端进行通讯等。", 
            "doc_class_path": [
                "通用/System"
            ], 
            "param": [
                {
                    "param_comment": "命名空间，建议为mod名字", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "系统名称，自定义名称，可以使用英文、拼音和下划线，建议尽量个性化", 
                    "param_name": "systemName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件类路径，路径从脚本的第一层开始算起", 
                    "param_name": "clsPath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "ServerSystem", 
                "return_comment": "返回具体系统的实例"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetSystem", 
            "path": "server.extraServerApi", 
            "desc": "获取已注册的系统", 
            "doc_class_path": [
                "通用/System"
            ], 
            "param": [
                {
                    "param_comment": "命名空间，建议为mod名字", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "系统名称，自定义名称，可以使用英文、拼音和下划线，建议尽量个性化", 
                    "param_name": "systemName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "ServerSystem", 
                "return_comment": "返回具体系统的实例"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "CreateComponent", 
            "path": "server.extraServerApi", 
            "desc": "给实体创建服务端组件", 
            "doc_class_path": [
                "通用/Component"
            ], 
            "param": [
                {
                    "param_comment": "该组件属主的实体id", 
                    "param_name": "entityId", 
                    "param_type": "str或int"
                }, 
                {
                    "param_comment": "组件的命名空间，registerComponent的namespace", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件的名字", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "BaseComponent", 
                "return_comment": "组件实例"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetComponent", 
            "path": "server.extraServerApi", 
            "desc": "获取实体的服务端组件。一般用来判断某个组件是否创建过，其他情况请使用CreateComponent", 
            "doc_class_path": [
                "通用/Component"
            ], 
            "param": [
                {
                    "param_comment": "该组件属主的实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件的命名空间，registerComponent的namespace", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件的名字", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "BaseComponent", 
                "return_comment": "组件实例或者None"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "DestroyComponent", 
            "path": "server.extraServerApi", 
            "desc": "删除实体的服务端组件", 
            "doc_class_path": [
                "通用/Component"
            ], 
            "param": [
                {
                    "param_comment": "该组件属主的实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件的命名空间，registerComponent的namespace", 
                    "param_name": "nameSpace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "组件的名字", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetEngineCompFactory", 
            "path": "server.extraServerApi", 
            "desc": "获取引擎组件的工厂，通过工厂可以创建服务端的引擎组件", 
            "doc_class_path": [
                "通用/Component"
            ], 
            "param": [], 
            "return": {
                "return_type": "EngineCompFactoryServer", 
                "return_comment": "服务端引擎组件工厂"
            }, 
            "state": [
                {
                    "comment": "获取组件的工厂，服务端引擎组件通过该工厂创建", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetMinecraftEnum", 
            "path": "server.extraServerApi", 
            "desc": "用于获取[枚举值文档](../../枚举值/索引.md)中的枚举值", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [], 
            "return": {
                "return_type": "minecraftEnum", 
                "return_comment": "枚举集合类"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetServerSystemCls", 
            "path": "server.extraServerApi", 
            "desc": "用于获取服务器system基类。实现新的system时，需要继承该接口返回的类", 
            "doc_class_path": [
                "通用/System"
            ], 
            "param": [], 
            "return": {
                "return_type": "type(ServerSystem)", 
                "return_comment": "服务端系统类"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetComponentCls", 
            "path": "server.extraServerApi", 
            "desc": "用于获取服务器component基类。实现新的component时，需要继承该接口返回的类", 
            "doc_class_path": [
                "通用/Component"
            ], 
            "param": [], 
            "return": {
                "return_type": "type(BaseComponent)", 
                "return_comment": "组件基类"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetEngineNamespace", 
            "path": "server.extraServerApi", 
            "desc": "获取引擎事件的命名空间。监听引擎事件时，namespace传该接口返回的namespace", 
            "doc_class_path": [
                "通用/事件"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "引擎的命名空间"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetEngineSystemName", 
            "path": "server.extraServerApi", 
            "desc": "获取引擎系统名。监听引擎事件时，systemName传该接口返回的systemName", 
            "doc_class_path": [
                "通用/事件"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "引擎的systemName"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetLevelId", 
            "path": "server.extraServerApi", 
            "desc": "获取levelId。某些组件需要levelId创建，可以用此接口获取levelId。其中level即为当前地图的游戏。", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "当前地图的levelId"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetEngineActor", 
            "path": "server.extraServerApi", 
            "desc": "获取所有维度中已加载的所有实体（不包含玩家）。", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "当前地图中的所有实体信息，key：实体id，value：实体信息字典"
            }, 
            "state": [
                {
                    "comment": "返回结果中去掉当前已经确定要移除的实体", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "getEntitiesOrBlockFromRay", 
            "path": "server.extraServerApi", 
            "desc": "从指定位置发射一条射线，获取与射线相交的实体和方块", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "生成的维度（必填）（0为主世界，1为下界，2为末地）", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "指定位置坐标（必填）", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "射线方向单位向量（必填）", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "射线长度(一个方块长度为1)（选填，默认16）", 
                    "param_name": "distance", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否穿透，如穿透，则返回所有射线穿过的实体或方块，如不穿透，则返回第一个碰撞到的实体或方块（选填，默认为False）", 
                    "param_name": "isThrough", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "[RayFilterType枚举](../../枚举值/RayFilterType.md)（选填，默认为serverApi.GetMinecraftEnum().RayFilterType.OnlyEntities）", 
                    "param_name": "filterType", 
                    "param_type": "minecraftEnum"
                }
            ], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "返回实体信息列表(根据距指定位置由近到远排序, id越靠前距离指定位置越近)，详细见备注"
            }, 
            "state": [
                {
                    "comment": "从指定位置发射一条射线，获取与射线相交的实体和方块", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "hdy"
                }, 
                {
                    "comment": "支持检测方块", 
                    "operation": "调整", 
                    "version": "2.9", 
                    "author": "hdy"
                }, 
                {
                    "comment": "返回值中添加精准碰撞坐标hitPos，类型为tuple(float,float,float)", 
                    "operation": "调整", 
                    "version": "2.11", 
                    "author": "hdy"
                }, 
                {
                    "comment": "isThrouth拼写错误，调整为isThrough，通过关键词isThrouth = True调用的方法还会再兼容一段时间", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "xgb"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerList", 
            "path": "server.extraServerApi", 
            "desc": "获取所有维度中的全部玩家的id列表", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "返回玩家id列表"
            }, 
            "state": [
                {
                    "comment": "获取获取level中所有玩家的id列表", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "lidi"
                }, 
                {
                    "comment": "返回列表按照id进行排序", 
                    "operation": "调整", 
                    "version": "2.3", 
                    "author": "wdd"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetEntityLimit", 
            "path": "server.extraServerApi", 
            "desc": "设置世界最大可生成实体数量上限。可生成实体指具有spawnrule的实体。当前世界上被加载的可生成实体数量超过这个上限时，生物就不会再通过spawnrule刷出。", 
            "doc_class_path": [
                "世界/生物生成"
            ], 
            "param": [
                {
                    "param_comment": "最大可生成实体数量上限", 
                    "param_name": "num", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置以玩家为中心，6个chunk范围内的最大实体数量", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntityLimit", 
            "path": "server.extraServerApi", 
            "desc": "获取世界最大可生成实体数量上限。可生成实体的含义见[SetEntityLimit](#setentitylimit)", 
            "doc_class_path": [
                "世界/生物生成"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "最大可生成实体数量上限"
            }, 
            "state": [
                {
                    "comment": "获取当前level最大实体数量", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetLocalPosFromWorld", 
            "path": "server.extraServerApi", 
            "desc": "获取基于实体的世界坐标对应的局部坐标", 
            "doc_class_path": [
                "通用/数学"
            ], 
            "param": [
                {
                    "param_comment": "基于实体的世界坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "世界坐标对应的局部坐标"
            }, 
            "state": [
                {
                    "comment": "获取基于实体的世界坐标对应的局部坐标", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetWorldPosFromLocal", 
            "path": "server.extraServerApi", 
            "desc": "获取基于实体的局部坐标对应的世界坐标", 
            "doc_class_path": [
                "通用/数学"
            ], 
            "param": [
                {
                    "param_comment": "基于实体的局部坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "局部坐标对应的世界坐标"
            }, 
            "state": [
                {
                    "comment": "获取基于实体的局部坐标对应的世界坐标", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetDirFromRot", 
            "path": "server.extraServerApi", 
            "desc": "通过旋转角度获取朝向", 
            "doc_class_path": [
                "通用/数学"
            ], 
            "param": [
                {
                    "param_comment": "俯仰角度及绕竖直方向的角度，单位是角度", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "玩家朝向的单位向量"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetRotFromDir", 
            "path": "server.extraServerApi", 
            "desc": "通过朝向获取旋转角度", 
            "doc_class_path": [
                "通用/数学"
            ], 
            "param": [
                {
                    "param_comment": "玩家朝向的单位向量", 
                    "param_name": "dir", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "俯仰角度及绕竖直方向的角度，单位是角度"
            }, 
            "state": [
                {
                    "comment": "通过玩家当前朝向获取旋转角度", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "xujiarong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StartProfile", 
            "path": "server.extraServerApi", 
            "desc": "开始启动服务端脚本性能分析，启动后调用[StopProfile](#stopprofile)即可在路径fileName生成函数性能火焰图，此接口只支持PC端。生成的火焰图可以用浏览器打开，推荐chrome浏览器。", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "开始启动服务端脚本性能分析", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StopProfile", 
            "path": "server.extraServerApi", 
            "desc": "停止服务端脚本性能分析并生成火焰图，与[StartProfile](#startprofile)配合使用，此接口只支持PC端", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [
                {
                    "param_comment": "具体路径，相对于PC开发包的路径，默认为\"flamegraph.svg\"，位于PC开发包目录下，自定义路径请确保文件后缀名为\".svg\"", 
                    "param_name": "fileName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "停止服务端脚本性能分析并生成火焰图", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StartMemProfile", 
            "path": "server.extraServerApi", 
            "desc": "开始启动服务端脚本内存分析，启动后调用[StopMemProfile](#stopMemProfile)即可在路径fileName生成函数内存火焰图，此接口只支持PC端。生成的火焰图可以用浏览器打开，推荐chrome浏览器。", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "开始启动服务端脚本内存分析", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xusifan"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StopMemProfile", 
            "path": "server.extraServerApi", 
            "desc": "停止服务端脚本内存分析并生成火焰图，与[StartMemProfile](#startMemProfile)配合使用，此接口只支持PC端", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [
                {
                    "param_comment": "具体路径，相对于PC开发包的路径，默认为\"flamegraph.svg\"，位于PC开发包目录下，自定义路径请确保文件后缀名为\".svg\"", 
                    "param_name": "fileName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "停止服务端脚本内存分析并生成火焰图", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xusifan"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StartMultiProfile", 
            "path": "server.extraServerApi", 
            "desc": "开始启动服务端与客户端双端脚本性能分析，启动后调用[StopMultiProfile](#stopmultiprofile)即可在路径fileName生成函数性能火焰图。双端采集时数据误差较大，建议优先使用[StartProfile](#startprofile)单端版本，此接口只支持PC端", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "开始启动服务端与客户端双端脚本性能分析", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StopMultiProfile", 
            "path": "server.extraServerApi", 
            "desc": "停止双端脚本性能分析并生成火焰图，与[StartMultiProfile](#startmultiprofile)配合使用，此接口只支持PC端", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [
                {
                    "param_comment": "具体路径，相对于PC开发包的路径，默认为\"flamegraph.svg\"，位于PC开发包目录下，自定义路径请确保文件后缀名为\".svg\"", 
                    "param_name": "fileName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "停止双端脚本性能分析并生成火焰图", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StartRecordPacket", 
            "path": "server.extraServerApi", 
            "desc": "开始启动服务端与客户端之间的引擎收发包统计，启动后调用[StopRecordPacket](#stoprecordpacket)即可获取两个函数调用之间引擎收发包的统计信息，仅支持租赁服与Apollo网络服环境（不支持单机环境）", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "开始启动服务端与客户端之间的引擎收发包统计", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }, 
                {
                    "comment": "添加仅支持租赁服与Apollo环境的说明", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StopRecordPacket", 
            "path": "server.extraServerApi", 
            "desc": "停止服务端与客户端之间的引擎收发包统计并输出结果，与[StartRecordPacket](#startrecordpacket)配合使用，输出结果为字典，key为网络包名，value字典中记录收发信息，具体见示例，仅支持租赁服与Apollo网络服环境（不支持单机环境）", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "收发包信息，假如没有调用过StartRecordPacket，则返回为None"
            }, 
            "state": [
                {
                    "comment": "停止服务端与客户端之间的引擎收发包统计并输出结果", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }, 
                {
                    "comment": "添加仅支持租赁服与Apollo环境的说明", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StartRecordEvent", 
            "path": "server.extraServerApi", 
            "desc": "开始启动服务端与客户端之间的脚本事件收发统计，启动后调用[StopRecordEvent](#stoprecordevent)即可获取两个函数调用之间脚本事件收发的统计信息，仅支持租赁服与Apollo网络服环境（不支持单机环境）", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "执行结果"
            }, 
            "state": [
                {
                    "comment": "开始启动服务端与客户端之间的脚本事件收发统计", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }, 
                {
                    "comment": "添加仅支持租赁服与Apollo环境的说明", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StopRecordEvent", 
            "path": "server.extraServerApi", 
            "desc": "停止服务端与客户端之间的脚本事件收发统计并输出结果，与[StartRecordEvent](#startrecordevent)配合使用，输出结果为字典，key为网络包名，value字典中记录收发信息，具体见示例，仅支持租赁服与Apollo网络服环境（不支持单机环境）", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "收发包信息，假如没有调用过StartRecordEvent，则返回为None"
            }, 
            "state": [
                {
                    "comment": "停止服务端与客户端之间的脚本事件收发统计并输出结果", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }, 
                {
                    "comment": "添加仅支持租赁服与Apollo环境的说明", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsInServer", 
            "path": "server.extraServerApi", 
            "desc": "获取当前游戏是否跑在服务器环境下", 
            "doc_class_path": [
                "通用/本地设备"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True:在服务器环境下<br>False:不在服务器环境下"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "IsInApollo", 
            "path": "server.extraServerApi", 
            "desc": "返回当前游戏Mod是否运行在Apollo网络服", 
            "doc_class_path": [
                "通用/本地设备"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True：当前Mod运行于Apollo网络服环境<br>False：当前Mod运行于租赁服、联机大厅或者单机环境"
            }, 
            "state": [
                {
                    "comment": "返回当前游戏Mod是否运行在Apollo网络服", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddEntityTickEventWhiteList", 
            "path": "server.extraServerApi", 
            "desc": "添加实体类型到EntityTickServerEvent事件的触发白名单。", 
            "doc_class_path": [
                "event.EntityTickServerEvent"
            ], 
            "param": [
                {
                    "param_comment": "实体的类型名，原版的实体需要加上minecraft命名空间", 
                    "param_name": "identifier", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "添加实体tick事件白名单", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlatform", 
            "path": "server.extraServerApi", 
            "desc": "获取脚本运行的平台", 
            "doc_class_path": [
                "通用/本地设备"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "0：Windows平台；1：IOS；2：Android；-1：其他，例如联机大厅，阿波罗等linux服务器"
            }, 
            "state": [
                {
                    "comment": "获取脚本运行的平台", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetCustomGoalCls", 
            "path": "server.extraServerApi", 
            "desc": "用于获取服务器自定义行为节点的基类。实现新的行为节点时，需要继承该接口返回的类", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "type(CustomGoal)", 
                "return_comment": "服务端自定义行为节点类"
            }, 
            "state": [
                {
                    "comment": "增加获取自定义行为节点基类的接口", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "syy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StartCoroutine", 
            "path": "server.extraServerApi", 
            "desc": "开启服务端协程，实现函数分段式执行，可用于缓解复杂逻辑计算导致游戏卡顿问题", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "传入带有yield的函数或传入生成器。如传入生成器则将从生成器中断位置开始执行,如传入函数将从头开始执行", 
                    "param_name": "iterOrFunc", 
                    "param_type": "generator或callable([],generator)"
                }, 
                {
                    "param_comment": "协程执行完后的回调函数，默认为None", 
                    "param_name": "callback", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "generator", 
                "return_comment": "函数生成器。如果传入的iterOrFunc不是带有yield的函数或者生成器时返回None"
            }, 
            "state": [
                {
                    "comment": "开启服务端协程，实现函数分段式执行，可用于缓解复杂逻辑计算导致游戏卡顿问题", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "handaoying"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "StopCoroutine", 
            "path": "server.extraServerApi", 
            "desc": "停止协程", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "需要停止的生成器对象,StartCoroutine的返回值", 
                    "param_name": "iter", 
                    "param_type": "generator"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "停止服务端协程", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "handaoying"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetServerTickTime", 
            "path": "server.extraServerApi", 
            "desc": "获取服务端引擎上一帧的帧消耗时间", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "时间，单位为毫秒"
            }, 
            "state": [
                {
                    "comment": "获取服务端引擎上一帧的帧消耗时间", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetMcpModLogCanPostDump", 
            "path": "server.extraServerApi", 
            "desc": "设置是否可以打印错误信息到McpModLog日志。", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [
                {
                    "param_comment": "是否可以打印", 
                    "param_name": "canPost", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置是否可打印MCP日志", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "wtq"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetMcpModLogCanPostDump", 
            "path": "server.extraServerApi", 
            "desc": "获取是否可以打印错误信息到McpModLog日志。", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "canPost 是否可以打印"
            }, 
            "state": [
                {
                    "comment": "获取是否可打印MCP日志", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "wtq"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "PostMcpModDump", 
            "path": "server.extraServerApi", 
            "desc": "主动打印信息到McpModLog日志，需要先调用 SetMcpModLogCanPostDump 接口进行设置，才能生效。", 
            "doc_class_path": [
                "通用/调试"
            ], 
            "param": [
                {
                    "param_comment": "错误信息", 
                    "param_name": "msg", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "此参数将作为可变参数传入 logger.error", 
                    "param_name": "*args", 
                    "param_type": "any"
                }, 
                {
                    "param_comment": "此参数将作为关键字参数传入 logger.error", 
                    "param_name": "**kwargs", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "打印MCP日志", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "wtq"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "ImportModule", 
            "path": "server.extraServerApi", 
            "desc": "使用字符串路径导入模块，作用与importlib.import_module类似，但只能导入当前加载的mod中的模块", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "模块的绝对路径", 
                    "param_name": "path", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "any", 
                "return_comment": "模块对象，当前加载的所有mod中不存在该模块则返回None"
            }, 
            "state": [
                {
                    "comment": "使用字符串的绝对路径导入模块", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetMinecraftVersion", 
            "path": "server.extraServerApi", 
            "desc": "获取Minecraft版本-服务端。", 
            "doc_class_path": [
                "通用/本地设备"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "版本号"
            }, 
            "state": [
                {
                    "comment": "获取Minecraft版本号", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "czk"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetIntPos", 
            "path": "server.extraServerApi", 
            "desc": "获取坐标所在方块的位置，即浮点数坐标向下取整后的整数坐标。", 
            "doc_class_path": [
                "通用/数学"
            ], 
            "param": [
                {
                    "param_comment": "坐标元组", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "tuple(int,int,int)", 
                "return_comment": "坐标所在方块的位置"
            }, 
            "state": [
                {
                    "comment": "获取坐标所在方块的位置", 
                    "operation": "新增", 
                    "version": "3.4", 
                    "author": "lrz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetHostPlayerId", 
            "path": "server.extraServerApi", 
            "desc": "获取房主的entityId", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "房主的entityId,若房主未加入则返回None"
            }, 
            "state": [
                {
                    "comment": "获取房主的entityId", 
                    "operation": "新增", 
                    "version": "3.4", 
                    "author": "lrz"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.blockUseEventWhiteListCompServer.BlockUseEventWhiteListComponentServer": [
        {
            "name": "AddBlockItemListenForUseEvent", 
            "path": "server.component.blockUseEventWhiteListCompServer.BlockUseEventWhiteListComponentServer", 
            "desc": "增加blockName方块对ServerBlockUseEvent事件的脚本层监听", 
            "doc_class_path": [
                "event.ServerBlockUseEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块名称，格式：namespace:name:auxvalue，其中namespace:name:*匹配所有的auxvalue", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否增加成功"
            }, 
            "state": [
                {
                    "comment": "auxvalue默认值从0改为*", 
                    "operation": "调整", 
                    "version": "3.0", 
                    "author": "xgb"
                }, 
                {
                    "comment": "去掉增加原版方块监听ServerBlockUseEvent事件时同步到客户端的功能", 
                    "operation": "调整", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RemoveBlockItemListenForUseEvent", 
            "path": "server.component.blockUseEventWhiteListCompServer.BlockUseEventWhiteListComponentServer", 
            "desc": "移除blockName方块对ServerBlockUseEvent事件的脚本层监听", 
            "doc_class_path": [
                "event.ServerBlockUseEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块名称，格式：namespace:name:auxvalue，其中namespace:name:*匹配所有的auxvalue", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否移除成功"
            }, 
            "state": [
                {
                    "comment": "auxvalue默认值从0改为*", 
                    "operation": "调整", 
                    "version": "3.0", 
                    "author": "xgb"
                }, 
                {
                    "comment": "去掉移除原版方块监听ServerBlockUseEvent事件时同步到客户端的功能", 
                    "operation": "调整", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "ClearAllListenForBlockUseEventItems", 
            "path": "server.component.blockUseEventWhiteListCompServer.BlockUseEventWhiteListComponentServer", 
            "desc": "清空所有已添加方块对ServerBlockUseEvent事件的脚本层监听", 
            "doc_class_path": [
                "event.ServerBlockUseEvent"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否清空成功"
            }, 
            "state": [
                {
                    "comment": "去掉清空原版方块监听ServerBlockUseEvent事件时同步到客户端的功能", 
                    "operation": "调整", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.ui.controls.imageUIControl.ImageUIControl": [
        {
            "name": "SetSprite", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "给图片控件换指定贴图", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "贴图的路径，需要从resource_pack下面的textures目录开始", 
                    "param_name": "texturePath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSpriteColor", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "设置图片颜色", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "图片颜色rgb，取值[0, 1]", 
                    "param_name": "color", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置图片颜色", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "lioneldy"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSpriteGray", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "给图片控件置灰，比直接SetSprite一张灰图片效率要高", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "True为将图片置灰，False为恢复原色", 
                    "param_name": "gray", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSpriteUV", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "设置图片的起始uv，与json中的\"uv\"属性作用一致", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "图片的左上角为(0,0)，向右为x轴，向下为y轴", 
                    "param_name": "uv", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置UI图片控件的uv", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "czh"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSpriteUVSize", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "设置图片的uv大小，与json中的\"uv_size\"属性作用一致", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "图片向右为x轴，向下为y轴", 
                    "param_name": "uvSize", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置UI图片控件的uv大小", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "czh"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSpriteClipRatio", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "设置图片的裁剪区域比例（不改变控件尺寸）。可以配合image控件的clip_ratio属性控制方向。", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "图片的裁剪比例（范围0到1），裁剪精度与图片分辨率相关", 
                    "param_name": "clipRatio", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSpritePlatformHead", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "设置图片为我的世界移动端启动器当前帐号的头像", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "支持图片控件设置成我的世界移动端启动器当前帐号的头像", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSpritePlatformFrame", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "设置图片为我的世界移动端启动器当前帐号的头像框", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "支持图片控件设置成我的世界移动端启动器当前帐号的头像框", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetClipDirection", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "设置图片控件的裁剪方向", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "图片控件的裁剪方向，可选的值详见备注", 
                    "param_name": "clipDirection", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置图片控件的裁剪方向", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetClipDirection", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "获取图片控件的裁剪方向", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "图片控件的裁剪方向，返回值的意义可见SetClipDirection接口的备注"
            }, 
            "state": [
                {
                    "comment": "获取图片控件的裁剪方向", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetImageAdaptionType", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "设置图片控件的图片适配方式以及信息", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "图片控件的图片适配方式，可选的值详见备注", 
                    "param_name": "imageAdaptionType", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "如果图片不是九宫适配方式，无需传该值，否则需要设置，tuple的每个值分别代表九宫格切割的四个参数：左，右，上，下", 
                    "param_name": "imageAdaptionData", 
                    "param_type": "tuple(float,float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置图片控件的图片适配方式以及信息", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Rotate", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "图片相对自身的旋转锚点进行旋转", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "旋转角度", 
                    "param_name": "angle", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "图片相对自身的旋转锚点进行旋转", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RotateAround", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "图片相对全局坐标系中某个固定的点进行旋转", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "全局坐标点", 
                    "param_name": "point", 
                    "param_type": "tuple(float,float)"
                }, 
                {
                    "param_comment": "旋转角度", 
                    "param_name": "angle", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "图片相对全局坐标系中某个固定的点进行旋转", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetRotatePivot", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "设置图片自身旋转锚点，该点并不是固定的点，而是相对于自身位置的点", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "相对于自身位置的锚点，第一项为横轴x，第二项为纵轴y，锚点实际坐标=图片的position + anchor * (width, height)", 
                    "param_name": "pivot", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "图片相对全局坐标系中某个固定的点进行旋转", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetRotatePivot", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "获取图片相对自身的旋转锚点", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "获取图片相对自身的旋转锚点，第一项为横轴，第二项为纵轴"
            }, 
            "state": [
                {
                    "comment": "获取图片相对自身的旋转锚点", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetRotateAngle", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "获取图片相对自身的旋转锚点旋转的角度", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "获取图片相对自身的旋转锚点旋转的角度"
            }, 
            "state": [
                {
                    "comment": "获取图片相对自身的旋转锚点旋转的角度", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetGlobalRotateAngle", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "获取图片通过RotateAround函数设置进去的角度值", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "获取图片通过RotateAround函数设置进去的角度值"
            }, 
            "state": [
                {
                    "comment": "获取图片通过RotateAround函数设置进去的角度值", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetGlobalRotatePoint", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "获取图片通过RotateAround函数设置进去的point值", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "获取图片通过RotateAround函数设置进去的point值"
            }, 
            "state": [
                {
                    "comment": "获取图片通过RotateAround函数设置进去的point值", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetRotateRect", 
            "path": "client.ui.controls.imageUIControl.ImageUIControl", 
            "desc": "获取图片当前的四个边角点", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "tuple(tuple(float,float),tuple(float,float),tuple(float,float),tuple(float,float))", 
                "return_comment": "获取图片当前的四个边角点(每个点都是一个tuple)"
            }, 
            "state": [
                {
                    "comment": "获取图片当前的四个边角点", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.actorPushableCompServer.ActorPushableCompServer": [
        {
            "name": "SetActorPushable", 
            "path": "server.component.actorPushableCompServer.ActorPushableCompServer", 
            "desc": "设置实体是否可推动", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "0:不可推动  1:可推动", 
                    "param_name": "isPushable", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True表示设置成功"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "client.component.particleSkeletonBindComp.ParticleSkeletonBindComp": [
        {
            "name": "Bind", 
            "path": "client.component.particleSkeletonBindComp.ParticleSkeletonBindComp", 
            "desc": "绑定骨骼模型", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [
                {
                    "param_comment": "绑定的骨骼模型的ID（见model组件的GetModelId）", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "绑定具体骨骼的名称", 
                    "param_name": "boneName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "绑定的偏移量", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "绑定的旋转角度", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }
    ], 
    "client.component.frameAniSkeletonBindComp.FrameAniSkeletonBindComp": [
        {
            "name": "Bind", 
            "path": "client.component.frameAniSkeletonBindComp.FrameAniSkeletonBindComp", 
            "desc": "绑定骨骼模型", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "绑定的骨骼模型的ID（见model组件的GetModelId）", 
                    "param_name": "modelId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "绑定具体骨骼的名称", 
                    "param_name": "boneName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "绑定的偏移量", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "绑定的旋转角度", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }
    ], 
    "server.component.itemCompServer.ItemCompServer": [
        {
            "name": "SpawnItemToPlayerCarried", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "生成物品到玩家右手", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SpawnItemToPlayerInv", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "生成物品到玩家背包", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "背包槽位(可选)", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "当附魔信息错误时，无法生成物品，返回False。调整前为会生成一个没有附魔的物品", 
                    "operation": "调整", 
                    "version": "2.7", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取玩家物品，支持获取背包，盔甲栏，副手以及主手物品", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "[ItemPosType枚举](../../枚举值/ItemPosType.md)", 
                    "param_name": "posType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "槽位，获取INVENTORY及ARMOR时需要设置，其他情况写0即可", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否获取userData，默认为False", 
                    "param_name": "getUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>，没有物品则返回None"
            }, 
            "state": [
                {
                    "comment": "增加获取userData的参数，默认不获取", 
                    "operation": "调整", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "ChangePlayerItemTipsAndExtraId", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "修改玩家物品的自定义tips和自定义标识符", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "[ItemPosType枚举](../../枚举值/ItemPosType.md)", 
                    "param_name": "posType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "物品栏槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "物品的自定义tips", 
                    "param_name": "customTips", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "物品的自定义标识符", 
                    "param_name": "extraId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "AddEnchantToInvItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "给物品栏的物品添加附魔信息", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "物品栏槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "附魔类型，可以查看枚举值文档", 
                    "param_name": "enchantType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "附魔等级", 
                    "param_name": "level", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "AddModEnchantToInvItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "给物品栏中物品添加自定义附魔信息", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "物品栏槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "自定义附魔identifier", 
                    "param_name": "modEnchantId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "自定义附魔等级", 
                    "param_name": "level", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "新增给物品栏中物品添加自定义附魔信息接口", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RemoveEnchantToInvItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "给物品栏的物品移除附魔信息", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "物品栏槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "附魔类型，可以查看枚举值文档", 
                    "param_name": "enchantType", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "移除结果"
            }, 
            "state": [
                {
                    "comment": "新增给物品栏中物品移除附魔信息接口", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RemoveModEnchantToInvItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "给物品栏中物品移除自定义附魔信息", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "物品栏槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "自定义附魔identifier", 
                    "param_name": "modEnchantId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "移除结果"
            }, 
            "state": [
                {
                    "comment": "新增给物品栏中物品移除自定义附魔信息接口", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetInvItemEnchantData", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取物品栏的物品附魔信息", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "物品栏槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(tuple(int,int))", 
                "return_comment": "list中每个tuple由附魔类型([EnchantType枚举](../../枚举值/EnchantType.md))和附魔等级组成。没有附魔则为空list"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetInvItemModEnchantData", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取物品栏的物品自定义附魔信息", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "物品栏槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(tuple(str,int))", 
                "return_comment": "list中每个tuple由自定义附魔id和附魔等级组成，没有自定义附魔则为空list"
            }, 
            "state": [
                {
                    "comment": "新增获取物品栏的物品自定义附魔信息", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetInvItemNum", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "设置玩家背包物品数目", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "物品栏槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "物品数目，可以通过设置数量为0来达到清除背包物品的效果", 
                    "param_name": "num", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetInvItemExchange", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "交换玩家背包物品", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "物品位置", 
                    "param_name": "pos1", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "物品位置", 
                    "param_name": "pos2", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetDroppedItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取掉落物的物品信息", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "掉落物的entityId", 
                    "param_name": "itemEntityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否获取userData，默认为False", 
                    "param_name": "getUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "信息"
            }, 
            "state": [
                {
                    "comment": "新增获取掉落在世界的指定entityid的物品信息", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "why117"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEquItemEnchant", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取装备槽位中盔甲的附魔", 
            "doc_class_path": [
                "实体/背包"
            ], 
            "param": [
                {
                    "param_comment": "[ArmorSlotType枚举](../../枚举值/ArmorSlotType.md)枚举", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(tuple(int,int))", 
                "return_comment": "盔甲的附魔"
            }, 
            "state": [
                {
                    "comment": "新增支持获取生物装备槽位中盔甲的附魔", 
                    "operation": "调整", 
                    "version": "1.19", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEquItemModEnchant", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取装备槽位中盔甲的自定义附魔", 
            "doc_class_path": [
                "实体/背包"
            ], 
            "param": [
                {
                    "param_comment": "[ArmorSlotType枚举](../../枚举值/ArmorSlotType.md)枚举", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(tuple(str,int))", 
                "return_comment": "list中每个tuple由自定义附魔id和附魔等级组成，没有自定义附魔则返回空列表"
            }, 
            "state": [
                {
                    "comment": "新增支持获取生物装备槽位中盔甲的自定义附魔", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetItemTags", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取物品在minecraft:tags中定义的tags列表", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "item的identifier", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "物品的附加值auxValue，默认为不指定auxValue（0）", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "物品tags列表"
            }, 
            "state": [
                {
                    "comment": "获取物品tags", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "xgb"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetItemBasicInfo", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取物品的基础信息", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "item的identifier", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "物品的附加值auxvalue，默认为0", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否附魔，默认为False。用于返回的id_aux", 
                    "param_name": "isEnchanted", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "基础信息，详见备注"
            }, 
            "state": [
                {
                    "comment": "返回信息新增挖掘相关属性tierDict", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "jishaobin"
                }, 
                {
                    "comment": "新增id_aux字段，用于ui物品控件的绑定", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "czh"
                }, 
                {
                    "comment": "新增itemCategory,itemType,itemTierLevel字段", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "jisahobin"
                }, 
                {
                    "comment": "   新增燃料时间，食物饱食度，食物营养值，武器攻击力，防具防御力字段", 
                    "operation": "调整", 
                    "version": "2.4", 
                    "author": "huangxiaojie03"
                }, 
                {
                    "comment": "物品类型添加food、block、armor，新增customItemType、armorToughness、armorknockbackResistance字段", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "lzy"
                }, 
                {
                    "comment": "物品类型添加trident、potion、crossbow", 
                    "operation": "调整", 
                    "version": "2.11", 
                    "author": "jcf"
                }, 
                {
                    "comment": "新增customTips字段，获取自定义物品的netease:customtips/自定义方块的netease:custom_tips中的配置", 
                    "operation": "调整", 
                    "version": "3.1", 
                    "author": "lidi"
                }, 
                {
                    "comment": "在itemType为armor时返回防具槽位armorSlot，非防具为-1", 
                    "operation": "调整", 
                    "version": "3.1", 
                    "author": "xgb"
                }, 
                {
                    "comment": "支持返回minecraft:tags", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "xgb"
                }, 
                {
                    "comment": "新增字段，enchant_slot_type", 
                    "operation": "调整", 
                    "version": "3.4", 
                    "author": "qiuyukun"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerAllItems", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取玩家指定的槽位的批量物品信息", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "[ItemPosType枚举](../../枚举值/ItemPosType.md)", 
                    "param_name": "posType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否获取userData，默认为False", 
                    "param_name": "getUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>的数组，没有物品的位置为None"
            }, 
            "state": [
                {
                    "comment": "获取指定槽位的批量物品信息", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "why117"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerAllItems", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "添加批量物品信息到指定槽位", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "需要添加的物品的字典，字典的key是tuple([ItemPosType](../../枚举值/ItemPosType.md), slotPos)，value是需要添加的<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemsDictMap", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "设置结果，字典的key是tuple(ItemPosType, slot)，value为bool代表该槽位设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置玩家指定槽位物品信息", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "xltang"
                }, 
                {
                    "comment": "修正itemDict传入空字典时无法清空盔甲、裤子、鞋子部位装备的问题", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "xltang"
                }, 
                {
                    "comment": "当附魔信息错误时，无法生成物品，返回False。调整前为会生成一个没有附魔的物品", 
                    "operation": "调整", 
                    "version": "2.7", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntityItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取生物物品，支持获取背包，盔甲栏，副手以及主手物品", 
            "doc_class_path": [
                "实体/背包"
            ], 
            "param": [
                {
                    "param_comment": "[ItemPosType枚举](../../枚举值/ItemPosType.md)", 
                    "param_name": "posType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "槽位，获取INVENTORY及ARMOR时需要设置，其他情况写0即可", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否获取userData，默认为False", 
                    "param_name": "getUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "物品信息字典，没有物品则返回None"
            }, 
            "state": [
                {
                    "comment": "支持获取生物身上的物品", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "lidi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetEntityItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "设置生物物品，建议开发者根据生物特性来进行设置，部分生物设置装备后可能不显示但是死亡后仍然会掉落所设置的装备", 
            "doc_class_path": [
                "实体/背包"
            ], 
            "param": [
                {
                    "param_comment": "[ItemPosType枚举](../../枚举值/ItemPosType.md)", 
                    "param_name": "posType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "生物身上不同位置的<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>列表，如果传入None将清除当前位置的物品/装备", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "容器槽位，如果ItemPosType为左右手可不传，如果ItemPosType为背包则对应背包槽位，如果ItemPosType为armor则对应装备位置，具体请看[ArmorSlotType枚举](../../枚举值/ArmorSlotType.md)", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置成功返回True"
            }, 
            "state": [
                {
                    "comment": "支持设置生物身上的物品", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "lidi"
                }, 
                {
                    "comment": "支持设置[运输矿车]和[漏斗矿车]背包中的物品", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "sutao"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetCustomName", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取物品的自定义名称，与铁砧修改的名称一致", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>。如果是接口获取的itemDict，应该包含userData，即getUserData应该为True", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "自定义名称"
            }, 
            "state": [
                {
                    "comment": "获取物品的自定义名称，与铁砧修改的名称一致", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetCustomName", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "设置物品的自定义名称，与使用铁砧重命名一致", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "物品名称。支持unicode", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置物品的自定义名称", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetUserDataInEvent", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "使物品相关服务端事件的<a href=\"../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>参数带有userData。在mod初始化时调用即可", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "引擎事件名", 
                    "param_name": "eventName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "修复了可能对部分事件无效的问题", 
                    "operation": "修复", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "可以用物品相关服务端事件的参数中获取userData", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetSelectSlotId", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取玩家当前选中槽位", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "当前槽位，错误时返回-1"
            }, 
            "state": [
                {
                    "comment": "获取玩家当前选中槽位", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetContainerItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取容器内的物品", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "容器位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "容器槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否获取userData，默认为False", 
                    "param_name": "getUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>，没有物品则返回None"
            }, 
            "state": [
                {
                    "comment": "获取容器内的物品，支持常加载区块", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "jishaobin"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEnderChestItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取末影箱内的物品", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "容器槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否获取userData，默认为False", 
                    "param_name": "getUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>，没有物品则返回None"
            }, 
            "state": [
                {
                    "comment": "获取末影箱内的物品", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "jishaobin"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetOpenContainerItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取开放容器的物品", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "[开放容器Id枚举](../../枚举值/OpenContainerId.md)", 
                    "param_name": "containerId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否获取userData，默认为False", 
                    "param_name": "getUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>，没有物品则返回None"
            }, 
            "state": [
                {
                    "comment": "获取开放容器的物品", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "jishaobin"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetPlayerUIItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取合成容器的物品", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "容器槽位，含义见：[容器类型枚举](../../枚举值/PlayerUISlot.md)", 
                    "param_name": "slot", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否获取userData，默认为False", 
                    "param_name": "getUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>，没有物品则返回None"
            }, 
            "state": [
                {
                    "comment": "获取合成容器的物品", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "jishaobin"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerUIItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "设置合成容器的物品", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "容器槽位，含义见：[容器类型枚举](../../枚举值/PlayerUISlot.md)", 
                    "param_name": "slot", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>，没有物品则返回None", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "是否将容器槽位的已有物品放回至玩家背包中，默认为True。设置为False时，则会直接用itemDict中的物品覆盖容器槽位的已有物品。", 
                    "param_name": "needBack", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "设置合成容器的物品", 
                    "operation": "新增", 
                    "version": "2.3", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SpawnItemToContainer", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "生成物品到容器方块的物品栏", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "箱子槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "箱子位置", 
                    "param_name": "blockPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "容器所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "新增生成物品到容器", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "jishaobin"
                }, 
                {
                    "comment": "支持使用下面参数清空特定槽位:itemDict为空，为{}, 或itemName为minecraft:air，或者count为0", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "sutao"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SpawnItemToEnderChest", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "生成物品到末影箱", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "末影箱槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "新增生成物品到末影箱", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "jishaobin"
                }, 
                {
                    "comment": "支持使用下面参数清空特定槽位:itemDict为空，为{}, 或itemName为minecraft:air，或者count为0", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "sutao"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetContainerSize", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取容器容量大小", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "箱子位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "容器所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "箱子大小,错误值-1"
            }, 
            "state": [
                {
                    "comment": "新增获取容器容量大小", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "jishaobin"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "MayPlaceOn", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "判断物品是否可以放到指定的位置上", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "物品标识，如minecraft:dye", 
                    "param_name": "identifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "物品的附加值", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "位置坐标", 
                    "param_name": "blockPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "朝向，详见[Facing枚举](../../枚举值/Facing.md)", 
                    "param_name": "facing", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否可以放置"
            }, 
            "state": [
                {
                    "comment": "判断物品是否可以放到指定的位置上", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetItemDurability", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取指定槽位的物品耐久", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "[ItemPosType枚举](../枚举值/ItemPosType.md)", 
                    "param_name": "posType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "槽位，当posType为ItemPosType.INVENTORY或ItemPosType.ARMOR时才有意义", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "物品的耐久值"
            }, 
            "state": [
                {
                    "comment": "获取指定槽位的物品耐久", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetItemDurability", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "设置物品的耐久值", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "[ItemPosType枚举](../枚举值/ItemPosType.md)", 
                    "param_name": "posType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "槽位，当posType为ItemPosType.INVENTORY或ItemPosType.ARMOR时才有意义", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "耐久值", 
                    "param_name": "durability", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "设置物品的耐久值", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetItemDefenceAngle", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取盾牌物品的抵挡角度范围", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "[ItemPosType枚举](../枚举值/ItemPosType.md)", 
                    "param_name": "posType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(float)", 
                "return_comment": "角度范围"
            }, 
            "state": [
                {
                    "comment": "获取盾牌物品的抵挡角度范围", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "gmy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetItemDefenceAngle", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "设置盾牌物品的抵挡角度范围", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "[ItemPosType枚举](../枚举值/ItemPosType.md)", 
                    "param_name": "posType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "槽位", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "左边的范围，不想设置左范围传None,取值范围是[-180,180]", 
                    "param_name": "angleLeft", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "右边的范围，不想设置右范围传None,取值范围是[-180,180],且angleLeft<angleRight", 
                    "param_name": "angleRight", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置盾牌物品的抵挡角度范围", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "gmy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetItemMaxDurability", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "设置物品的最大耐久值", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "[ItemPosType枚举](../枚举值/ItemPosType.md)", 
                    "param_name": "posType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "槽位，当posType为ItemPosType.INVENTORY或ItemPosType.ARMOR时才有意义", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "最大耐久值，可设为0~32767", 
                    "param_name": "maxDurability", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "如果为True，则该设置只对指定物品生效，如果为False，则对同一类所有物品生效", 
                    "param_name": "isUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "设置物品的最大耐久值", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "likaiyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetItemMaxDurability", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取指定槽位的物品耐最大耐久", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "[ItemPosType枚举](../枚举值/ItemPosType.md)", 
                    "param_name": "posType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "槽位，当posType为ItemPosType.INVENTORY或ItemPosType.ARMOR时才有意义", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "如果为True，则只尝试获取该物品userData特殊设置的值，没有特殊设置过则返回0。如果为False，则会先尝试获取userData中的值，没有的话获取该类物品通用值。", 
                    "param_name": "isUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "物品的最大耐久"
            }, 
            "state": [
                {
                    "comment": "获取指定槽位的物品最大耐久", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "likaiyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetMaxStackSize", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": " 设置物品的最大堆叠数量（存档）", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "最大堆叠数量，不能超过64，如果该值小于物品的堆叠数量，会返回失败", 
                    "param_name": "maxStackSize", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置物品的最大堆叠数量（存档）", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetAttackDamage", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": " 设置物品的攻击伤害值", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "攻击伤害值", 
                    "param_name": "attackDamage", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置物品的攻击伤害值", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetItemTierLevel", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": " 设置工具类物品的挖掘等级", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "挖掘等级", 
                    "param_name": "level", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "修复了等级3及以上时对哭泣的黑曜石无效的问题", 
                    "operation": "修复", 
                    "version": "1.22", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "设置工具类物品的挖掘等级", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetItemTierSpeed", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": " 设置工具类物品的挖掘速度(可通过userData中的ModTierSpeed获取挖掘速度)", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "挖掘速度", 
                    "param_name": "speed", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置工具类物品的挖掘速度", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "补充文档,提示开发者可以从物品的userData中获取挖掘速度", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetItemLayer", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "设置物品的叠加贴图，可以在物品的上层与下层叠加自定义贴图。具体使用可参考CustomItemsMod示例。", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "贴图的层级。可以为-2，-1，1，2，3。负数层级显示在物品下方，正数的层级显示在物品上方。层级大的显示在层级小的上方。", 
                    "param_name": "layer", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "贴图的名字，对应item_texture.json中的key。", 
                    "param_name": "texture", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置物品的叠加贴图", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RemoveItemLayer", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "移除物品的叠加贴图。物品叠加贴图详见SetItemLayer", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "贴图的层级。可以为-2，-1，1，2，3。", 
                    "param_name": "layer", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "移除物品的叠加贴图", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetItemLayer", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取物品的叠加贴图。物品叠加贴图详见SetItemLayer", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "贴图的层级。可以为-2，-1，1，2，3。", 
                    "param_name": "layer", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "贴图的名字，不存在返回None"
            }, 
            "state": [
                {
                    "comment": "获取物品的叠加贴图", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetShearsDestoryBlockSpeed", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": " 设置剪刀对某一方块的破坏速度", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "方块名称,包含命名空间", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "破坏速度", 
                    "param_name": "speed", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置剪刀对某一方块的破坏速度", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "CancelShearsDestoryBlockSpeed", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": " 取消剪刀对某一方块的破坏速度设置", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "方块名称,包含命名空间", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "取消剪刀对某一方块的破坏速度设置", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "CancelShearsDestoryBlockSpeedAll", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": " 取消剪刀对全部方块的破坏速度设置", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "取消剪刀对全部方块的破坏速度设置", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetBrewingStandSlotItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "设置酿造台指定槽位物品", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "物品字典信息, 包含三种key: itemName, auxValue, count", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "槽位，详见枚举[酿造台槽位](../../枚举值/BrewingStandSlotType.md)", 
                    "param_name": "slot", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "容器位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功设置"
            }, 
            "state": [
                {
                    "comment": "设置酿造台指定槽位物品", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBrewingStandSlotItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取酿造台指定槽位物品", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "槽位，详见枚举[酿造台槽位](../../枚举值/BrewingStandSlotType.md)", 
                    "param_name": "slot", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "容器位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>，没有物品则返回None"
            }, 
            "state": [
                {
                    "comment": "获取酿造台指定槽位物品", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetInputSlotItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "设置熔炉输入栏物品", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "物品字典信息, 包含三种key: itemName, auxValue, count", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "容器位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功设置"
            }, 
            "state": [
                {
                    "comment": "设置熔炉输入栏物品", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetInputSlotItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取熔炉输入栏物品, 支持使用下面参数清空特定槽位:itemDict为空，为{}, 或itemName为minecraft:air，或者count为0", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "容器位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>，没有物品则返回None"
            }, 
            "state": [
                {
                    "comment": "获取熔炉输入栏物品", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetOutputSlotItem", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取熔炉输出栏物品", 
            "doc_class_path": [
                "方块/容器"
            ], 
            "param": [
                {
                    "param_comment": "容器位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "方块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>，没有物品则返回None"
            }, 
            "state": [
                {
                    "comment": "获取熔炉输出栏物品", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetLoadItems", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取已经加载的物品id", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "True获取所有物品，False仅获取注册到创造栏的物品，默认为True", 
                    "param_name": "flag", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "物品id列表"
            }, 
            "state": [
                {
                    "comment": "获取已经加载的物品id", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetAllEnchantsInfo", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "获取目前已注册的所有附魔信息", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "附魔信息字典<a href=\"../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#附魔信息字典#附魔信息字典\">附魔信息字典</a>"
            }, 
            "state": [
                {
                    "comment": "服务端获取目前已注册的所有附魔信息", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetItemInfoByBlockName", 
            "path": "server.component.itemCompServer.ItemCompServer", 
            "desc": "通过方块名称及aux值获取物品信息", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "方块identifier", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "aux值", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "方块是否为原生方块，默认为True，即使用旧版aux对应的state", 
                    "param_name": "isLegacy", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>"
            }, 
            "state": [
                {
                    "comment": "通过方块名称及aux值获取物品信息", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "liruizhi"
                }, 
                {
                    "comment": "新增isLegacy参数，默认为True", 
                    "operation": "调整", 
                    "version": "3.3", 
                    "author": "liruizhi"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "common.system.baseSystem.BaseSystem": [
        {
            "name": "CreateEventData", 
            "path": "common.system.baseSystem.BaseSystem", 
            "desc": "创建自定义事件的数据，eventData用于发送事件。创建的eventData可以理解为一个dict，可以嵌套赋值dict,list和基本数据类型，但不支持tuple", 
            "doc_class_path": [
                "通用/事件"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "事件数据"
            }, 
            "state": [], 
            "side": "服务端/客户端"
        }, 
        {
            "name": "ListenForEvent", 
            "path": "common.system.baseSystem.BaseSystem", 
            "desc": "注册监听某个系统抛出的事件。若监听引擎事件时，namespace和systemName分别为GetEngineNamespace()和GetEngineSystemName()。具体每个事件的详细事件data可以参考\"事件\"分类下的内容", 
            "doc_class_path": [
                "通用/事件"
            ], 
            "param": [
                {
                    "param_comment": "所监听事件的来源系统的namespace", 
                    "param_name": "namespace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "所监听事件的来源系统的systemName", 
                    "param_name": "systemName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "事件名", 
                    "param_name": "eventName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "回调函数所属的类的实例", 
                    "param_name": "instance", 
                    "param_type": "any"
                }, 
                {
                    "param_comment": "回调函数", 
                    "param_name": "func", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "这个回调函数的优先级。默认值为0，这个数值越大表示被执行的优先级越高，最高为10。", 
                    "param_name": "priority", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "客户端系统事件的参数会自带客户端玩家id", 
                    "operation": "调整", 
                    "version": "2.2", 
                    "author": "czh"
                }
            ], 
            "side": "服务端/客户端"
        }, 
        {
            "name": "UnListenForEvent", 
            "path": "common.system.baseSystem.BaseSystem", 
            "desc": "反注册监听某个系统抛出的事件，即不再监听。若是引擎事件，则namespace和systemName分别为[GetEngineNamespace](#getenginenamespace)和[GetEngineSystemName](#getenginesystemname)。与ListenForEvent对应。", 
            "doc_class_path": [
                "通用/事件"
            ], 
            "param": [
                {
                    "param_comment": "所监听事件的来源系统的namespace", 
                    "param_name": "namespace", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "所监听事件的来源系统的systemName", 
                    "param_name": "systemName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "事件名", 
                    "param_name": "eventName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "回调函数所属的类的实例", 
                    "param_name": "instance", 
                    "param_type": "any"
                }, 
                {
                    "param_comment": "回调函数", 
                    "param_name": "func", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "这个回调函数的优先级。默认值为0，这个数值越大表示被执行的优先级越高。", 
                    "param_name": "priority", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "服务端/客户端"
        }, 
        {
            "name": "UnListenAllEvents", 
            "path": "common.system.baseSystem.BaseSystem", 
            "desc": "反注册监听某个系统抛出的所有事件，即不再监听。", 
            "doc_class_path": [
                "通用/事件"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "反注册监听某个系统抛出的所有事件，即不再监听。", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端/客户端"
        }, 
        {
            "name": "BroadcastEvent", 
            "path": "common.system.baseSystem.BaseSystem", 
            "desc": "本地广播事件，客户端system广播的事件仅客户端system能监听，服务器system广播的事件仅服务端system能监听。", 
            "doc_class_path": [
                "通用/事件"
            ], 
            "param": [
                {
                    "param_comment": "事件名", 
                    "param_name": "eventName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "事件参数，一般用CreateEventData的返回值", 
                    "param_name": "eventData", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "服务端/客户端"
        }
    ], 
    "client.component.frameAniEntityBindComp.FrameAniEntityBindComp": [
        {
            "name": "Bind", 
            "path": "client.component.frameAniEntityBindComp.FrameAniEntityBindComp", 
            "desc": "绑定entity", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "绑定的entity的ID", 
                    "param_name": "bindEntityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "绑定的偏移量", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "绑定的旋转角度", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }
    ], 
    "server.component.featureCompServer.FeatureCompServer": [
        {
            "name": "AddNeteaseFeatureWhiteList", 
            "path": "server.component.featureCompServer.FeatureCompServer", 
            "desc": "添加结构对PlaceNeteaseStructureFeatureEvent事件的脚本层监听", 
            "doc_class_path": [
                "event.PlaceNeteaseStructureFeatureEvent"
            ], 
            "param": [
                {
                    "param_comment": "结构的identifier", 
                    "param_name": "structureName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否增加成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "RemoveNeteaseFeatureWhiteList", 
            "path": "server.component.featureCompServer.FeatureCompServer", 
            "desc": "移除structureName对PlaceNeteaseStructureFeatureEvent事件的脚本层监听", 
            "doc_class_path": [
                "event.PlaceNeteaseStructureFeatureEvent"
            ], 
            "param": [
                {
                    "param_comment": "结构名称", 
                    "param_name": "structureName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否移除成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "ClearAllNeteaseFeatureWhiteList", 
            "path": "server.component.featureCompServer.FeatureCompServer", 
            "desc": "清空所有已添加Netease Structure Feature对PlaceNeteaseStructureFeatureEvent事件的脚本层监听", 
            "doc_class_path": [
                "event.PlaceNeteaseStructureFeatureEvent"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否清空成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "LocateStructureFeature", 
            "path": "server.component.featureCompServer.FeatureCompServer", 
            "desc": "与[/locate指令](https://zh.minecraft.wiki/w/%E5%91%BD%E4%BB%A4/locate)相似，用于定位原版的部分结构，如海底神殿、末地城等。", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "原版的结构类型，[StructureFeatureType](../../枚举值/StructureFeatureType.md)枚举", 
                    "param_name": "featureType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "结构所在维度，**要求该维度已加载**", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "以该位置为中心来查找最近的结构", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "是否只在未生成的区块中寻找。默认值为False，表示只在加载过的区块中寻找", 
                    "param_name": "useNewChunksOnly", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float)或None", 
                "return_comment": "最近的结构所在区块位置(x坐标,z坐标)，y坐标不定，若定位失败则返回None"
            }, 
            "state": [
                {
                    "comment": "支持只在未生成的区块中查找", 
                    "operation": "调整", 
                    "version": "3.0", 
                    "author": "bailei"
                }, 
                {
                    "comment": "定位原版的部分结构", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "LocateNeteaseFeatureRule", 
            "path": "server.component.featureCompServer.FeatureCompServer", 
            "desc": "与[/locate指令](https://zh.minecraft.wiki/w/%E5%91%BD%E4%BB%A4/locate)相似，用于定位<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/4-自定义维度/4-自定义特征.html#特征规则（feature-rules）\">网易自定义特征规则</a>", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "特征规则名称，形式为namespace:featureRuleIdentifier，如custombiomes:overworld_pumpkins_feature_rule", 
                    "param_name": "ruleName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "查找维度，**要求该维度已加载**", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "以该位置为中心来查找满足网易自定义特征规则分布条件的坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "是否只在未加载区块中寻找。默认值为False，表示只在加载过的区块中寻找", 
                    "param_name": "mustBeInNewChunk", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float)或None", 
                "return_comment": "最近的满足网易自定义特征规则分布条件的坐标，定位失败则返回None"
            }, 
            "state": [
                {
                    "comment": "定位满足某个网易自定义特征规则分布条件的坐标", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "支持获取未生成区块的地物结构", 
                    "operation": "调整", 
                    "version": "3.0", 
                    "author": "bailei"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.ui.controls.sliderUIControl.SliderUIControl": [
        {
            "name": "GetSliderValue", 
            "path": "client.ui.controls.sliderUIControl.SliderUIControl", 
            "desc": "获取滑动条的值，失败返回0", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "滑动条的值"
            }, 
            "state": [
                {
                    "comment": "获得滑动条的值", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSliderValue", 
            "path": "client.ui.controls.sliderUIControl.SliderUIControl", 
            "desc": "设置滑动条的值", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "滑动条的值", 
                    "param_name": "value", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置滑动条的值", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.queryVariableCompClient.QueryVariableComponentClient": [
        {
            "name": "Register", 
            "path": "client.component.queryVariableCompClient.QueryVariableComponentClient", 
            "desc": "注册实体计算节点", 
            "doc_class_path": [
                "实体/molang"
            ], 
            "param": [
                {
                    "param_comment": "节点名称，必须以\"query.mod.\"开头", 
                    "param_name": "variableName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "默认值", 
                    "param_name": "defalutValue", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "注册是否成功"
            }, 
            "state": [
                {
                    "comment": "注册实体计算节点", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "支持molang变量缩写", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "cyk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "UnRegister", 
            "path": "client.component.queryVariableCompClient.QueryVariableComponentClient", 
            "desc": "注销实体计算节点", 
            "doc_class_path": [
                "实体/molang"
            ], 
            "param": [
                {
                    "param_comment": "节点名称，必须以\"query.mod.\"开头", 
                    "param_name": "variableName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "注销是否成功"
            }, 
            "state": [
                {
                    "comment": "反注册实体计算节点", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "支持molang变量缩写", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "cyk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Set", 
            "path": "client.component.queryVariableCompClient.QueryVariableComponentClient", 
            "desc": "设置某一个实体计算节点的值", 
            "doc_class_path": [
                "实体/molang"
            ], 
            "param": [
                {
                    "param_comment": "节点名称，必须以\"query.mod.\"开头", 
                    "param_name": "variableName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "计算节点的值", 
                    "param_name": "value", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置实体计算节点的值", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "支持molang变量缩写", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "cyk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Get", 
            "path": "client.component.queryVariableCompClient.QueryVariableComponentClient", 
            "desc": "获取某一个实体计算节点的值，如果不存在返回注册时的默认值", 
            "doc_class_path": [
                "实体/molang"
            ], 
            "param": [
                {
                    "param_comment": "节点名称，必须以\"query.mod.\"开头", 
                    "param_name": "variableName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "节点的值"
            }, 
            "state": [
                {
                    "comment": "获取实体计算节点的值", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "支持molang变量缩写", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "cyk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetMolangValue", 
            "path": "client.component.queryVariableCompClient.QueryVariableComponentClient", 
            "desc": "获取实体molang变量的值", 
            "doc_class_path": [
                "实体/molang"
            ], 
            "param": [
                {
                    "param_comment": "molang变量名称，如query.can_fly", 
                    "param_name": "molangName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "float或long", 
                "return_comment": "节点的值，不存在返回None"
            }, 
            "state": [
                {
                    "comment": "获取实体molang变量的值", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "扩展接口，增加返回molang变量hash64", 
                    "operation": "调整", 
                    "version": "2.0", 
                    "author": "guanmingyu"
                }, 
                {
                    "comment": "修复了pc下，molang变量为字符串时，返回值被转换成32位整形的问题", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "czh"
                }, 
                {
                    "comment": "支持molang变量缩写", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "cyk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "EvalMolangExpression", 
            "path": "client.component.queryVariableCompClient.QueryVariableComponentClient", 
            "desc": "在实体上下文上执行molang表达式", 
            "doc_class_path": [
                "实体/molang"
            ], 
            "param": [
                {
                    "param_comment": "molang表达式", 
                    "param_name": "expression", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "执行结果在\"value\"的键中，如果有执行错误，通过\"error\"的键返回错误信息"
            }, 
            "state": [
                {
                    "comment": "在实体上下文上执行molang表达式", 
                    "operation": "新增", 
                    "version": "3.1", 
                    "author": "chenyuekai"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetStringHash64", 
            "path": "client.component.queryVariableCompClient.QueryVariableComponentClient", 
            "desc": "返回字符串变量的hash64", 
            "doc_class_path": [
                "实体/molang"
            ], 
            "param": [
                {
                    "param_comment": "需要计算的字符串变量,如“steve\"", 
                    "param_name": "key", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "long", 
                "return_comment": "结果值，如果传入不是字符串则返回None"
            }, 
            "state": [
                {
                    "comment": "增加返回字符串变量的hash64的接口", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "guanmingyu"
                }, 
                {
                    "comment": "修复了pc下返回值被转换成32位整形的问题", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.chunkSourceComp.ChunkSourceCompServer": [
        {
            "name": "SetAddArea", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "设置区块的常加载", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "常加载区域的名称", 
                    "param_name": "key", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "区块所在的维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "加载区域的最小坐标", 
                    "param_name": "minPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "加载区域的最大坐标", 
                    "param_name": "maxPos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增fill指令说明", 
                    "operation": "调整", 
                    "version": "2.1", 
                    "author": "jishaobin"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "DeleteArea", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "删除一个常加载区域", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "常加载区域的名称", 
                    "param_name": "key", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "删除是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "DeleteAllArea", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "删除所有常加载区域", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "删除的区域数目，错误时为None"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetAllAreaKeys", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "获取所有常加载区域名称列表", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "名称列表list"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "CheckChunkState", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "判断指定位置的chunk是否加载完成", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "chunk所在维度", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "指定位置的坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "加载是否完成"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetLoadedChunks", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "获取指定维度当前已经加载完毕的全部区块的坐标列表", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "维度", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "None或list(tuple(int,int))", 
                "return_comment": "区块坐标的列表（区块坐标为(x,z)），当指定维度不存在或尚未创建时，返回None"
            }, 
            "state": [
                {
                    "comment": "获取指定维度当前已经加载完毕的全部区块的坐标列表", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetChunkEntites", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "获取指定位置的区块中，全部的实体和玩家的ID列表", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "维度", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "指定位置的坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "None或list(str)", 
                "return_comment": "实体和玩家的ID的列表，当指定位置的区块不存在或尚未加载时，返回None"
            }, 
            "state": [
                {
                    "comment": "获取指定位置的区块中，全部的实体和玩家的ID列表", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetChunkMinPos", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "获取某区块最小点的坐标", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "指定区块的坐标", 
                    "param_name": "chunkPos", 
                    "param_type": "tuple(int,int)"
                }
            ], 
            "return": {
                "return_type": "None或tuple(int,int,int)", 
                "return_comment": "该区块最小点的坐标"
            }, 
            "state": [
                {
                    "comment": "获取某区块最小点的坐标", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "修复末地、下界的值异常,改用entityId创建组件后，即获取正常", 
                    "operation": "调整", 
                    "version": "2.11", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetChunkMaxPos", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "获取某区块最大点的坐标", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "指定区块的坐标", 
                    "param_name": "chunkPos", 
                    "param_type": "tuple(int,int)"
                }
            ], 
            "return": {
                "return_type": "None或tuple(int,int,int)", 
                "return_comment": "该区块最大点的坐标"
            }, 
            "state": [
                {
                    "comment": "获取某区块最大点的坐标", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "修复末地、下界的值异常,改用entityId创建组件后，即获取正常", 
                    "operation": "调整", 
                    "version": "2.11", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetChunkMobNum", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "获取某区块中的生物数量（不包括玩家，但包括盔甲架）", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "区块所在维度", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "指定区块的坐标", 
                    "param_name": "chunkPos", 
                    "param_type": "tuple(int,int)"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "该区块中的生物数量"
            }, 
            "state": [
                {
                    "comment": "获取某区块中的生物数量（不包括玩家）", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetChunkPosFromBlockPos", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "通过方块坐标获得该方块所在区块坐标", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "方块的坐标", 
                    "param_name": "blockPos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "None或tuple(int,int)", 
                "return_comment": "该方块所在区块的坐标"
            }, 
            "state": [
                {
                    "comment": "服务端通过方块坐标获得该方块所在区块坐标", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsChunkGenerated", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "获取某个区块是否生成过。", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "区块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "指定区块的坐标", 
                    "param_name": "chunkPos", 
                    "param_type": "tuple(int,int)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "该区块是否生成过"
            }, 
            "state": [
                {
                    "comment": "获取某个区块是否生成过。", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsSlimeChunk", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "获取某个区块是否是史莱姆区块。", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "区块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "指定区块的坐标", 
                    "param_name": "chunkPos", 
                    "param_type": "tuple(int,int)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "该区块是否史莱姆区块"
            }, 
            "state": [
                {
                    "comment": "获取某个区块是否史莱姆区块。", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "gmy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "DoTaskOnChunkAsync", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "异步加载指定范围区块，加载完成后调用输入的回调函数。", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "区块所在维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "指定范围坐标最小值,y值不会起到限制区块范围的作用。posMin每一项均需小于posMax", 
                    "param_name": "posMin", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "指定范围坐标最大值,y值不会起到限制区块范围的作用。", 
                    "param_name": "posMax", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "加载完成后调用的回调函数", 
                    "param_name": "callback", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "异步加载指定范围区块，加载完成后调用输入的回调函数。", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "xg"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "OpenClientChunkGeneration", 
            "path": "server.component.chunkSourceComp.ChunkSourceCompServer", 
            "desc": "开启/关闭客户端区块生成功能，需要在LoadServerAddonScriptsAfter事件触发时调用。开启客户端区块生成功能时，如果使用了netease:structure_feature或修改了大部分地图，会导致客户端和服务端地图不一致的问题。此时可以通过关闭客户端区块生成功能解决该问题。", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "开启/关闭，该功能默认开启。", 
                    "param_name": "val", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "开启/关闭客户端区块生成功能。", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "xg"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.shareableCompServer.ShareableComponentServer": [
        {
            "name": "SetEntityShareablesItems", 
            "path": "server.component.shareableCompServer.ShareableComponentServer", 
            "desc": "设置生物可分享/可拾取的物品列表", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "可分享/可拾取的物品列表", 
                    "param_name": "items", 
                    "param_type": "list(dict)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "设置实体可分享/可拾取的物品列表", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xiegang"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.blockUseEventWhiteListCompClient.BlockUseEventWhiteListComponentClient": [
        {
            "name": "AddBlockItemListenForUseEvent", 
            "path": "client.component.blockUseEventWhiteListCompClient.BlockUseEventWhiteListComponentClient", 
            "desc": "增加blockName方块对ClientBlockUseEvent事件的脚本层监听", 
            "doc_class_path": [
                "event.ClientBlockUseEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块名称，格式：namespace:name:auxvalue，其中namespace:name:*匹配所有的auxvalue", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否增加成功"
            }, 
            "state": [
                {
                    "comment": "auxvalue默认值从0改为*", 
                    "operation": "调整", 
                    "version": "3.0", 
                    "author": "xgb"
                }, 
                {
                    "comment": "增加原版方块对ClientBlockUseEvent事件的脚本层监听", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveBlockItemListenForUseEvent", 
            "path": "client.component.blockUseEventWhiteListCompClient.BlockUseEventWhiteListComponentClient", 
            "desc": "移除blockName方块对ClientBlockUseEvent事件的脚本层监听", 
            "doc_class_path": [
                "event.ClientBlockUseEvent"
            ], 
            "param": [
                {
                    "param_comment": "方块名称，格式：namespace:name:auxvalue，其中namespace:name:*匹配所有的auxvalue", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否移除成功"
            }, 
            "state": [
                {
                    "comment": "auxvalue默认值从0改为*", 
                    "operation": "调整", 
                    "version": "3.0", 
                    "author": "xgb"
                }, 
                {
                    "comment": "移除原版方块对ClientBlockUseEvent事件的脚本层监听", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ClearAllListenForBlockUseEventItems", 
            "path": "client.component.blockUseEventWhiteListCompClient.BlockUseEventWhiteListComponentClient", 
            "desc": "清空所有已添加方块对ClientBlockUseEvent事件的脚本层监听", 
            "doc_class_path": [
                "event.ClientBlockUseEvent"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否清空成功"
            }, 
            "state": [
                {
                    "comment": "清空原版方块白名单列表对ClientBlockUseEvent事件的脚本层监听", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.recipeCompServer.RecipeCompServer": [
        {
            "name": "RemoveRecipe", 
            "path": "server.component.recipeCompServer.RecipeCompServer", 
            "desc": "动态禁用配方", 
            "doc_class_path": [
                "世界/配方"
            ], 
            "param": [
                {
                    "param_comment": "配方identifier", 
                    "param_name": "rcpIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "配方类型,省略前缀\"minecraft\"。详见<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/5-自定义配方.html#配方类型说明\">[配方类型说明]</a>", 
                    "param_name": "rcpTypeStr", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "动态禁用配方", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddRecipe", 
            "path": "server.component.recipeCompServer.RecipeCompServer", 
            "desc": "动态注册配方，支持配方类型详见<a href=\"../../../../mcguide/20-玩法开发/15-自定义游戏内容/5-自定义配方.html#配方类型说明\">[配方类型说明]</a>", 
            "doc_class_path": [
                "世界/配方"
            ], 
            "param": [
                {
                    "param_comment": "配方json数据或者配方字典", 
                    "param_name": "rcp", 
                    "param_type": "str或dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "动态注册配方", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "xsf"
                }, 
                {
                    "comment": "基岩版1.20更新后，酿造台的药水槽每次只能放进一个物品，无法一次放入两个及以上数量的物品。", 
                    "operation": "调整", 
                    "version": "2.12", 
                    "author": "xjr"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetRecipeResult", 
            "path": "server.component.recipeCompServer.RecipeCompServer", 
            "desc": "根据配方id获取配方结果。仅支持合成配方", 
            "doc_class_path": [
                "世界/配方"
            ], 
            "param": [
                {
                    "param_comment": "配方id,对应配方json文件中的identifier字段", 
                    "param_name": "recipeId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "list的元素resultDict字典见备注"
            }, 
            "state": [
                {
                    "comment": "返回值新增fullItemName字段，包含了物品的命名空间。原来的itemName字段弃用", 
                    "operation": "调整", 
                    "version": "2.9", 
                    "author": "czh"
                }, 
                {
                    "comment": "返回的配方列表中的输入物品里，’item'字段对应的值有可能为列表类型(list)，也可能为字符串类型(str)", 
                    "operation": "调整", 
                    "version": "2.12", 
                    "author": "xjr"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetRecipesByResult", 
            "path": "server.component.recipeCompServer.RecipeCompServer", 
            "desc": "通过输出物品查询配方所需要的输入材料", 
            "doc_class_path": [
                "世界/配方"
            ], 
            "param": [
                {
                    "param_comment": "输出物品的标识符", 
                    "param_name": "resultIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "对应配方json中的tags字段里面的值", 
                    "param_name": "tag", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "输出物品的附加值, 不传参的话默认为0", 
                    "param_name": "aux", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "最大输出条目数，若大于等于0时，结果超过maxResultNum，则只返回maxResultNum条。默认-1，表示返回全部", 
                    "param_name": "maxResultNum", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "返回符合条件的配方列表"
            }, 
            "state": [
                {
                    "comment": "通过输出物品查询配方所需要的输入材料", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "sutao"
                }, 
                {
                    "comment": "返回的配方中将包含输出的物品", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "sutao"
                }, 
                {
                    "comment": "熔炉配方支持返回输出物品的数量", 
                    "operation": "调整", 
                    "version": "1.25", 
                    "author": "czh"
                }, 
                {
                    "comment": "返回的配方列表中的输入物品里，’item'字段对应的值有可能为列表类型(list)，也可能为字符串类型(str)", 
                    "operation": "调整", 
                    "version": "2.12", 
                    "author": "xjr"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddBrewingRecipes", 
            "path": "server.component.recipeCompServer.RecipeCompServer", 
            "desc": "添加酿造台配方的接口", 
            "doc_class_path": [
                "世界/配方"
            ], 
            "param": [
                {
                    "param_comment": "recipe_brewing_mix或者recipe_brewing_container，recipe_brewing_mix代表混合酿造配方，recipe_brewing_container代表换容酿造配方", 
                    "param_name": "brewType", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "该配方接受的物品", 
                    "param_name": "inputName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "酿造所需要的额外物品", 
                    "param_name": "reagentName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "该配方输出的物品", 
                    "param_name": "outputName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "新增添加酿造台配方的接口", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "gmy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetRecipesByInput", 
            "path": "server.component.recipeCompServer.RecipeCompServer", 
            "desc": "通过输入物品查询配方", 
            "doc_class_path": [
                "世界/配方"
            ], 
            "param": [
                {
                    "param_comment": "输入物品的标识符", 
                    "param_name": "inputIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "对应配方json中的tags字段里面的值", 
                    "param_name": "tag", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "输入物品的附加值, 不传参的话默认为0", 
                    "param_name": "aux", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "最大输出条目数，若大于等于0时，结果超过maxResultNum，则只返回maxResultNum条。默认-1，表示返回全部", 
                    "param_name": "maxResultNum", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "返回符合条件的配方列表"
            }, 
            "state": [
                {
                    "comment": "通过输入物品查询配方", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }, 
                {
                    "comment": "熔炉配方支持返回输出物品的数量", 
                    "operation": "调整", 
                    "version": "1.25", 
                    "author": "czh"
                }, 
                {
                    "comment": "返回的配方列表中的输入物品里，’item'字段对应的值有可能为列表类型(list)，也可能为字符串类型(str)", 
                    "operation": "调整", 
                    "version": "2.12", 
                    "author": "xjr"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.queryVariableCompServer.QueryVariableComponentServer": [
        {
            "name": "EvalMolangExpression", 
            "path": "server.component.queryVariableCompServer.QueryVariableComponentServer", 
            "desc": "在实体上下文上执行molang表达式", 
            "doc_class_path": [
                "实体/molang"
            ], 
            "param": [
                {
                    "param_comment": "molang表达式", 
                    "param_name": "expression", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "执行结果在\"value\"的键中，如果有执行错误，通过\"error\"的键返回错误信息"
            }, 
            "state": [
                {
                    "comment": "在实体上下文上执行molang表达式", 
                    "operation": "新增", 
                    "version": "3.1", 
                    "author": "chenyuekai"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.particleSystemCompClient.ParticleSystemCompClient": [
        {
            "name": "Create", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "创建粒子发射器, 创建后立即播放", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器名称(粒子发射器json文件中的identifier)", 
                    "param_name": "effect_name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "三维 表示在某处创建粒子发射器 默认值为(0, 0, 0)", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "粒子发射器创建后使用的三维旋转(使用角度制，按照ZYX顺序旋转) 默认值为(0, 0, 0)", 
                    "param_name": "rotation", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "粒子发射器实例ID 返回0表示创建失败"
            }, 
            "state": [
                {
                    "comment": "创建粒子发射器", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CreateBindEntityNew", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "创建粒子发射器并绑定到指定实体的指定骨骼上, 创建后立即播放", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器名称(粒子发射器json文件中的identifier)", 
                    "param_name": "effect_name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "需要绑定的实体id", 
                    "param_name": "entity_id", 
                    "param_type": "str或int"
                }, 
                {
                    "param_comment": "需要绑定的骨骼名称(不区分大小写) 默认值为\"body\",传入空字符串时代表根骨骼。包含多个根骨骼的情况下，选择按骨骼名称排序后的首个根骨骼。", 
                    "param_name": "bone_name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "三维 表示粒子发射器的绑定偏移 默认值为(0, 0, 0)", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "表示粒子发射器绑定的三维旋转(使用角度制，按照ZYX顺序旋转) 默认值为(0, 0, 0)", 
                    "param_name": "rotation", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "粒子发射器实例id 返回0表示创建失败"
            }, 
            "state": [
                {
                    "comment": "创建粒子发射器并绑定实体", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "cxz"
                }, 
                {
                    "comment": "支持传入空字符串时，绑定到实体根骨骼上", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "gx"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "EmitManually", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "手动发射粒子一次", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id 需要已经创建且未被销毁的粒子发射器", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "手动发射粒子", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "BindEntity", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "绑定粒子发射器到指定实体的指定骨骼上", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id 需要已经创建且未被销毁的粒子发射器", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "需要绑定的实体id", 
                    "param_name": "entity_id", 
                    "param_type": "str或int"
                }, 
                {
                    "param_comment": "需要绑定的骨骼名称(不区分大小写) 默认值为\"body\"，传入空字符串时代表根骨骼。包含多个根骨骼的情况下，选择按骨骼名称排序后的首个根骨骼。", 
                    "param_name": "bone_name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "三维 表示粒子发射器的绑定偏移 默认值为(0, 0, 0)", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "表示粒子发射器绑定的三维旋转(角度制，按照ZYX顺序旋转) 默认值为(0, 0, 0)", 
                    "param_name": "rotation", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "绑定粒子发射器到指定实体", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }, 
                {
                    "comment": "支持传入空字符串时，绑定到实体根骨骼上", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "gx"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "BindModel", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "绑定粒子发射器到指定骨骼模型的指定骨骼上", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id 需要已经创建且未被销毁的粒子发射器", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "绑定的骨骼模型的ID（见model组件的GetModelId）", 
                    "param_name": "model_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "绑定具体骨骼的名称(不区分大小写)，默认值为\"root\"", 
                    "param_name": "bone_name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "三维 表示粒子发射器的绑定偏移 默认值为(0, 0, 0)", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "表示粒子发射器绑定的三维旋转(角度制，按照ZYX顺序旋转) 默认值为(0, 0, 0)", 
                    "param_name": "rotation", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "绑定粒子发射器到骨骼模型上", 
                    "operation": "新增", 
                    "version": "2.3", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Unbind", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "解除指定粒子发射器的绑定状态", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id 需要已经创建且未被销毁的粒子发射器", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "解绑后是否保持粒子发射器在世界空间的位置 默认值为True", 
                    "param_name": "keep_position", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "解绑后是否保持粒子发射器在世界空间的旋转 默认值为True", 
                    "param_name": "keep_rotation", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "解除粒子发射器绑定", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetRelative", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "设置粒子是否在局部空间进行计算", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id 需要粒子发射器已绑定实体", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "表示粒子是否在局部空间进行计算 默认参数值为True", 
                    "param_name": "is_relative", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子是否在局部空间进行计算", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBindingID", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "返回粒子绑定的实体id，没有则返回\"0\"", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "绑定的实体id"
            }, 
            "state": [
                {
                    "comment": "返回粒子绑定的实体id", 
                    "operation": "新增", 
                    "version": "2.3", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetBindingModelID", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "返回绑定的骨骼模型id 没有则返回-1", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "绑定的骨骼模型id"
            }, 
            "state": [
                {
                    "comment": "获取粒子发射器绑定的骨骼模型id", 
                    "operation": "新增", 
                    "version": "2.3", 
                    "author": "wangdingdong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Remove", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "销毁指定粒子发射器", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id 对于不存在的粒子发射器id不会进行任何操作", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "销毁指定粒子发射器", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveByName", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "销毁场景中指定名称(粒子发射器json中的identifier)的所有粒子发射器", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器名称(json中的identifier)", 
                    "param_name": "effect_name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "销毁所有具有指定identifier的粒子发射器", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Exist", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "判断指定粒子发射器是否存在", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回True时，表示指定的粒子发射器存在于场景中"
            }, 
            "state": [
                {
                    "comment": "判断指定粒子发射器是否存在", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Play", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "播放粒子发射器", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "播放粒子发射器", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Stop", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "停止粒子发射器播放(不渲染且不更新逻辑)", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "停止粒子发射器播放", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Hide", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "隐藏粒子发射器(不渲染)", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "隐藏粒子发射器", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Show", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "显示粒子发射器(开启渲染)", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "显示粒子发射器", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Pause", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "暂停粒子发射器的逻辑更新，但保持渲染状态", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "暂停粒子发射器更新", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Resume", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "恢复粒子发射器的逻辑更新，不影响渲染状态", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "恢复粒子发射器更新", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Replay", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "重播粒子发射器", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "重播粒子发射器", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "PlayAt", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "设置粒子发射器播放时间点", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "播放时间点", 
                    "param_name": "at_second", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子发射器播放时间点", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "IsPausing", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "返回粒子发射器的逻辑是否正在被暂停", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示粒子发射器是否被暂停"
            }, 
            "state": [
                {
                    "comment": "判断粒子发射器是否被暂停", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "IsHiding", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "返回粒子发射器是否正在被隐藏(不渲染)", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示粒子发射器是否正在隐藏"
            }, 
            "state": [
                {
                    "comment": "判断粒子发射器是否被隐藏", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetPos", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "设置粒子发射器位置", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "三维 表示粒子发射器局部空间位置 默认值为(0, 0, 0)", 
                    "param_name": "pos", 
                    "param_type": "Tuple"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子发射器位置", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPos", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "获取粒子发射器位置", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否获取局部空间 | 绑定偏移 默认值为True(即 默认获取局部空间位置 | 绑定偏移)", 
                    "param_name": "is_local", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "Tuple", 
                "return_comment": "表示粒子发射器位置的三维向量"
            }, 
            "state": [
                {
                    "comment": "获取粒子发射器位置", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetRot", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "设置粒子发射器局部旋转", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "粒子发射器三维旋转(使用角度制，按照ZYX顺序旋转) 默认值为(0, 0, 0)", 
                    "param_name": "rot", 
                    "param_type": "Tuple"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子发射器旋转", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetRotUseZXY", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "设置粒子发射器局部旋转，旋转顺序按照绕z,x,y轴旋转", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "粒子发射器三维旋转(使用角度制，按照ZXY顺序旋转) 默认值为(0, 0, 0)", 
                    "param_name": "rot", 
                    "param_type": "Tuple"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子发射器旋转，旋转顺序按照绕z,x,y轴旋转", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetRot", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "获取粒子发射器局部旋转", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "表示是否获取局部空间旋转 默认值为True(即 默认获取局部空间旋转)", 
                    "param_name": "is_local", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "Tuple", 
                "return_comment": "粒子发射器三维旋转(使用角度制)"
            }, 
            "state": [
                {
                    "comment": "获取粒子发射器旋转", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetTimeScale", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "设置粒子发射器的播放速度", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "表示播放倍率 可以为负数进行倒放", 
                    "param_name": "scale", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子发射器播放速度", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetTimeScale", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "获取粒子发射器的播放速度", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "表示粒子发射器播放速度 粒子发射器无效时会返回0.0"
            }, 
            "state": [
                {
                    "comment": "获取粒子发射器播放速度", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetDuration", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "获取粒子发射器的播放周期(激活+休眠时间)", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "表示粒子发射器播放周期 粒子发射器无效时会返回0.0"
            }, 
            "state": [
                {
                    "comment": "获取粒子发射器播放周期", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetActiveDuration", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "获取粒子发射器的激活周期", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "表示粒子发射器激活周期 粒子发射器无效时会返回0.0"
            }, 
            "state": [
                {
                    "comment": "获取粒子发射器激活周期", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetSleepDuration", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "获取粒子发射器的休眠周期", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "表示粒子发射器休眠周期 粒子发射器无效时会返回0.0"
            }, 
            "state": [
                {
                    "comment": "获取粒子发射器休眠周期", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetLoopAge", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "获取粒子发射器当前播放周期内已播放的时间", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "表示粒子发射器在当前播放周期内已播放的时间 粒子发射器id无效时会返回0.0"
            }, 
            "state": [
                {
                    "comment": "获取粒子发射器周期内已播放时间", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetVariable", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "获取粒子发射器的Molang变量值", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "Molang变量名(例如variable.emitter_age)", 
                    "param_name": "variable_name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "表示粒子发射器的Molang变量值 无效时会返回0.0"
            }, 
            "state": [
                {
                    "comment": "获取粒子发射器的Molang变量值", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }, 
                {
                    "comment": "新增发射器移动速度变量variable.emitter_speed", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetVariable", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "设置粒子发射器的Molang变量值", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "Molang变量名", 
                    "param_name": "variable_name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "表示粒子发射器的Molang变量值", 
                    "param_name": "value", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "表示调用是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子发射器的Molang变量值", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }, 
                {
                    "comment": "新增发射器移动速度变量variable.emitter_speed", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetFacingMode", 
            "path": "client.component.particleSystemCompClient.ParticleSystemCompClient", 
            "desc": "返回粒子发射器的粒子朝向模式", 
            "doc_class_path": [
                "特效/微软粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器id", 
                    "param_name": "par_id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "粒子朝向模式字符串 返回字符串\"none\"表示非法"
            }, 
            "state": [
                {
                    "comment": "返回粒子发射器的粒子朝向模式", 
                    "operation": "新增", 
                    "version": "2.2", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.system.clientSystem.ClientSystem": [
        {
            "name": "NotifyToServer", 
            "path": "client.system.clientSystem.ClientSystem", 
            "desc": "客户端发送事件到服务器", 
            "doc_class_path": [
                "通用/事件"
            ], 
            "param": [
                {
                    "param_comment": "事件名", 
                    "param_name": "eventName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "事件参数，一般用CreateEventData的返回值", 
                    "param_name": "eventData", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "CreateEngineSfx", 
            "path": "client.system.clientSystem.ClientSystem", 
            "desc": "创建序列帧特效", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "特效资源路径，不用后缀名", 
                    "param_name": "path", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "创建位置，可选，没传则可以创建完用frameAniTrans组件设置", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "角度，可选，没传则可以创建完用frameAniTrans组件设置", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "缩放系数，可选，没传则可以创建完用frameAniTrans组件设置", 
                    "param_name": "scale", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "int或None", 
                "return_comment": "frameEntityId或者None"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "CreateEngineSfxFromEditor", 
            "path": "client.system.clientSystem.ClientSystem", 
            "desc": "指使用资源包中effects/xxx.json，按照编辑器中编辑好的参数创建序列帧。支持环状序列帧", 
            "doc_class_path": [
                "特效/序列帧"
            ], 
            "param": [
                {
                    "param_comment": "特效配置路径，需要为\"effects/xxx.json\"，\"xxx\"为编辑器创建序列帧时填写的名称", 
                    "param_name": "path", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "创建位置，可选，没传则可以创建完用frameAniTrans组件设置，一般需要设置播放的位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "角度，可选，没传则可以创建完用frameAniTrans组件设置", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "缩放系数，可选，没传则可以创建完用frameAniTrans组件设置", 
                    "param_name": "scale", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "int或None", 
                "return_comment": "frameEntityId或者None"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "CreateEngineParticle", 
            "path": "client.system.clientSystem.ClientSystem", 
            "desc": "用于创建粒子特效", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [
                {
                    "param_comment": "特效资源路径，需要加上后缀名（一般是json）", 
                    "param_name": "path", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "创建位置坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "int或None", 
                "return_comment": "particleEntityId或者None"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "CreateEngineEffectBind", 
            "path": "client.system.clientSystem.ClientSystem", 
            "desc": "指用编辑器保存资源包中models/bind/xxx_bind.json生成编辑好的所有挂点的所有特效。生成的特效会自动进行挂接及播放，编辑器中设为不可见的特效也会进行播放。并且使用这种方式创建的特效，开发者不用维护entity进出视野导致的挂接特效被移除，引擎会在entity每次进入视野时自动创建所有特效。", 
            "doc_class_path": [
                "特效/模型特效"
            ], 
            "param": [
                {
                    "param_comment": "特效配置路径，需要包含json后缀名", 
                    "param_name": "path", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "绑定实体的Id", 
                    "param_name": "bindEntity", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "选择使用哪个模型动作的特效", 
                    "param_name": "aniName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int或None", 
                "return_comment": "effectEntityId或者None"
            }, 
            "state": [
                {
                    "comment": "指用编辑器保存资源包中models/bind/xxx_bind.json生成编辑好的所有挂点的所有特效", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "cyk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "DestroyEntity", 
            "path": "client.system.clientSystem.ClientSystem", 
            "desc": "销毁特效", 
            "doc_class_path": [
                "特效/通用"
            ], 
            "param": [
                {
                    "param_comment": "销毁的特效ID", 
                    "param_name": "entityId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否销毁成功"
            }, 
            "state": [
                {
                    "comment": "增加销毁实体返回值", 
                    "operation": "调整", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CreateClientEntityByTypeStr", 
            "path": "client.system.clientSystem.ClientSystem", 
            "desc": "创建客户端实体", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "实体identifier，例如'minecraft:husk'", 
                    "param_name": "engineTypeStr", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "生成坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "生物面向", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "str或None", 
                "return_comment": "实体Id或者None"
            }, 
            "state": [
                {
                    "comment": "创建客户端实体,仅用于渲染", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "qyk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "DestroyClientEntity", 
            "path": "client.system.clientSystem.ClientSystem", 
            "desc": "销毁客户端实体", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "客户端实体Id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "销毁客户端实体", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "qyk"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.chunkSourceCompClient.ChunkSourceCompClient": [
        {
            "name": "GetChunkPosFromBlockPos", 
            "path": "client.component.chunkSourceCompClient.ChunkSourceCompClient", 
            "desc": "通过方块坐标获得该方块所在区块坐标", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "方块的坐标", 
                    "param_name": "blockPos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "None或tuple(int,int)", 
                "return_comment": "该方块所在区块的坐标"
            }, 
            "state": [
                {
                    "comment": "客户端通过方块坐标获得该方块所在区块坐标", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "liaoyi"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.playerAnimCompClient.PlayerAnimCompClient": [
        {
            "name": "PlayTpAnimation", 
            "path": "client.component.playerAnimCompClient.PlayerAnimCompClient", 
            "desc": "第三人称视角播放玩家通用动作", 
            "doc_class_path": [
                "玩家/动画"
            ], 
            "param": [
                {
                    "param_comment": "动作名称，如sneaking", 
                    "param_name": "anim", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "第三人称视角播放玩家通用动作", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "StopAnimation", 
            "path": "client.component.playerAnimCompClient.PlayerAnimCompClient", 
            "desc": "停止播放玩家通用动作", 
            "doc_class_path": [
                "玩家/动画"
            ], 
            "param": [
                {
                    "param_comment": "动作名称，如sneaking", 
                    "param_name": "anim", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "停止播放玩家通用动作", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.rotCompServer.RotComponentServer": [
        {
            "name": "SetRot", 
            "path": "server.component.rotCompServer.RotComponentServer", 
            "desc": "设置实体头与水平方向的俯仰角度和竖直方向的旋转角度 <a href=\"../../../../mcguide/20-玩法开发/10-基本概念/10-Vector3.html\">MC坐标系说明</a>", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "（上下角度，左右角度）单位是角度而不是弧度", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetRot", 
            "path": "server.component.rotCompServer.RotComponentServer", 
            "desc": "获取实体头与水平方向的俯仰角度和竖直方向的旋转角度，获得角度后可用GetDirFromRot接口转换为朝向的单位向量 <a href=\"../../../../mcguide/20-玩法开发/10-基本概念/10-Vector3.html\">MC坐标系说明</a>", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "（上下角度，左右角度）单位是角度而不是弧度"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetEntityLookAtPos", 
            "path": "server.component.rotCompServer.RotComponentServer", 
            "desc": "设置非玩家的实体看向某个位置", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "要看向的目标位置", 
                    "param_name": "targetPos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "凝视行为最短维持时间，单位为秒", 
                    "param_name": "minTime", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "凝视行为最长维持时间，单位为秒，最大值为60<br>实际行为维持时间将在minTime和maxTime之间取随机值", 
                    "param_name": "maxTime", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "在进行凝视行为时，是否禁止触发其他行为<br>True为禁止其他行为<br>False为允许其他行为（此时凝视行为可能表现不明显）", 
                    "param_name": "reject", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功，True为成功，False为失败"
            }, 
            "state": [
                {
                    "comment": "设置非玩家实体看向某个位置", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "liaoyi"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.actorLootCompServer.ActorLootComponentServer": [
        {
            "name": "SpawnLootTable", 
            "path": "server.component.actorLootCompServer.ActorLootComponentServer", 
            "desc": "使用生物类型模拟一次随机掉落，生成的物品与json定义的概率有关", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "掉落位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "实体identifier，如minecraft:guardian", 
                    "param_name": "identifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "玩家杀手（只能是玩家），默认None", 
                    "param_name": "playerKillerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "伤害来源实体Id（掉落与该实体手持物品的抢夺附魔等级有关），默认None", 
                    "param_name": "damageCauseEntityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功生成掉落"
            }, 
            "state": [
                {
                    "comment": "生成生物一次随机掉落", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SpawnLootTableWithActor", 
            "path": "server.component.actorLootCompServer.ActorLootComponentServer", 
            "desc": "使用生物实例模拟一次随机掉落，生成的物品与json定义的概率有关", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "掉落位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "模拟生物的生物Id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "玩家杀手（只能是玩家），默认None", 
                    "param_name": "playerKillerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "伤害来源实体Id（掉落与该实体手持物品的抢夺附魔等级有关），默认None", 
                    "param_name": "damageCauseEntityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功生成掉落"
            }, 
            "state": [
                {
                    "comment": "使用生物Id生成一次随机掉落", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.httpToWebServerCompServer.HttpToWebServerCompServer": [
        {
            "name": "GetPlayerUid", 
            "path": "server.component.httpToWebServerCompServer.HttpToWebServerCompServer", 
            "desc": "获取玩家的uid。只有在线玩家才可获取", 
            "doc_class_path": [
                "联机大厅"
            ], 
            "param": [
                {
                    "param_comment": "玩家实体id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "玩家uid"
            }, 
            "state": [
                {
                    "comment": "获取玩家的uid", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "QueryLobbyUserItem", 
            "path": "server.component.httpToWebServerCompServer.HttpToWebServerCompServer", 
            "desc": "查询还没发货的订单。仅联机大厅可用", 
            "doc_class_path": [
                "联机大厅"
            ], 
            "param": [
                {
                    "param_comment": "请求回调函数", 
                    "param_name": "callback", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "玩家uid", 
                    "param_name": "uid", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "查询还没发货的订单接口", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "gmy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "LobbyGetStorage", 
            "path": "server.component.httpToWebServerCompServer.HttpToWebServerCompServer", 
            "desc": "获取存储的数据。仅联机大厅可用", 
            "doc_class_path": [
                "联机大厅"
            ], 
            "param": [
                {
                    "param_comment": "请求回调函数", 
                    "param_name": "callback", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "玩家uid，如果传0表示获取全局数据", 
                    "param_name": "uid", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "查询数据的key列表，排序key与非排序key都可获取", 
                    "param_name": "keys", 
                    "param_type": "list(str)"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "获取存储的数据接口", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "gmy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "LobbySetStorageAndUserItem", 
            "path": "server.component.httpToWebServerCompServer.HttpToWebServerCompServer", 
            "desc": "设置订单已发货或者存数据。仅联机大厅可用", 
            "doc_class_path": [
                "联机大厅"
            ], 
            "param": [
                {
                    "param_comment": "请求回调函数", 
                    "param_name": "callback", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "玩家uid，如果传0表示设置全局数据", 
                    "param_name": "uid", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "订单Id，可选", 
                    "param_name": "orderId", 
                    "param_type": "int或None"
                }, 
                {
                    "param_comment": "用于返回存储的数据的函数，可选", 
                    "param_name": "entitiesGetter", 
                    "param_type": "function或None"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置订单已发货或者存数据接口", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "gmy"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "LobbyGetStorageBySort", 
            "path": "server.component.httpToWebServerCompServer.HttpToWebServerCompServer", 
            "desc": "排序获取存储的数据。仅联机大厅可用", 
            "doc_class_path": [
                "联机大厅"
            ], 
            "param": [
                {
                    "param_comment": "请求回调函数", 
                    "param_name": "callback", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "查询数据的key。在开发者平台上配置的可排序的key才可以查询", 
                    "param_name": "key", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否升序", 
                    "param_name": "ascend", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "从排序后的第几个数据开始返回（从0开始计算）", 
                    "param_name": "offset", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "返回多少个数据，上限为50", 
                    "param_name": "length", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "获取排序的存储数据接口", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.levelCompServer.LevelComponentServer": [
        {
            "name": "GetPlayerLevel", 
            "path": "server.component.levelCompServer.LevelComponentServer", 
            "desc": "获取玩家等级", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "玩家等级"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "AddPlayerLevel", 
            "path": "server.component.levelCompServer.LevelComponentServer", 
            "desc": "修改玩家等级", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "玩家等级，可设置负数", 
                    "param_name": "level", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "client.component.itemCompClient.ItemCompClient": [
        {
            "name": "GetOffhandItem", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "获取左手物品的信息", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "是否获取物品的userData，默认为False", 
                    "param_name": "getUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>，没有物品则返回None"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetCarriedItem", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "获取右手物品的信息", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "是否获取物品的userData，默认为False", 
                    "param_name": "getUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>，没有物品则返回None"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetSlotId", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "获取当前手持的快捷栏的槽id", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "0到8"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "AddDropItemToWorld", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "在客户端添加一个掉落物渲染", 
            "doc_class_path": [
                "方块/渲染"
            ], 
            "param": [
                {
                    "param_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>", 
                    "param_name": "itemDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "生成的掉落物所在维度", 
                    "param_name": "dimension_id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "生成的掉落物所在位置", 
                    "param_name": "position", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "单位时间上下移动的距离，负数为向下移动，填2即为原版两倍上下移动速度，不填默认为0", 
                    "param_name": "bobSpeed", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "单位时间旋转的速度，负数为反方向，填-2即为原版两倍反方向旋转速度，不填默认为0", 
                    "param_name": "spinSpeed", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "返回该掉落物的entityId"
            }, 
            "state": [
                {
                    "comment": "添加一个客户端掉落物渲染", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetClientDropItemEntityIdList", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "获得所有通过AddDropItemToWorld创建的entityId的list", 
            "doc_class_path": [
                "方块/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "返回所有通过AddDropItemToWorld创建的entityId的list"
            }, 
            "state": [
                {
                    "comment": "获得所有通过AddDropItemToWorld创建的entityId的list", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "DeleteClientDropItemEntity", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "删除AddDropItemToWorld创建的客户端掉落物", 
            "doc_class_path": [
                "方块/渲染"
            ], 
            "param": [
                {
                    "param_comment": "掉落物的entityId，entityId可在调用[AddDropItemToWorld](#AddDropItemToWorld)时保存返回值，或者通过[GetClientDropItemEntityIdList](#GetClientDropItemEntityIdList)接口获取list", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "删除AddDropItemToWorld创建的客户端掉落物", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetItemTags", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "获取物品在minecraft:tags中定义的tags列表", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "item的identifier", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "物品的附加值auxValue，默认为不指定auxValue（0）", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "物品tags列表"
            }, 
            "state": [
                {
                    "comment": "获取物品tags", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "xgb"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetItemBasicInfo", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "获取物品的基础信息", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "item的identifier", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "物品的附加值auxvalue，默认为0", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否附魔，默认为False。用于返回的id_aux", 
                    "param_name": "isEnchanted", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "基础信息字典，见备注"
            }, 
            "state": [
                {
                    "comment": "返回信息新增挖掘相关属性tierDict", 
                    "operation": "调整", 
                    "version": "1.20", 
                    "author": "jishaobin"
                }, 
                {
                    "comment": "新增id_aux字段，用于ui物品控件的绑定", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "czh"
                }, 
                {
                    "comment": "新增itemCategory,itemType,itemTierLevel字段", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "jisahobin"
                }, 
                {
                    "comment": "   新增燃料时间，食物饱食度，食物营养值，武器攻击力，防具防御力字段", 
                    "operation": "调整", 
                    "version": "2.4", 
                    "author": "huangxiaojie03"
                }, 
                {
                    "comment": "物品类型添加food、block、armor，新增customItemType、armorToughness、armorknockbackResistance字段", 
                    "operation": "调整", 
                    "version": "2.8", 
                    "author": "lzy"
                }, 
                {
                    "comment": "物品类型添加trident、potion、crossbow", 
                    "operation": "调整", 
                    "version": "2.11", 
                    "author": "jcf"
                }, 
                {
                    "comment": "新增customTips字段，获取自定义物品的netease:customtips/自定义方块的netease:custom_tips中的配置", 
                    "operation": "调整", 
                    "version": "3.1", 
                    "author": "lidi"
                }, 
                {
                    "comment": "在itemType为armor时返回防具槽位armorSlot，非防具为-1", 
                    "operation": "调整", 
                    "version": "3.1", 
                    "author": "xgb"
                }, 
                {
                    "comment": "支持返回minecraft:tags", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "xgb"
                }, 
                {
                    "comment": "新增字段，enchant_slot_type", 
                    "operation": "调整", 
                    "version": "3.4", 
                    "author": "qiuyukun"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetItemFormattedHoverText", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "获取物品的格式化hover文本，如：§f灾厄旗帜§r", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "item的identifier", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "物品的附加值auxValue，默认为不指定auxValue（0）", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否包括item的类别信息，默认False", 
                    "param_name": "showCategory", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "物品userData，默认为None", 
                    "param_name": "userData", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "物品的格式化hover文本"
            }, 
            "state": [
                {
                    "comment": "获取物品格式化hover文本", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetItemHoverName", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "获取物品的hover名称，如：灾厄旗帜§r", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "item的identifier", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "物品的附加值auxValue，默认为不指定auxValue（0）", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "物品userData，默认为None", 
                    "param_name": "userData", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "物品hover名称"
            }, 
            "state": [
                {
                    "comment": "获取物品的Hover名称", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetItemEffectName", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "获取物品的状态描述，如：§7保护 0§r", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "item的identifier", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "物品的附加值auxValue，默认为不指定auxValue（0）", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "物品userData，默认为None", 
                    "param_name": "userData", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "物品的状态描述"
            }, 
            "state": [
                {
                    "comment": "获取物品的状态描述", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetUserDataInEvent", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "使物品相关客户端事件的<a href=\"../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>参数带有userData。在mod初始化时调用即可", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "引擎事件名", 
                    "param_name": "eventName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "修复了可能对部分事件无效的问题", 
                    "operation": "修复", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "可以用物品相关客户端事件的参数中获取userData", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ChangeItemTexture", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "替换物品的贴图，修改后所有用到该贴图的物品都会被改变，后续创建的此类物品也会被改变。会同时修改物品在UI界面上的显示，手持时候的显示与场景掉落的显示。", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "物品标识符，格式[namespace:name:auxvalue]，auxvalue默认为0", 
                    "param_name": "identifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "贴图路径", 
                    "param_name": "texturePath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否修改成功（因为采用延迟加载，此处返回成功不代表贴图路径正确，路径错误会导致渲染时贴图丢失显示异常）"
            }, 
            "state": [
                {
                    "comment": "替换物品的贴图", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetItemTexture", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "获取item_texture.json中物品的贴图路径。", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "物品标识符，格式[namespace:name:auxvalue]，auxvalue默认为0", 
                    "param_name": "identifier", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "物品的贴图路径"
            }, 
            "state": [
                {
                    "comment": "获取物品的贴图", 
                    "operation": "新增", 
                    "version": "3.1", 
                    "author": "chenzhikun"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPlayerItem", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "获取玩家物品，支持获取背包（本地玩家），盔甲栏，副手以及主手物品", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "[ItemPosType枚举](../../枚举值/ItemPosType.md)", 
                    "param_name": "posType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "槽位，获取INVENTORY及ARMOR时需要设置，其他情况写0即可", 
                    "param_name": "slotPos", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否获取userData，默认为False", 
                    "param_name": "getUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>，没有物品则返回None"
            }, 
            "state": [
                {
                    "comment": "客户端获取玩家物品，支持获取盔甲栏，副手以及主手物品", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPlayerAllItems", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "获取玩家指定的槽位的批量物品信息，支持获取盔甲栏，副手以及主手物品，背包物品仅支持本地玩家", 
            "doc_class_path": [
                "玩家/背包"
            ], 
            "param": [
                {
                    "param_comment": "[ItemPosType枚举](../../枚举值/ItemPosType.md)", 
                    "param_name": "posType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否获取userData，默认为False", 
                    "param_name": "getUserData", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#物品信息字典#物品信息字典\">物品信息字典</a>的数组，没有物品的位置为None"
            }, 
            "state": [
                {
                    "comment": "客户端获取指定槽位的批量物品信息", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetAllEnchantsInfo", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "获取目前已注册的所有附魔信息", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "附魔信息字典<a href=\"../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#附魔信息字典#附魔信息字典\">附魔信息字典</a>"
            }, 
            "state": [
                {
                    "comment": "客户端获取目前已注册的所有附魔信息", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCompassTarget", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "设置指南针的朝向位置", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "方块x坐标", 
                    "param_name": "x", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "方块y坐标", 
                    "param_name": "y", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "方块z坐标", 
                    "param_name": "z", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置指南针的朝向位置", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "qyk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCompassEntity", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "设置指南针朝向的实体", 
            "doc_class_path": [
                "物品"
            ], 
            "param": [
                {
                    "param_comment": "实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置指南针朝向的实体", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "qyk"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddUseItemParticleEffect", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "在指定位置播放指定物品被开始使用时的粒子效果（如果有）。", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [
                {
                    "param_comment": "需要播放的粒子效果所属的物品名称(identifier)，例如minecraft:apple。", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "物品附加值", 
                    "param_name": "aux", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "需要播放特效的位置。", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "播放是否成功。"
            }, 
            "state": [
                {
                    "comment": "在指定位置播放指定物品被开始使用时的粒子效果", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveUseItemParticleEffect", 
            "path": "client.component.itemCompClient.ItemCompClient", 
            "desc": "停止指定位置播放的物品被开始使用时的粒子效果。", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [
                {
                    "param_comment": "需要停止的粒子效果所属的物品名称(identifier)，例如minecraft:apple。", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "物品附加值", 
                    "param_name": "aux", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "需要停止的特效的位置。", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "停止播放是否成功。"
            }, 
            "state": [
                {
                    "comment": "停止指定位置播放的物品被开始使用时的粒子效果", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.nameCompServer.NameComponentServer": [
        {
            "name": "SetName", 
            "path": "server.component.nameCompServer.NameComponentServer", 
            "desc": "用于设置生物的自定义名称，跟原版命名牌作用相同，玩家和新版流浪商人暂不支持", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "名称", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "过屏蔽字", 
                    "operation": "调整", 
                    "version": "1.21", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetName", 
            "path": "server.component.nameCompServer.NameComponentServer", 
            "desc": "获取生物的自定义名称（即使用命名牌或者SetName接口设置的名称），或者玩家的名字。", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "生物的自定义名称，或者玩家的名字"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetPlayerPrefixAndSuffixName", 
            "path": "server.component.nameCompServer.NameComponentServer", 
            "desc": "设置玩家前缀和后缀名字", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "前缀内容", 
                    "param_name": "prefix", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "前缀内容颜色描述，可以使用GenerateColor接口传入参数", 
                    "param_name": "prefixColor", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "后缀内容", 
                    "param_name": "suffix", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "后缀内容颜色描述，可以使用GenerateColor接口传入参数", 
                    "param_name": "suffixColor", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "名字颜色描述，可以使用GenerateColor接口传入参数,默认为空", 
                    "param_name": "nameColor", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增名字颜色参数", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.chatExtensionCompServer.ChatExtensionComponentServer": [
        {
            "name": "Enable", 
            "path": "server.component.chatExtensionCompServer.ChatExtensionComponentServer", 
            "desc": "启用官方聊天扩展功能。需要在ClientLoadAddonsFinishServerEvent事件中调用。仅在联机大厅和网络服中生效。", 
            "doc_class_path": [
                "实体/官方聊天扩展"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "启用结果"
            }, 
            "state": [
                {
                    "comment": "启用官方聊天扩展功能", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "xg"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "Disable", 
            "path": "server.component.chatExtensionCompServer.ChatExtensionComponentServer", 
            "desc": "关闭官方聊天扩展功能。需要在ClientLoadAddonsFinishServerEvent事件中调用。仅在联机大厅和网络服中生效。", 
            "doc_class_path": [
                "实体/官方聊天扩展"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "关闭结果"
            }, 
            "state": [
                {
                    "comment": "关闭官方聊天扩展功能", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "xg"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RegisterChatPrefix", 
            "path": "server.component.chatExtensionCompServer.ChatExtensionComponentServer", 
            "desc": "为游戏内指定玩家注册聊天前缀。仅在主界面消息框和聊天界面游戏频道生效。建议在AddServerPlayerEvent事件中调用，为新玩家添加前缀。", 
            "doc_class_path": [
                "实体/官方聊天扩展"
            ], 
            "param": [
                {
                    "param_comment": "聊天前缀文本。字数限制10，超出部分舍弃尾部字符。若在前缀文本中额外使用颜色代码会导致prefixColor参数失效，颜色代码同样占用字数限制。", 
                    "param_name": "prefix", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "聊天前缀文本颜色代码。可以使用GenerateColor接口传入参数", 
                    "param_name": "prefixColor", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "注册结果"
            }, 
            "state": [
                {
                    "comment": "官方聊天拓展功能 为游戏内指定玩家注册聊天前缀", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "wj"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetShowSocialNearbyInfo", 
            "path": "server.component.chatExtensionCompServer.ChatExtensionComponentServer", 
            "desc": "设置是否显示官方聊天社交界面中同一游戏玩家是否在附近信息。", 
            "doc_class_path": [
                "实体/官方聊天扩展"
            ], 
            "param": [
                {
                    "param_comment": "是否显示", 
                    "param_name": "show", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "官方聊天扩展功能 是否显示社交界面同一游戏的附近信息", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "wj"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "AddCommonPhrases", 
            "path": "server.component.chatExtensionCompServer.ChatExtensionComponentServer", 
            "desc": "为官方聊天扩展功能添加常用短语。单人模式下单个模组最多添加12条，联机大厅和网络服无条数限制。", 
            "doc_class_path": [
                "实体/官方聊天扩展"
            ], 
            "param": [
                {
                    "param_comment": "聊天短语的唯一id，若使用了相同的id会覆盖原有文本内容", 
                    "param_name": "id", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "聊天短语的文本内容，文本字数限制20，超出时添加失败", 
                    "param_name": "content", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "添加结果"
            }, 
            "state": [
                {
                    "comment": "官方聊天扩展功能 新增常用聊天短语", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "wj"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RemoveCommonPhrases", 
            "path": "server.component.chatExtensionCompServer.ChatExtensionComponentServer", 
            "desc": "为官方聊天扩展功能移除常用短语。", 
            "doc_class_path": [
                "实体/官方聊天扩展"
            ], 
            "param": [
                {
                    "param_comment": "聊天短语的唯一id", 
                    "param_name": "id", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "移除结果"
            }, 
            "state": [
                {
                    "comment": "官方聊天扩展功能 移除常用聊天短语", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "wj"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetShowOfficialPhrases", 
            "path": "server.component.chatExtensionCompServer.ChatExtensionComponentServer", 
            "desc": "设置是否显示官方的常用聊天短语。仅在联机大厅和网络服中生效。", 
            "doc_class_path": [
                "实体/官方聊天扩展"
            ], 
            "param": [
                {
                    "param_comment": "是否显示", 
                    "param_name": "show", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "官方聊天扩展功能 是否显示官方的常用聊天短语", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "wj"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.explosionCompServer.ExplosionComponentServer": [
        {
            "name": "CreateExplosion", 
            "path": "server.component.explosionCompServer.ExplosionComponentServer", 
            "desc": "用于生成爆炸", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "爆炸位置", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "爆炸威力，具体含义可参考[wiki](https://zh.minecraft.wiki/w/%E7%88%86%E7%82%B8)对爆炸的解释", 
                    "param_name": "radius", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否带火", 
                    "param_name": "fire", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否破坏方块", 
                    "param_name": "breaks", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "爆炸伤害源的实体id", 
                    "param_name": "sourceId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "爆炸创造的实体id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "client.component.postProcessControlComp.PostProcessComponent": [
        {
            "name": "SetEnableByName", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "设置是否开启自定义后处理效果", 
            "doc_class_path": [
                "后处理/自定义"
            ], 
            "param": [
                {
                    "param_comment": "后处理效果名，名称为graphics_settings/post_process.json中定义的后处理效果名", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否开启自定义效果，True为开启，False为关闭。", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "开关自定义后处理效果", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CheckEnabledByName", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "查询是否开启了自定义后处理效果", 
            "doc_class_path": [
                "后处理/自定义"
            ], 
            "param": [
                {
                    "param_comment": "需要查询的后处理效果名，名称为graphics_settings/post_process.json中定义的后处理效果名", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否已经开启。已开启返回True，否则返回False"
            }, 
            "state": [
                {
                    "comment": "查询是否开启了自定义后处理效果", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetParameter", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "设置自定义后处理shader的自定义参数值", 
            "doc_class_path": [
                "后处理/自定义"
            ], 
            "param": [
                {
                    "param_comment": "要修改的后处理效果名，名称为graphics_settings/post_process.json中定义的后处理效果名", 
                    "param_name": "postName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "要修改的参数名，名称来自后处理效果定义中的paras字段", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "修改后的后处理参数值，长度必须与post_process.json中对应的参数定义一致(float/list/tuple)", 
                    "param_name": "paramValue", 
                    "param_type": "any"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置自定义后处理参数", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "dengruitao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetParameter", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "获取指定自定义后处理参数的值", 
            "doc_class_path": [
                "后处理/自定义"
            ], 
            "param": [
                {
                    "param_comment": "需要获取的后处理效果名，名称为graphics_settings/post_process.json中定义的后处理效果名", 
                    "param_name": "postName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "需要的参数名，名称来自后处理效果定义中的paras字段", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "any", 
                "return_comment": "后处理参数的值，如果该参数的长度只有1个值，则返回float，如果长度超过1个，则返回list，list的长度不超过4。返回失败则返回None"
            }, 
            "state": [
                {
                    "comment": " 获取指定自定义后处理参数的值", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "InsertPassToPostprocess", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "往自定义后处理的多pass中的指定位置插入自定义pass。多pass指定的是graphics_settings/post_process.json中的\"pass_array\"渲染pass数组。这个后处理会按照这个数组所定义的pass来逐个渲染，每个pass之间的像素输入输出相互连接，即pass数组中第一个pass所使用的fragment shader中的TEXTURE_0为游戏原始输出到屏幕的像素信息。下一个pass所使用的fragment shader中的TEXTURE_0为上一个Pass的fragment shader的输出。最后一个pass的fragment shader的输出即为输出到游戏屏幕的像素信息。", 
            "doc_class_path": [
                "后处理/自定义"
            ], 
            "param": [
                {
                    "param_comment": "需要增加自定义pass的后处理效果名，名称为graphics_settings/post_process.json中定义的后处理效果名", 
                    "param_name": "postName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "自定义pass插入的位置下标。下标的范围不能超过该自定义后处理目前包含的pass数组的大小，同时必须大于等于0。", 
                    "param_name": "index", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "自定义pass的定义字典。", 
                    "param_name": "passDict", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "插入操作是否成功，成功返回True，失败则返回False"
            }, 
            "state": [
                {
                    "comment": " 往自定义后处理的多pass中的指定位置插入自定义pass", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "PushBackPassToPostprocess", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "往自定义后处理的多pass最末尾插入自定义pass。多pass指定的是graphics_settings/post_process.json中的\"pass_array\"渲染pass数组。这个后处理会按照这个数组所定义的pass来逐个渲染，每个pass之间的像素输入输出相互连接，即pass数组中第一个pass所使用的fragment shader中的TEXTURE_0为游戏原始输出到屏幕的像素信息。下一个pass所使用的fragment shader中的TEXTURE_0为上一个Pass的fragment shader的输出。最后一个pass的fragment shader的输出即为输出到游戏屏幕的像素信息。", 
            "doc_class_path": [
                "后处理/自定义"
            ], 
            "param": [
                {
                    "param_comment": "需要增加自定义pass的后处理效果名，名称为graphics_settings/post_process.json中定义的后处理效果名", 
                    "param_name": "postName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "自定义pass的定义字典。", 
                    "param_name": "passDict", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "插入操作是否成功，成功返回True，失败则返回False"
            }, 
            "state": [
                {
                    "comment": " 往自定义后处理的多pass的最末尾插入自定义pass", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemovePassInPostprocess", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "删除自定义后处理的多pass中指定位置的pass。多pass指定的是graphics_settings/post_process.json中的\"pass_array\"渲染pass数组。这个后处理会按照这个数组所定义的pass来逐个渲染，每个pass之间的像素输入输出相互连接，即pass数组中第一个pass所使用的fragment shader中的TEXTURE_0为游戏原始输出到屏幕的像素信息。下一个pass所使用的fragment shader中的TEXTURE_0为上一个Pass的fragment shader的输出。最后一个pass的fragment shader的输出即为输出到游戏屏幕的像素信息。", 
            "doc_class_path": [
                "后处理/自定义"
            ], 
            "param": [
                {
                    "param_comment": "需要删除自定义pass的后处理效果名，名称为graphics_settings/post_process.json中定义的后处理效果名", 
                    "param_name": "postName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "需要删除的自定义pass的位置下标。下标的范围不能大于或等于该自定义后处理目前包含的pass数组的大小，同时必须大于等于0。", 
                    "param_name": "index", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "包含所删除的自定义pass的数据字典。删除失败则返回None。"
            }, 
            "state": [
                {
                    "comment": " 删除自定义后处理的多pass中指定位置的pass", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "PopBackPassInPostprocess", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "删除自定义后处理的多pass的最末尾的pass。多pass指定的是graphics_settings/post_process.json中的\"pass_array\"渲染pass数组。这个后处理会按照这个数组所定义的pass来逐个渲染，每个pass之间的像素输入输出相互连接，即pass数组中第一个pass所使用的fragment shader中的TEXTURE_0为游戏原始输出到屏幕的像素信息。下一个pass所使用的fragment shader中的TEXTURE_0为上一个Pass的fragment shader的输出。最后一个pass的fragment shader的输出即为输出到游戏屏幕的像素信息。", 
            "doc_class_path": [
                "后处理/自定义"
            ], 
            "param": [
                {
                    "param_comment": "需要删除自定义pass的后处理效果名，名称为graphics_settings/post_process.json中定义的后处理效果名", 
                    "param_name": "postName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "dict", 
                "return_comment": "包含所删除的自定义pass的数据字典。删除失败则返回None。"
            }, 
            "state": [
                {
                    "comment": " 删除自定义后处理的多pass的最末尾的pass", 
                    "operation": "新增", 
                    "version": "2.9", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "PostPassResultToOtherPass", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "将自定义pass的纹理结果传递到其他自定义pass的fragmentShader指定纹理单元槽位", 
            "doc_class_path": [
                "后处理/自定义"
            ], 
            "param": [
                {
                    "param_comment": "发送纹理单元的自定义pass的后处理效果名，名称为graphics_settings/post_process.json中定义的后处理效果名", 
                    "param_name": "sourceProcessName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "源process中需要传递的自定义pass在process中的下标，从0开始计数。", 
                    "param_name": "sourcePassIndex", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "接收纹理单元的自定义pass的后处理效果名，名称为graphics_settings/post_process.json中定义的后处理效果名", 
                    "param_name": "destProcessName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "接收的process中自定义pass在process中的下标，从0开始计数。", 
                    "param_name": "destPassIndex", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "接收pass中framentShader中的纹理单元槽位，取值范围3~7，0~2已被占用，0为上个pass处理后的颜色缓冲，1为未做后处理的原始颜色缓冲，2为深度缓冲。", 
                    "param_name": "glTextureIndex", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "连接操作是否成功，成功返回True，失败则返回False"
            }, 
            "state": [
                {
                    "comment": " 将自定义pass的纹理结果传递到其他自定义pass的fragmentShader指定纹理单元槽位", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "AddPostProcess", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "添加后处理效果，与graphics_settings/post_process.json定义的process等效", 
            "doc_class_path": [
                "后处理/自定义"
            ], 
            "param": [
                {
                    "param_comment": "process的定义字典，格式参考graphics_settings/post_process.json", 
                    "param_name": "processDict", 
                    "param_type": "dict"
                }, 
                {
                    "param_comment": "插入位置下标，从0开始计数。可通过[GetPostProcessOrder接口](#getpostprocessorder)获取，缺省或负值则默认添加到最后。", 
                    "param_name": "index", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "连接操作是否成功，成功返回True，失败则返回False"
            }, 
            "state": [
                {
                    "comment": "添加后处理效果，与graphics_settings/post_process.json定义的process等效", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "cxz"
                }, 
                {
                    "comment": "index缺省或负值现在会默认添加到最后", 
                    "operation": "调整", 
                    "version": "3.2", 
                    "author": "xgb"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPostProcessOrder", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "获取后处理效果的渲染顺序", 
            "doc_class_path": [
                "后处理/自定义"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "后处理效果的渲染顺序，获取失败或未开启后处理返回None"
            }, 
            "state": [
                {
                    "comment": "获取后处理效果的渲染顺序", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetEnableVignette", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "设置是否开启屏幕渐晕（Vignette）效果，开启后玩家屏幕周围将出现渐晕，可通过Vignette其他接口设置效果参数。", 
            "doc_class_path": [
                "后处理/渐晕"
            ], 
            "param": [
                {
                    "param_comment": "是否开启Vignette效果，True为开启，False为关闭。", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "是否开启渐晕效果", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CheckVignetteEnabled", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "检测是否开启了屏幕渐晕（Vignette）效果。", 
            "doc_class_path": [
                "后处理/渐晕"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True为已开启，False为已关闭。"
            }, 
            "state": [
                {
                    "comment": "检测是否开启渐晕（Vignette）效果", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetVignetteRGB", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "设置渐晕（Vignette）的渐晕颜色，可改变屏幕渐晕的颜色。", 
            "doc_class_path": [
                "后处理/渐晕"
            ], 
            "param": [
                {
                    "param_comment": "按顺序分别为颜色的RGB值，值的范围为[0,255]，小于或大于这个范围的值将被截取为边界值0或255", 
                    "param_name": "color", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置渐晕（Vignette）的渐晕颜色", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetVignetteCenter", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "设置渐晕（Vignette）的渐晕中心位置，可改变屏幕渐晕的位置。", 
            "doc_class_path": [
                "后处理/渐晕"
            ], 
            "param": [
                {
                    "param_comment": "按顺序分别为屏幕位置的x及y值。", 
                    "param_name": "center", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置渐晕（Vignette）的渐晕中心位置", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetVignetteRadius", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "设置渐晕（Vignette）的渐晕半径，半径越大，渐晕越小，玩家的视野范围越大。", 
            "doc_class_path": [
                "后处理/渐晕"
            ], 
            "param": [
                {
                    "param_comment": "渐晕半径大小，值的范围为[0,1]，小于或大于这个范围的值将被截取为边界值0或1", 
                    "param_name": "radius", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置渐晕（Vignette）的渐晕半径", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetVignetteSmoothness", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "设置渐晕（Vignette）的渐晕模糊系数，模糊系数越大，则渐晕边缘越模糊，模糊的范围也越大", 
            "doc_class_path": [
                "后处理/渐晕"
            ], 
            "param": [
                {
                    "param_comment": "渐晕模糊系数，值的范围为[0,1]，小于或大于这个范围的值将被截取为边界值0或1", 
                    "param_name": "radius", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置渐晕（Vignette）的渐晕模糊系数", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetEnableGaussianBlur", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "设置是否开启高斯模糊效果，开启后玩家屏幕周围被模糊，可通过高斯模糊其他接口设置效果参数。", 
            "doc_class_path": [
                "后处理/模糊"
            ], 
            "param": [
                {
                    "param_comment": "是否开启高斯模糊效果，True为开启，False为关闭。", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "是否开启高斯模糊效果", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CheckGaussianBlurEnabled", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "检测是否开启了高斯模糊效果。", 
            "doc_class_path": [
                "后处理/模糊"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True为已开启，False为已关闭。"
            }, 
            "state": [
                {
                    "comment": "检测是否开启高斯模糊效果", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetGaussianBlurRadius", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "设置高斯模糊效果的模糊半径，半径越大，模糊程度越大，反之则模糊程度越小。", 
            "doc_class_path": [
                "后处理/模糊"
            ], 
            "param": [
                {
                    "param_comment": "模糊半径大小，值的范围为[0,10]，小于或大于这个范围的值将被截取为边界值0或10", 
                    "param_name": "radius", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置高斯模糊效果的模糊半径", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetEnableColorAdjustment", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "设置是否开启色彩校正效果，开启后可进行屏幕色彩调整，可通过色彩校正效果其他接口设置效果参数。", 
            "doc_class_path": [
                "后处理/色彩"
            ], 
            "param": [
                {
                    "param_comment": "是否开启色彩校正效果，True为开启，False为关闭。", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "是否开启色彩校正效果", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CheckColorAdjustmentEnabled", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "检测是否开启了色彩校正效果。", 
            "doc_class_path": [
                "后处理/色彩"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True为已开启，False为已关闭。"
            }, 
            "state": [
                {
                    "comment": "检测是否开启色彩校正效果", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetColorAdjustmentBrightness", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "调整屏幕色彩亮度，亮度值越大，屏幕越亮，反之则越暗。", 
            "doc_class_path": [
                "后处理/色彩"
            ], 
            "param": [
                {
                    "param_comment": "亮度值大小，值的范围为[0,5]，小于或大于这个范围的值将被截取为边界值0或5", 
                    "param_name": "brightness", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "调整屏幕色彩亮度值", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetColorAdjustmentSaturation", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "调整屏幕色彩饱和度，屏幕饱和度值越大，色彩则越明显，反之则越灰暗。", 
            "doc_class_path": [
                "后处理/色彩"
            ], 
            "param": [
                {
                    "param_comment": "饱和度值大小，值的范围为[0,5]，小于或大于这个范围的值将被截取为边界值0或5", 
                    "param_name": "saturation", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "调整屏幕色彩饱和度", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetColorAdjustmentContrast", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "调整屏幕色彩对比度，屏幕对比度值越大，色彩差异则越明显，反之则色彩差异越小。", 
            "doc_class_path": [
                "后处理/色彩"
            ], 
            "param": [
                {
                    "param_comment": "对比度值大小，值的范围为[0,5]，小于或大于这个范围的值将被截取为边界值0或5", 
                    "param_name": "contrast", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "调整屏幕色彩对比度", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetColorAdjustmentTint", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "调整屏幕色彩的色调，根据输入的色调和强度来调整屏幕色彩，当强度越大时，屏幕整体颜色越偏向输入的色调。", 
            "doc_class_path": [
                "后处理/色彩"
            ], 
            "param": [
                {
                    "param_comment": "色调强度，值的范围为[0,1]，小于或大于这个范围的值将被截取为边界值0或1", 
                    "param_name": "intensity", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "色调值，按顺序分别为颜色的RGB值，值的范围为[0,255]，小于或大于这个范围的值将被截取为边界值0或255", 
                    "param_name": "color", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "调整屏幕色彩的色调", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetEnableLensStain", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "设置是否开启镜头污迹效果，开启后镜头出现污迹效果，可改变使用的污迹贴图及污迹颜色。", 
            "doc_class_path": [
                "后处理/镜头效果"
            ], 
            "param": [
                {
                    "param_comment": "是否开启镜头污迹效果，True为开启，False为关闭。", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "是否开启镜头污迹效果", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CheckLensStainEnabled", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "检测是否开启了镜头污迹效果。", 
            "doc_class_path": [
                "后处理/镜头效果"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True为已开启，False为已关闭。"
            }, 
            "state": [
                {
                    "comment": "检测是否开启镜头污迹效果", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetLensStainTexture", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "开启镜头污迹效果后，污迹效果使用的为系统默认贴图。该接口可改变镜头污迹所使用的贴图。注意贴图最好使用透明背景，否则屏幕将被贴图覆盖。", 
            "doc_class_path": [
                "后处理/镜头效果"
            ], 
            "param": [
                {
                    "param_comment": "贴图的相对路径，以“textures/\"开头，不需要后缀名", 
                    "param_name": "texturePath", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "改变镜头污迹所使用的贴图", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ResetLensStainTexture", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "重置污迹效果使用的贴图为系统默认贴图。", 
            "doc_class_path": [
                "后处理/镜头效果"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "重置镜头污迹所使用的贴图为系统默认贴图", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetLensStainIntensity", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "调整镜头污迹强度，强度越大，污迹越明显，反之则越透明。", 
            "doc_class_path": [
                "后处理/镜头效果"
            ], 
            "param": [
                {
                    "param_comment": "镜头污迹强度值大小，值的范围为[0,1]，小于或大于这个范围的值将被截取为边界值0或1", 
                    "param_name": "intensity", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "调整镜头污迹强度", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetLensStainColor", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "调整镜头污迹颜色，根据输入的颜色和强度来调整污迹色彩，当强度越大时，污迹颜色越偏向输入的颜色。", 
            "doc_class_path": [
                "后处理/镜头效果"
            ], 
            "param": [
                {
                    "param_comment": "颜色强度，值的范围为[0,1]，小于或大于这个范围的值将被截取为边界值0或1", 
                    "param_name": "intensity", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "颜色值，按顺序分别为颜色的RGB值，值的范围为[0,255]，小于或大于这个范围的值将被截取为边界值0或255", 
                    "param_name": "color", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "调整镜头污迹颜色", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetEnableDepthOfField", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "设置是否开启景深效果，开启后屏幕出现景深效果，根据焦点距离呈现远处模糊近处清晰或者近处模糊远处清晰的效果。", 
            "doc_class_path": [
                "后处理/镜头效果"
            ], 
            "param": [
                {
                    "param_comment": "是否开启景深效果，True为开启，False为关闭。", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "是否开启景深效果", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CheckDepthOfFieldEnabled", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "检测是否开启了景深效果。", 
            "doc_class_path": [
                "后处理/镜头效果"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True为已开启，False为已关闭。"
            }, 
            "state": [
                {
                    "comment": "检测是否开启景深效果", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetDepthOfFieldFocusDistance", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "调整景深效果焦点距离，距离越小，则远处模糊，近处清晰；距离越大，则远处清晰，近处模糊。该距离为实际距离，即以玩家相机为起点的世界坐标距离。", 
            "doc_class_path": [
                "后处理/镜头效果"
            ], 
            "param": [
                {
                    "param_comment": "焦点距离值大小，值的范围为[0,100]，小于或大于这个范围的值将被截取为边界值0或100。距离值接近100时将被视为无限远的远景。", 
                    "param_name": "distance", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "调整景深效果焦点距离", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetDepthOfFieldBlurRadius", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "调整景深效果模糊半径，模糊半径越大，模糊程度越大，反之则越小。", 
            "doc_class_path": [
                "后处理/镜头效果"
            ], 
            "param": [
                {
                    "param_comment": "模糊半径值大小，值的范围为[0,5]，小于或大于这个范围的值将被截取为边界值0或5", 
                    "param_name": "radius", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "调整景深效果模糊半径", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetDepthOfFieldNearBlurScale", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "调整景深效果近景模糊大小，近景模糊大小越大，近景的模糊程度越大，反之则越小。注意，近景模糊程度的调节依赖于焦点距离，如果焦点处于较近的距离，那么此时近景处于较清晰的状态，模糊程度大小调节不会很明显。", 
            "doc_class_path": [
                "后处理/镜头效果"
            ], 
            "param": [
                {
                    "param_comment": "近景模糊大小，值的范围为[0,15]，小于或大于这个范围的值将被截取为边界值0或15", 
                    "param_name": "scale", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "调整景深效果近景模糊大小", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetDepthOfFieldFarBlurScale", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "调整景深效果远景模糊大小，远景模糊大小越大，远景的模糊程度越大，反之则越小。注意，远景模糊程度的调节依赖于焦点距离，如果焦点处于较近的距离，那么此时远景处于较清晰的状态，模糊程度大小调节不会很明显。", 
            "doc_class_path": [
                "后处理/镜头效果"
            ], 
            "param": [
                {
                    "param_comment": "远景模糊大小，值的范围为[0,15]，小于或大于这个范围的值将被截取为边界值0或15", 
                    "param_name": "scale", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "调整景深效果远景模糊大小", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetDepthOfFieldUseCenterFocus", 
            "path": "client.component.postProcessControlComp.PostProcessComponent", 
            "desc": "设置景深效果是否开启屏幕中心聚焦模式，开启后聚焦距离将被自动设置为屏幕中心所对应的物体所在的距离。在第一人称视角下，聚焦距离将被自动设置为屏幕准心所对应的物体与相机的距离，即自动聚焦准心所对应的物体。在第三人称视角下，由于屏幕中心总是对应着玩家，因此聚焦距离将被自动设置为玩家与相机的距离，即自动聚焦在玩家自己。", 
            "doc_class_path": [
                "后处理/镜头效果"
            ], 
            "param": [
                {
                    "param_comment": "是否开启景深效果屏幕中心聚焦模式，True为开启，False为关闭。开启后，原有的焦点距离设置将不再有效，接口SetDepthOfFieldFocusDistance也将失效。", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置景深效果是否开启屏幕中心聚焦模式", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.flyCompServer.FlyComponentServer": [
        {
            "name": "IsPlayerCanFly", 
            "path": "server.component.flyCompServer.FlyComponentServer", 
            "desc": "获取玩家能否飞行", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True:是 False:否"
            }, 
            "state": [
                {
                    "comment": "获取玩家能否飞行", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsPlayerFlying", 
            "path": "server.component.flyCompServer.FlyComponentServer", 
            "desc": "获取玩家是否在飞行", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True:是 False:否"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否在飞行", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "ChangePlayerFlyState", 
            "path": "server.component.flyCompServer.FlyComponentServer", 
            "desc": "给予/取消飞行能力, 并根据enterFly参数确定是否进入飞行状态", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "给予/取消飞行能力", 
                    "param_name": "isFly", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "是否进入飞行状态，当isFly为true时，该参数才有效，其他情况下均为false", 
                    "param_name": "enterFly", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True:是 False:否；是否设置成功"
            }, 
            "state": [
                {
                    "comment": "给予/取消飞行能力，并且进入飞行/非飞行状态", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "新增使用限制说明", 
                    "operation": "调整", 
                    "version": "2.0", 
                    "author": "guanmingyu"
                }, 
                {
                    "comment": "增加是否进入飞行状态参数", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.ui.controls.textEditBoxUIControl.TextEditBoxUIControl": [
        {
            "name": "GetEditText", 
            "path": "client.ui.controls.textEditBoxUIControl.TextEditBoxUIControl", 
            "desc": "获取edit_box输入框的文本信息，获取失败会返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "文本信息"
            }, 
            "state": [
                {
                    "comment": "获取edit_box输入框的文本信息", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "lidi"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetEditText", 
            "path": "client.ui.controls.textEditBoxUIControl.TextEditBoxUIControl", 
            "desc": "设置edit_box输入框的文本信息", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "文本的内容", 
                    "param_name": "text", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "设置edit_box输入框的文本信息", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "lidi"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetEditTextMaxLength", 
            "path": "client.ui.controls.textEditBoxUIControl.TextEditBoxUIControl", 
            "desc": "设置输入框的最大输入长度", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "输入框可输入的最大长度，取值[0, +∞)", 
                    "param_name": "maxLength", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.collisionBoxCompServer.CollisionBoxComponentServer": [
        {
            "name": "SetSize", 
            "path": "server.component.collisionBoxCompServer.CollisionBoxComponentServer", 
            "desc": "设置实体的包围盒。设置过大会导致游戏卡顿。实体的scale的立方乘以包围盒的体积不可超过32768", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "第一位表示宽度和长度，第二位表示高度", 
                    "param_name": "size", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetSize", 
            "path": "server.component.collisionBoxCompServer.CollisionBoxComponentServer", 
            "desc": "获取实体的包围盒", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "包围盒大小"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "client.component.deviceCompClient.DeviceCompClient": [
        {
            "name": "SetDeviceVibrate", 
            "path": "client.component.deviceCompClient.DeviceCompClient", 
            "desc": "设置设备震动", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "震动时间（单位：毫秒），iOS设备该参数无效，无论传入多少均只震动一下，替代方案：可以通过高频调用实现长震动，如每秒调用本接口30次。", 
                    "param_name": "milliSeconds", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "支持iOS震动，取消内置cd及震动时长上限", 
                    "operation": "调整", 
                    "version": "3.3", 
                    "author": "lidi"
                }, 
                {
                    "comment": "可以设置设备震动", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "common.component.blockPaletteComp.BlockPaletteComponent": [
        {
            "name": "SerializeBlockPalette", 
            "path": "common.component.blockPaletteComp.BlockPaletteComponent", 
            "desc": "序列化方块调色板中的数据，用于方块调色板在客户端及服务端的事件数据之间传输。", 
            "doc_class_path": [
                "方块/方块调色板"
            ], 
            "param": [], 
            "return": {
                "return_type": "dict", 
                "return_comment": "方块调色板的序列化数据"
            }, 
            "state": [
                {
                    "comment": "序列化方块调色板中的数据，用于方块调色板在客户端及服务端的事件数据之间传输", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "服务端/客户端"
        }, 
        {
            "name": "DeserializeBlockPalette", 
            "path": "common.component.blockPaletteComp.BlockPaletteComponent", 
            "desc": "反序列化方块调色板数据字典中的数据，用于方块调色板在客户端及服务端的事件数据之间传输。", 
            "doc_class_path": [
                "方块/方块调色板"
            ], 
            "param": [
                {
                    "param_comment": "方块调色板数据字典。使用接口SerializeBlockPalette获取。", 
                    "param_name": "dataDict", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "反序列化是否成功，成功返回True，失败返回False"
            }, 
            "state": [
                {
                    "comment": "反序列化方块调色板数据字典中的数据，用于方块调色板在客户端及服务端的事件数据之间传输", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "服务端/客户端"
        }, 
        {
            "name": "GetBlockCountInBlockPalette", 
            "path": "common.component.blockPaletteComp.BlockPaletteComponent", 
            "desc": "获取方块调色板BlockPalette中某个类型的方块的数量。", 
            "doc_class_path": [
                "方块/方块调色板"
            ], 
            "param": [
                {
                    "param_comment": "方块名称", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块附加值。可选参数，默认值为-1。不填写方块附加值时获取所有符合这个名称的方块的数量。", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "返回该类型的方块数量"
            }, 
            "state": [
                {
                    "comment": "获取方块调色板BlockPalette中某个类型的方块的数量", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "服务端/客户端"
        }, 
        {
            "name": "DeleteBlockInBlockPalette", 
            "path": "common.component.blockPaletteComp.BlockPaletteComponent", 
            "desc": "删除方块调色板BlockPalette中某个类型的方块。", 
            "doc_class_path": [
                "方块/方块调色板"
            ], 
            "param": [
                {
                    "param_comment": "方块名称。", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块附加值。可选参数，默认值为-1。不填写方块附加值时删除所有符合这个名称的方块。", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "返回成功删除的方块数量"
            }, 
            "state": [
                {
                    "comment": "删除方块调色板BlockPalette中某个类型的方块", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "服务端/客户端"
        }, 
        {
            "name": "ReplaceBlockInBlockPalette", 
            "path": "common.component.blockPaletteComp.BlockPaletteComponent", 
            "desc": "替换方块调色板BlockPalette中某个类型的方块。", 
            "doc_class_path": [
                "方块/方块调色板"
            ], 
            "param": [
                {
                    "param_comment": "新的方块名称。", 
                    "param_name": "newblockName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "新的方块的附加值。", 
                    "param_name": "newBlockAux", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "将要被替换的方块名称。", 
                    "param_name": "oldBlockName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "将要被替换的方块名称的附加值。可选参数。不填写附加值时将替换所有符合这个名称的方块。", 
                    "param_name": "oldBlockAux", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "返回成功替换的方块数量"
            }, 
            "state": [
                {
                    "comment": "替换方块调色板BlockPalette中某个类型的方块", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "服务端/客户端"
        }, 
        {
            "name": "ReplaceAirByStructureVoid", 
            "path": "common.component.blockPaletteComp.BlockPaletteComponent", 
            "desc": "设置是否将方块调色板BlockPalette中所有空气替换为结构空位。", 
            "doc_class_path": [
                "方块/方块调色板"
            ], 
            "param": [
                {
                    "param_comment": "是否将空气方块替换为结构空位。True为替换为结构空位，False为使用空气方块", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "替换是否成功，成功返回True，失败返回False"
            }, 
            "state": [
                {
                    "comment": "设置是否将方块调色板BlockPalette中所有空气替换为结构空位", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "服务端/客户端"
        }, 
        {
            "name": "GetVolumeOfBlockPalette", 
            "path": "common.component.blockPaletteComp.BlockPaletteComponent", 
            "desc": "获取方块调色板BlockPalette所占据的长方体的长宽高。长指的是在方块调色板BlockPalette在世界坐标中占据的x轴方向的长度，宽指的是z轴方向的长度，高指的是y轴方向的长度。", 
            "doc_class_path": [
                "方块/方块调色板"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(int,int,int)", 
                "return_comment": "返回方块调色板BlockPalette的长宽高元组，按顺序分别为长，宽，高的数值。"
            }, 
            "state": [
                {
                    "comment": "获取方块调色板BlockPalette所占据的长方体的长宽高", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "服务端/客户端"
        }, 
        {
            "name": "GetLocalPosListOfBlocks", 
            "path": "common.component.blockPaletteComp.BlockPaletteComponent", 
            "desc": "获取方块调色板中某种方块的相对位置列表。方块调色板记录了多个方块组成的一个三维空间下的方块组合，而相对位置则指的是，以这些方块中最小坐标的方块所在位置作为原点的坐标轴下的相对位置。", 
            "doc_class_path": [
                "方块/方块调色板"
            ], 
            "param": [
                {
                    "param_comment": "方块名称。", 
                    "param_name": "blockName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "方块附加值。可选参数，默认值为-1。不填写方块附加值时则获取所有符合这个方块名称的方块的相对位置列表。", 
                    "param_name": "auxValue", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(tuple(int,int,int))", 
                "return_comment": "返回该类型方块的所占据相对位置列表。如该方块不存在，则返回空列表。"
            }, 
            "state": [
                {
                    "comment": "获取方块调色板中某种方块的相对位置列表", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "服务端/客户端"
        }
    ], 
    "server.component.interactCompServer.InteractComponentServer": [
        {
            "name": "SetEntityInteractFilter", 
            "path": "server.component.interactCompServer.InteractComponentServer", 
            "desc": "设置与生物可交互的条件", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "交互列表下标", 
                    "param_name": "index", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "可交互的条件", 
                    "param_name": "interactFilter", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "设置与生物可交互的条件", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "xiegang"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.actorOwnerCompServer.ActorOwnerComponentServer": [
        {
            "name": "SetEntityOwner", 
            "path": "server.component.actorOwnerCompServer.ActorOwnerComponentServer", 
            "desc": "设置实体的属主（包括可驯服生物的主人，或者掉落物的丢弃者，弹射物的发射者等）", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "属主实体id，为None时设置实体的属主为空", 
                    "param_name": "targetId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功，True表示设置成功"
            }, 
            "state": [
                {
                    "comment": "设置实体的属主", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "linzhiyi"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntityOwner", 
            "path": "server.component.actorOwnerCompServer.ActorOwnerComponentServer", 
            "desc": "获取实体的属主（包括可驯服生物的主人，或者掉落物的丢弃者，弹射物的发射者等）", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "实体属主id"
            }, 
            "state": [
                {
                    "comment": "获取实体的属主", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.actionCompClient.ActionCompClient": [
        {
            "name": "GetAttackTarget", 
            "path": "client.component.actionCompClient.ActionCompClient", 
            "desc": "获取仇恨目标", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "返回仇恨目标的实体id。如果传入的实体id所对应的实体没有仇恨目标，则返回-1。如果传入的实体id所对应的实体不存在，则返回None。"
            }, 
            "state": [
                {
                    "comment": "客户端获取仇恨目标", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.nameCompClient.NameComponentClient": [
        {
            "name": "SetShowName", 
            "path": "client.component.nameCompClient.NameComponentClient", 
            "desc": "设置生物名字是否按照默认游戏逻辑显示（包括玩家）", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "True为显示", 
                    "param_name": "show", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回是否设置成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "IsShowName", 
            "path": "client.component.nameCompClient.NameComponentClient", 
            "desc": "获取生物名字是否按照默认游戏逻辑显示（包括玩家）", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回是否按照默认游戏逻辑显示"
            }, 
            "state": [
                {
                    "comment": "新增获取实体nametag是否（按游戏默认逻辑）显示", 
                    "operation": "新增", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetAlwaysShowName", 
            "path": "client.component.nameCompClient.NameComponentClient", 
            "desc": "设置生物名字是否一直显示，瞄准点不指向生物时也能显示", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "True为显示", 
                    "param_name": "show", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回是否设置成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetName", 
            "path": "client.component.nameCompClient.NameComponentClient", 
            "desc": "获取生物的自定义名称（即使用命名牌或者SetName接口设置的名称），或者玩家的名字。", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "生物的自定义名称，或者玩家的名字"
            }, 
            "state": [
                {
                    "comment": "客户端获取生物的自定义名称", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.breathCompServer.BreathCompServer": [
        {
            "name": "GetUnitBubbleAirSupply", 
            "path": "server.component.breathCompServer.BreathCompServer", 
            "desc": "单位气泡数对应的氧气储备值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "单位气泡数对应的氧气储备值"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetCurrentAirSupply", 
            "path": "server.component.breathCompServer.BreathCompServer", 
            "desc": "生物当前氧气储备值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "生物当前氧气储备值"
            }, 
            "state": [
                {
                    "comment": "新增备注说明", 
                    "operation": "调整", 
                    "version": "1.19", 
                    "author": "why117"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetMaxAirSupply", 
            "path": "server.component.breathCompServer.BreathCompServer", 
            "desc": "获取生物最大氧气储备值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "最大氧气储备值"
            }, 
            "state": [
                {
                    "comment": "新增备注说明", 
                    "operation": "调整", 
                    "version": "1.19", 
                    "author": "why117"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetCurrentAirSupply", 
            "path": "server.component.breathCompServer.BreathCompServer", 
            "desc": "设置生物氧气储备值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "设置生物当前氧气值", 
                    "param_name": "data", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "新增备注说明", 
                    "operation": "调整", 
                    "version": "1.19", 
                    "author": "why117"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetMaxAirSupply", 
            "path": "server.component.breathCompServer.BreathCompServer", 
            "desc": "设置生物最大氧气储备值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "设置生物最大氧气值", 
                    "param_name": "data", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置结果"
            }, 
            "state": [
                {
                    "comment": "新增备注说明", 
                    "operation": "调整", 
                    "version": "1.19", 
                    "author": "why117"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "IsConsumingAirSupply", 
            "path": "server.component.breathCompServer.BreathCompServer", 
            "desc": "获取生物当前是否在消耗氧气", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否消耗氧气"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "SetRecoverTotalAirSupplyTime", 
            "path": "server.component.breathCompServer.BreathCompServer", 
            "desc": "设置恢复最大氧气量的时间，单位秒", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "恢复生物最大氧气值", 
                    "param_name": "timeSec", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置恢复最大氧气量的时间", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "why117"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "server.component.itemBannedCompServer.ItemBannedCompServer": [
        {
            "name": "AddBannedItem", 
            "path": "server.component.itemBannedCompServer.ItemBannedCompServer", 
            "desc": "增加禁用物品", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "物品标识符，格式[namespace:name:auxvalue]，auxvalue默认为0，auxvalue为*时候匹配任意auxvalue值。例如：minecraft:egg（也可以通过填写配置文件config/banned_items.json进行启动禁用）", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否增加成功"
            }, 
            "state": [
                {
                    "comment": "修复禁用打火石后引燃TNT仍起效问题", 
                    "operation": "修复", 
                    "version": "1.22", 
                    "author": "xujiarong"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetBannedItemList", 
            "path": "server.component.itemBannedCompServer.ItemBannedCompServer", 
            "desc": "获取禁用物品列表", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(str)或None", 
                "return_comment": "禁用物品列表或者None(异常情况),list元素为物品标识符,格式[namespace:name:auxvalue]，auxvalue默认为0，auxvalue为*时候匹配任意auxvalue值。"
            }, 
            "state": [
                {
                    "comment": "新增获取禁用物品列表", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "jishaobin"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RemoveBannedItem", 
            "path": "server.component.itemBannedCompServer.ItemBannedCompServer", 
            "desc": "移除禁用物品", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [
                {
                    "param_comment": "物品标识符，格式[namespace:name:auxvalue]，auxvalue默认为0，auxvalue为*时候匹配任意auxvalue值。", 
                    "param_name": "itemName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否移除成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "ClearBannedItems", 
            "path": "server.component.itemBannedCompServer.ItemBannedCompServer", 
            "desc": "清空禁用物品", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否清空成功"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "client.component.particleControlComp.ParticleControlComp": [
        {
            "name": "Play", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "播放粒子特效", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "Pause", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "暂停播放，粒子定格在当前时刻，再次调用Play时继续播放", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "暂停粒子播放", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Stop", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "停止粒子播放", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetRelative", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "当粒子绑定了entity或骨骼模型时，发射出的粒子使用entity坐标系还是世界坐标系。与mcstudio特效编辑器中粒子的“相对挂点运动”选项功能相同。", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [
                {
                    "param_comment": "True表示相对坐标系，False表示世界坐标系", 
                    "param_name": "relative", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetLayer", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "粒子默认层级为1，当层级不为1时表示该特效开启特效分层渲染功能。特效（粒子和帧动画）分层渲染时，层级越高渲染越靠后，层级大的会遮挡层级低的，且同一层级的特效会根据特效的相对位置产生正确的相互遮挡关系。", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子渲染层级，总共包含0-15的层级。", 
                    "param_name": "layer", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetFadeDistance", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "设置粒子开始自动调整透明度的距离。粒子与摄像机之间的距离小于该值时会自动调整粒子的透明度，距离摄像机越近，粒子越透明", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [
                {
                    "param_comment": "自动调整透明度的距离，应为正数，负数将视作零来处理", 
                    "param_name": "fadeDistance", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子开始自动调整透明度的距离", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "liaoyi"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetUsePointFiltering", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "设置粒子材质的纹理滤波是否使用点滤波方法。默认为使用双线性滤波", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [
                {
                    "param_comment": "true为使用点滤波方法，false为使用默认的双线性滤波", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子材质的纹理滤波是否使用点滤波", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetParticleSize", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "设置粒子特效中粒子大小的最小值及最大值。", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子大小的最小值(x,y)。x值影响粒子的左右拉伸程度，y值影响粒子的上下拉伸程度。粒子特效中的粒子大小会在最小值和最大值当中取随机值进行决定。当该值设置为负值时设置将会失败，且该值不能比粒子大小的最大值大。", 
                    "param_name": "minSize", 
                    "param_type": "tuple(float,float)"
                }, 
                {
                    "param_comment": "粒子大小的最大值(x,y)。x值影响粒子的左右拉伸程度，y值影响粒子的上下拉伸程度。粒子特效中的粒子大小会在最小值和最大值当中取随机值进行决定。当该值设置为负值时设置将会失败，且该值不能比粒子大小的最小值小。", 
                    "param_name": "maxSize", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子特效中粒子大小的最小值及最大值。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetParticleMaxSize", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "获取粒子特效中粒子大小的最大值。", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "粒子大小的最大值"
            }, 
            "state": [
                {
                    "comment": "获取粒子特效中粒子大小的最大值。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetParticleMinSize", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "获取粒子特效中粒子大小的最小值。", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "粒子大小的最小值。"
            }, 
            "state": [
                {
                    "comment": "获取粒子特效中粒子大小的最小值。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetParticleVolumeSize", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "设置粒子发射器的体积大小缩放，不影响单个粒子的尺寸。粒子发射器的体积越大，则粒子的发射范围越大。", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器的体积大小缩放值(x,y,z), x,y,z分别为各个坐标轴方向的缩放值，该值越大该方向发射粒子的范围越大。", 
                    "param_name": "scale", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子发射器的体积大小缩放。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetParticleVolumeSize", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "获取粒子发射器的体积大小缩放值。", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "粒子发射器的体积大小缩放值。"
            }, 
            "state": [
                {
                    "comment": "获取粒子发射器的体积大小缩放值。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetParticleMaxNum", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "设置粒子发射器的粒子容量，即粒子发射器所包含的最大粒子数量。该数量并不代表目前粒子发射器所发射的粒子数量，如需要增加发射的粒子数量，需同时改变粒子的发射频率。", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [
                {
                    "param_comment": "粒子发射器所包含的最大粒子数量，不能为负值，粒子的数量最大值不超过100000。", 
                    "param_name": "num", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子发射器所包含的最大粒子数量。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetParticleMaxNum", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "获取粒子发射器包含的最大粒子数量。", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "粒子发射器所包含的最大粒子数量。"
            }, 
            "state": [
                {
                    "comment": "获取粒子发射器包含的最大粒子数量。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetParticleEmissionRate", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "设置粒子发射器每帧发射粒子的频率，频率越大则每帧发射的粒子数量越多，但粒子数量不会超过粒子发射器的粒子容量，同时由于性能考虑，每帧发射的粒子数量也不会超过100个。", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [
                {
                    "param_comment": "每帧发射粒子频率的最小值。每帧发射粒子的频率将在频率最小值和频率最大值之间取随机数进行插值。当该值设置为负值时设置将会失败，且该值不能比粒子频率的最大值大。", 
                    "param_name": "minRate", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "每帧发射粒子频率的最大值。每帧发射粒子的频率将在频率最小值和频率最大值之间取随机数进行插值。当该值设置为负值时设置将会失败，且该值不能比粒子频率的最小值小。", 
                    "param_name": "maxRate", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子发射器每帧发射粒子的频率。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetParticleEmissionRate", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "获取粒子发射器每帧发射粒子的频率。", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "粒子发射器每帧发射粒子的频率。"
            }, 
            "state": [
                {
                    "comment": "获取粒子发射器每帧发射粒子的频率。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetGlobal", 
            "path": "client.component.particleControlComp.ParticleControlComp", 
            "desc": "设置粒子发射器是否为全局粒子发射器, 默认是False", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [
                {
                    "param_comment": "是否为全局粒子发射器", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子发射器是否为全局粒子发射器", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "chenyuekai"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl": [
        {
            "name": "AddOption", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "添加下拉框项，若添加成功则返回True，否则返回False", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "显示文本，必填参数", 
                    "param_name": "showName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "贴图路径，若填写则在下拉框项前端会显示该icon，默认为None", 
                    "param_name": "icon", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "自定义数据，在选中该下拉框项时会跟随回调函数传回，默认为None", 
                    "param_name": "userData", 
                    "param_type": "any"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否添加成功"
            }, 
            "state": [
                {
                    "comment": "添加下拉框项", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ClearOptions", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "清空下拉框", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "清空下拉框", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ClearSelection", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "清除当前选中，使下拉框恢复未选中内容状态", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "清除当前选中", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetOptionIndexByShowName", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "根据展示文本查找对应下拉框项的索引位置，若找不到返回-1", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "显示文本", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "索引位置"
            }, 
            "state": [
                {
                    "comment": "根据展示文本查找对应下拉框项的索引位置", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetOptionShowNameByIndex", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "根据索引位置查找当前栈式文本，若找不到返回None", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "索引位置", 
                    "param_name": "index", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "显示文本"
            }, 
            "state": [
                {
                    "comment": "根据索引位置查找当前栈式文本", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetOptionCount", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "获得选项数量", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "当前下拉框选项数量"
            }, 
            "state": [
                {
                    "comment": "获得选项数量", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetSelectOptionIndex", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "获得当前选中项的索引，所无选中项则返回-1", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "当前下拉框选中项索引"
            }, 
            "state": [
                {
                    "comment": "获得当前选中项的索引", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetSelectOptionShowName", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "获得当前选中项的展示文本，所无选中项则返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "当前选中项的展示文本"
            }, 
            "state": [
                {
                    "comment": "获得当前选中项的展示文本", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveOptionByShowName", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "根据提供的展示文本移除对应下拉框项，移除成功则返回True，否则返回False", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "展示文本", 
                    "param_name": "showName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否移除成功"
            }, 
            "state": [
                {
                    "comment": "根据提供的展示文本移除对应下拉框项", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RemoveOptionByIndex", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "根据提供的索引移除对应下拉框项，移除成功则返回True，否则返回False", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "索引", 
                    "param_name": "index", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否移除成功"
            }, 
            "state": [
                {
                    "comment": "根据提供的索引移除对应下拉框项", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSelectOptionByIndex", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "根据提供的索引选中对应下拉框项", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "索引", 
                    "param_name": "index", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "根据提供的索引移除对应下拉框项", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetSelectOptionByShowName", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "根据提供的展示文本选中对应下拉框项", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "索引", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "根据提供的展示文本选中对应下拉框项", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RegisterOpenComboBoxCallback", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "注册展开下拉框事件回调", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "回调函数，必须是UI的类函数", 
                    "param_name": "callback", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "注册展开下拉框事件回调", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RegisterCloseComboBoxCallback", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "注册关闭下拉框事件回调", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "回调函数，必须是UI的类函数", 
                    "param_name": "callback", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "注册关闭下拉框事件回调", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "RegisterSelectItemCallback", 
            "path": "client.ui.controls.neteaseComboBoxUIControl.NeteaseComboBoxUIControl", 
            "desc": "注册选中下拉框内容事件回调", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "回调函数，必须是UI的类函数", 
                    "param_name": "callback", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "注册选中下拉框内容事件回调", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "panlei01"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.auxValueCompServer.AuxValueComponentServer": [
        {
            "name": "GetAuxValue", 
            "path": "server.component.auxValueCompServer.AuxValueComponentServer", 
            "desc": "获取射出的弓箭或投掷出的药水的附加值", 
            "doc_class_path": [
                "实体/附加值"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "auxValue"
            }, 
            "state": [], 
            "side": "服务端"
        }
    ], 
    "client.ui.controls.progressBarUIControl.ProgressBarUIControl": [
        {
            "name": "SetValue", 
            "path": "client.ui.controls.progressBarUIControl.ProgressBarUIControl", 
            "desc": "设置进度条的进度", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "进度，取值[0, 1]", 
                    "param_name": "progress", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.ui.controls.labelUIControl.LabelUIControl": [
        {
            "name": "SetText", 
            "path": "client.ui.controls.labelUIControl.LabelUIControl", 
            "desc": "设置Label的文本信息", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "文本的内容，可以支持[样式代码](https://zh.minecraft.wiki/w/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81)（§可以设置文字的颜色、格式等，该种用法更加灵活多变）", 
                    "param_name": "text", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否设置文本时同步更新文本框大小，默认值为False", 
                    "param_name": "syncSize", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetText", 
            "path": "client.ui.controls.labelUIControl.LabelUIControl", 
            "desc": "获取Label的文本信息，获取失败会返回None", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "文本信息"
            }, 
            "state": [
                {
                    "comment": "获取Label的文本信息", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetTextColor", 
            "path": "client.ui.controls.labelUIControl.LabelUIControl", 
            "desc": "设置Label文本的颜色", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "文本的颜色信息(r, g, b)，取值[0, 1]", 
                    "param_name": "color", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetTextColor", 
            "path": "client.ui.controls.labelUIControl.LabelUIControl", 
            "desc": "获取Label文本颜色", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float,float)", 
                "return_comment": "获取文本的颜色信息(r, g, b, a), 取值[0, 1]"
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetTextFontSize", 
            "path": "client.ui.controls.labelUIControl.LabelUIControl", 
            "desc": "设置Label中文本字体的大小", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "label的font_size的作用是Label中的默认字体大小，取值有限为[small normal large]，这个scale是在这个默认字体的基础上进行缩放字体大小，默认字体大小为1.0", 
                    "param_name": "scale", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "UI面向对象", 
                    "operation": "新增", 
                    "version": "1.21.nodoc", 
                    "author": "panlei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetTextAlignment", 
            "path": "client.ui.controls.labelUIControl.LabelUIControl", 
            "desc": "设置文本控件的文本对齐方式", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "文本控件的文本对齐方式，可选的值详见备注", 
                    "param_name": "textAlignment", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置文本控件的文本对齐方式", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetTextAlignment", 
            "path": "client.ui.controls.labelUIControl.LabelUIControl", 
            "desc": "获取文本控件的文本对齐方式", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "文本控件的文本对齐方式，具体返回值的意义可参考SetTextAlignment接口的备注"
            }, 
            "state": [
                {
                    "comment": "获取文本控件的文本对齐方式", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetTextLinePadding", 
            "path": "client.ui.controls.labelUIControl.LabelUIControl", 
            "desc": "设置文本控件的行间距", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "文本控件的行间距，单位为像素", 
                    "param_name": "textLinePadding", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置文本控件的行间距", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetTextLinePadding", 
            "path": "client.ui.controls.labelUIControl.LabelUIControl", 
            "desc": "获取文本控件的行间距", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "文本控件的行间距，单位为像素"
            }, 
            "state": [
                {
                    "comment": "获取文本控件的行间距", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "EnableTextShadow", 
            "path": "client.ui.controls.labelUIControl.LabelUIControl", 
            "desc": "使文本控件显示阴影", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "使文本控件显示阴影", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "DisableTextShadow", 
            "path": "client.ui.controls.labelUIControl.LabelUIControl", 
            "desc": "关闭文本控件显示阴影", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "关闭文本控件显示阴影", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "IsTextShadowEnabled", 
            "path": "client.ui.controls.labelUIControl.LabelUIControl", 
            "desc": "判断文本控件是否显示阴影", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "文本控件是否显示阴影"
            }, 
            "state": [
                {
                    "comment": "判断文本控件是否显示阴影", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.entityComponentServer.EntityComponentServer": [
        {
            "name": "HasComponent", 
            "path": "server.component.entityComponentServer.EntityComponentServer", 
            "desc": "判断实体是否有原版组件", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "[EntityComponentType枚举](../../枚举值/EntityComponentType.md)", 
                    "param_name": "attrType", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否有对应组件"
            }, 
            "state": [
                {
                    "comment": "判断实体是否有对应的原版组件", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetAllComponentsName", 
            "path": "server.component.entityComponentServer.EntityComponentServer", 
            "desc": "获取实体所拥有的原版组件list", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "原版组件名list，[EntityComponentType枚举](../../枚举值/EntityComponentType.md)"
            }, 
            "state": [
                {
                    "comment": "获取实体所拥有的原版组件list", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntitiesBySelector", 
            "path": "server.component.entityComponentServer.EntityComponentServer", 
            "desc": "传入目标选择器，获取对应实体id (最大范围是所有已加载的实体)", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "目标选择器指令", 
                    "param_name": "command", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "目标实体id列表"
            }, 
            "state": [
                {
                    "comment": "根据目标选择器获取实体id列表", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.engineEffectBindControlComp.EngineEffectBindControlComp": [
        {
            "name": "Pause", 
            "path": "client.component.engineEffectBindControlComp.EngineEffectBindControlComp", 
            "desc": "暂停模型特效（即使用CreateEngineEffectBind创建的特效）", 
            "doc_class_path": [
                "特效/模型特效"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True表示设置成功"
            }, 
            "state": [
                {
                    "comment": "暂停模型特效", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "Resume", 
            "path": "client.component.engineEffectBindControlComp.EngineEffectBindControlComp", 
            "desc": "继续播放模型特效（即使用CreateEngineEffectBind创建的特效）", 
            "doc_class_path": [
                "特效/模型特效"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True表示设置成功"
            }, 
            "state": [
                {
                    "comment": "继续播放模型特效", 
                    "operation": "新增", 
                    "version": "2.0", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.tameCompClient.TameComponentClient": [
        {
            "name": "GetOwnerId", 
            "path": "client.component.tameCompClient.TameComponentClient", 
            "desc": "获取驯服生物的主人id", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "主人id，不存在时返回None"
            }, 
            "state": [
                {
                    "comment": "客户端获取驯服生物的主人id", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }, 
                {
                    "comment": "现在主人实体未在世界内加载也可以返回id", 
                    "operation": "调整", 
                    "version": "2.9", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.recipeCompClient.RecipeCompClient": [
        {
            "name": "GetRecipesByResult", 
            "path": "client.component.recipeCompClient.RecipeCompClient", 
            "desc": "通过输出物品查询配方所需要的输入材料", 
            "doc_class_path": [
                "世界/配方"
            ], 
            "param": [
                {
                    "param_comment": "输出物品的标识符", 
                    "param_name": "resultIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "对应配方json中的tags字段里面的值", 
                    "param_name": "tag", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "输出物品的附加值, 不传参的话默认为0", 
                    "param_name": "aux", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "最大输出条目数，若大于等于0时，结果超过maxResultNum，则只返回maxResultNum条。默认-1，表示返回全部", 
                    "param_name": "maxResultNum", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "返回符合条件的配方列表"
            }, 
            "state": [
                {
                    "comment": "通过输出物品查询配方所需要的输入材料", 
                    "operation": "新增", 
                    "version": "1.20", 
                    "author": "sutao"
                }, 
                {
                    "comment": "熔炉配方支持返回输出物品的数量", 
                    "operation": "调整", 
                    "version": "1.25", 
                    "author": "czh"
                }, 
                {
                    "comment": "返回的配方列表中的输入物品里，’item'字段对应的值有可能为列表类型(list)，也可能为字符串类型(str)", 
                    "operation": "调整", 
                    "version": "2.12", 
                    "author": "xjr"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetRecipesByInput", 
            "path": "client.component.recipeCompClient.RecipeCompClient", 
            "desc": "通过输入物品查询配方", 
            "doc_class_path": [
                "世界/配方"
            ], 
            "param": [
                {
                    "param_comment": "输入物品的标识符", 
                    "param_name": "inputIdentifier", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "对应配方json中的tags字段里面的值", 
                    "param_name": "tag", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "输出物品的附加值, 不传参的话默认为0", 
                    "param_name": "aux", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "最大输出条目数，若大于等于0时，结果超过maxResultNum，则只返回maxResultNum条。默认-1，表示返回全部", 
                    "param_name": "maxResultNum", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "返回符合条件的配方列表"
            }, 
            "state": [
                {
                    "comment": "通过输入物品查询配方", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }, 
                {
                    "comment": "熔炉配方支持返回输出物品的数量", 
                    "operation": "调整", 
                    "version": "1.25", 
                    "author": "czh"
                }, 
                {
                    "comment": "返回的配方列表中的输入物品里，’item'字段对应的值有可能为列表类型(list)，也可能为字符串类型(str)", 
                    "operation": "调整", 
                    "version": "2.12", 
                    "author": "xjr"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.fogCompClient.FogCompClient": [
        {
            "name": "SetFogColor", 
            "path": "client.component.fogCompClient.FogCompClient", 
            "desc": "设置雾效颜色", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [
                {
                    "param_comment": "颜色RGBA，范围0到1之间，a值主要用于水下效果", 
                    "param_name": "color", 
                    "param_type": "tuple(float,float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ResetFogColor", 
            "path": "client.component.fogCompClient.FogCompClient", 
            "desc": "重置雾效颜色", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetUseFogColor", 
            "path": "client.component.fogCompClient.FogCompClient", 
            "desc": "判断当前是否开启设置雾效颜色，该值默认为False，使用mod传入的颜色值后为True", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置"
            }, 
            "state": [
                {
                    "comment": "判断当前是否开启设置雾效颜色", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetFogColor", 
            "path": "client.component.fogCompClient.FogCompClient", 
            "desc": "获取当前雾效颜色", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float,float)", 
                "return_comment": "颜色rgba"
            }, 
            "state": [
                {
                    "comment": "获取当前雾效颜色", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetFogLength", 
            "path": "client.component.fogCompClient.FogCompClient", 
            "desc": "设置雾效范围", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [
                {
                    "param_comment": "雾效起始距离", 
                    "param_name": "start", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "雾效终点范围", 
                    "param_name": "end", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetFogLength", 
            "path": "client.component.fogCompClient.FogCompClient", 
            "desc": "获取雾效范围", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "雾效起始值与终点值"
            }, 
            "state": [
                {
                    "comment": "获取雾效范围", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ResetFogLength", 
            "path": "client.component.fogCompClient.FogCompClient", 
            "desc": "重置雾效范围", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetUseFogLength", 
            "path": "client.component.fogCompClient.FogCompClient", 
            "desc": "判断当前是否开启设置雾效范围,该值默认为False，使用mod传入的范围值后为True", 
            "doc_class_path": [
                "世界/渲染"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置"
            }, 
            "state": [
                {
                    "comment": "判断当前是否开启设置雾效范围", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "hongshubin"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.effectCompServer.EffectComponentServer": [
        {
            "name": "AddEffectToEntity", 
            "path": "server.component.effectCompServer.EffectComponentServer", 
            "desc": "为实体添加指定状态效果，如果添加的状态已存在则有以下集中情况：1、等级大于已存在则更新状态等级及持续时间；2、状态等级相等且剩余时间duration大于已存在则刷新剩余时间；3、等级小于已存在则不做修改；4、粒子效果以新的为准", 
            "doc_class_path": [
                "实体/状态效果"
            ], 
            "param": [
                {
                    "param_comment": "状态效果名称字符串，包括自定义状态效果和原版状态效果，原版状态效果可在wiki查询", 
                    "param_name": "effectName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "状态效果持续时间，单位秒", 
                    "param_name": "duration", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "状态效果的额外等级。必须在0至255之间（含）。若未指定，默认为0。注意，状态效果的第一级（如生命恢复 I）对应为0，因此第二级状态效果，如生命回复 II，应指定强度为1。部分效果及自定义状态效果没有强度之分，如夜视", 
                    "param_name": "amplifier", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否显示粒子效果，True显示，False不显示", 
                    "param_name": "showParticles", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True表示设置成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "RemoveEffectFromEntity", 
            "path": "server.component.effectCompServer.EffectComponentServer", 
            "desc": "为实体删除指定状态效果", 
            "doc_class_path": [
                "实体/状态效果"
            ], 
            "param": [
                {
                    "param_comment": "状态效果名称字符串，包括自定义状态效果和原版状态效果，原版状态效果可在wiki查询", 
                    "param_name": "effectName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True表示删除成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "GetAllEffects", 
            "path": "server.component.effectCompServer.EffectComponentServer", 
            "desc": "获取实体当前所有状态效果", 
            "doc_class_path": [
                "实体/状态效果"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(dict)或None", 
                "return_comment": "状态效果信息字典的list。无状态效果时返回None"
            }, 
            "state": [
                {
                    "comment": "增加浮点型持续时间", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "HasEffect", 
            "path": "server.component.effectCompServer.EffectComponentServer", 
            "desc": "获取实体是否存在当前状态效果", 
            "doc_class_path": [
                "实体/状态效果"
            ], 
            "param": [
                {
                    "param_comment": "状态效果名称字符串，包括自定义状态效果和原版状态效果，原版状态效果可在wiki查询", 
                    "param_name": "effectName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "返回是否存在状态效果"
            }, 
            "state": [
                {
                    "comment": "获取实体是否存在当前状态效果", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetLoadEffects", 
            "path": "server.component.effectCompServer.EffectComponentServer", 
            "desc": "获取所有已加载的状态效果", 
            "doc_class_path": [
                "实体/状态效果"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "返回状态效果列表"
            }, 
            "state": [
                {
                    "comment": "获取所有已加载的状态效果", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "chenyuekai"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.virtualWorldCompClient.VirtualWorldCompClient": [
        {
            "name": "VirtualWorldCreate", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "创建虚拟世界，虚拟世界只允许存在一个，已经存在虚拟世界的情况下再调用此方法则无效", 
            "doc_class_path": [
                "虚拟世界/世界"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否创建成功"
            }, 
            "state": [
                {
                    "comment": "创建虚拟世界", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "VirtualWorldDestroy", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "销毁虚拟世界", 
            "doc_class_path": [
                "虚拟世界/世界"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否销毁成功"
            }, 
            "state": [
                {
                    "comment": "销毁虚拟世界", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "VirtualWorldToggleVisibility", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置虚拟世界是否显示", 
            "doc_class_path": [
                "虚拟世界/世界"
            ], 
            "param": [
                {
                    "param_comment": "是否显示", 
                    "param_name": "isVisible", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置虚拟世界是否显示", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "VirtualWorldSetCollidersVisible", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置虚拟世界中模型的包围盒是否显示,主要用于调试,默认为不显示", 
            "doc_class_path": [
                "虚拟世界/世界"
            ], 
            "param": [
                {
                    "param_comment": "是否显示", 
                    "param_name": "isVisible", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置虚拟世界中模型的包围盒是否显示", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "VirtualWorldSetSkyTexture", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置虚拟世界中天空的贴图", 
            "doc_class_path": [
                "虚拟世界/世界"
            ], 
            "param": [
                {
                    "param_comment": "贴图路径", 
                    "param_name": "texturePath", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "拉伸模式，0或1。0代表贴图宽高都拉伸至全屏，可能造成贴图变形；1代表高度拉伸至全屏，宽度按贴图原宽高比进行相应缩放，能保持贴图不被拉伸，但会造成贴图超出屏幕或不完全铺满屏幕。", 
                    "param_name": "mode", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置虚拟世界中天空的贴图", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "VirtualWorldSetSkyBgColor", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置虚拟世界中天空背景的颜色", 
            "doc_class_path": [
                "虚拟世界/世界"
            ], 
            "param": [
                {
                    "param_comment": "颜色的r,g,b值，均为0.0到1.0的浮点值", 
                    "param_name": "color", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置虚拟世界中天空背景的颜色", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CameraSetPos", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置相机位置", 
            "doc_class_path": [
                "虚拟世界/相机"
            ], 
            "param": [
                {
                    "param_comment": "坐标值(x,y,z)初始默认为 (0,0,0)，且朝向z轴负方向", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置相机位置", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CameraGetPos", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "返回相机位置", 
            "doc_class_path": [
                "虚拟世界/相机"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "坐标值(x, y, z), 若虚拟世界没有创建则返回None"
            }, 
            "state": [
                {
                    "comment": "返回相机位置", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CameraSetFov", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置相机视野大小", 
            "doc_class_path": [
                "虚拟世界/相机"
            ], 
            "param": [
                {
                    "param_comment": "视野大小( field of view )，单位为角度, 范围为[30, 110]，若fov小于30则设置为30，若fov大于110，则设置为110。不修改时默认为45。", 
                    "param_name": "fov", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置相机视野大小", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CameraGetFov", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "获取相机视野大小", 
            "doc_class_path": [
                "虚拟世界/相机"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "视野大小( field of view )，单位为角度, 范围为[30, 110]。不修改时默认为45。"
            }, 
            "state": [
                {
                    "comment": "获取相机视野大小", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CameraSetZoom", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置相机缩放", 
            "doc_class_path": [
                "虚拟世界/相机"
            ], 
            "param": [
                {
                    "param_comment": "缩放值, 范围为[0.1,100.0]，小于0.1则设置为0.1，大于100则设置为100，不修改时默认为1。", 
                    "param_name": "zoom", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置相机缩放", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CameraLookAt", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "修改相机朝向", 
            "doc_class_path": [
                "虚拟世界/相机"
            ], 
            "param": [
                {
                    "param_comment": "目标的坐标", 
                    "param_name": "targetPos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "相机向上方向的向量, (x,y,z)初始默认为(0,1,0)", 
                    "param_name": "upVector", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否修改成功"
            }, 
            "state": [
                {
                    "comment": "修改相机朝向", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CameraMoveTo", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置相机移动动画, 会根据当前相机状态与传入参数按时间进行插值显示", 
            "doc_class_path": [
                "虚拟世界/相机"
            ], 
            "param": [
                {
                    "param_comment": "目标点的坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "到达目标点后朝向的位置", 
                    "param_name": "targetPos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "到达目标点后相机向上方向的向量", 
                    "param_name": "upVector", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "到达目标点相机的缩放值", 
                    "param_name": "zoom", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "单位秒，动作时长（大于0的浮点数）。为了镜头连贯性，相机的运动与实际帧率有关，默认以60帧计算，会因实际帧率波动稍有偏差。", 
                    "param_name": "time", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "时间变化函数, 默认值为clientApi.GetMinecraftEnum().TimeEaseType.linear, 参数不在枚举值中也当作linear", 
                    "param_name": "ease", 
                    "param_type": "TimeEaseType"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置相机移动动画", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CameraStopActions", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "停止相机移动动画", 
            "doc_class_path": [
                "虚拟世界/相机"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否停止成功"
            }, 
            "state": [
                {
                    "comment": "停止相机移动动画", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CameraGetZoom", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "获取相机的缩放值", 
            "doc_class_path": [
                "虚拟世界/相机"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "缩放值"
            }, 
            "state": [
                {
                    "comment": "获取相机的缩放值", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CameraGetClickModel", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "获取相机当前指向的模型的id，会返回离相机最近的，通常与GetEntityByCoordEvent配合使用", 
            "doc_class_path": [
                "虚拟世界/相机"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "模型的id, 相机没有指向模型则返回-1"
            }, 
            "state": [
                {
                    "comment": "获取相机当前指向的模型的id", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelCreateObject", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "在虚拟世界中创建网易骨骼模型", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型的资源", 
                    "param_name": "modelName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "模型的动画", 
                    "param_name": "animationName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "返回模型对象的id, 失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "在虚拟世界中创建网易骨骼模型", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelCreateMinecraftObject", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "在虚拟世界中创建微软原版模型", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型的identifier", 
                    "param_name": "identifier", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "返回模型对象的id, 失败时返回-1"
            }, 
            "state": [
                {
                    "comment": "在虚拟世界中创建微软原版模型", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelSetVisible", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置模型可见性", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否可见", 
                    "param_name": "isVisible", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置模型可见性", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelIsVisible", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "返回模型可见性", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否可见"
            }, 
            "state": [
                {
                    "comment": "返回模型可见性", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelUpdateAnimationMolangVariable", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "更新微软原版模型表达式变量，可控制动作的改变", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "键值对形式的数据", 
                    "param_name": "molangDict", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "更新微软原版模型表达式变量，可控制动作的改变", 
                    "operation": "新增", 
                    "version": "1.25", 
                    "author": "sutao"
                }, 
                {
                    "comment": "修复了客户端实体中配置了scripts/initialize时接口不生效的问题", 
                    "operation": "修复", 
                    "version": "2.0", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelPlayAnimation", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "模型播放动画，支持动作融合，其功能与模型接口ModelPlayAni相同。", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "模型的动画", 
                    "param_name": "animationName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否循环播放", 
                    "param_name": "loop", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "播放时是与当前动画混合还是中止当前动画的播放，默认False，即中止当前动画播放。设置为True时，将允许即将播放的动画进行混合(注意，在没有设置骨骼屏蔽或是设置线性混合参数的情况下不会产生混合效果)。另外，动画混合仅在相同层级的动画之间进行。若当前播放的动画与即将播放的动画层级不一样，则isBlended参数无效。", 
                    "param_name": "isBlended", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "设置骨骼动画的层级，范围为0~255，默认为0。注意，如果播放的动画已经存在，则会将原有的动画层级覆盖。动画层级越大，则优先度越高，骨骼模型的骨骼优先播放优先度最高的动画。", 
                    "param_name": "layer", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "新增动画混合功能, 新增设置动画层级参数。", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }, 
                {
                    "comment": "模型播放动画", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelStopAnimation", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "停止播放指定的模型动画。", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "模型的动画", 
                    "param_name": "animationName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否暂停成功"
            }, 
            "state": [
                {
                    "comment": "新增停止播放接口。", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelSetAnimBoneMask", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置是否屏蔽动画中指定的骨骼的动画，若开启骨骼屏蔽后，该骨骼将不再播放该动画中的动作。通过屏蔽指定骨骼的动画可实现同一个骨骼模型同时在不同骨骼上播放不同的动作动画，从而实现快捷的动作融合。", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "模型的动画", 
                    "param_name": "animationName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "骨骼名称列表", 
                    "param_name": "boneNamesList", 
                    "param_type": "list(str)"
                }, 
                {
                    "param_comment": "是否启用该骨骼的动画。True为不屏蔽，启动该骨骼的动画。False为屏蔽，不启动该骨骼的动画。", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "True为对该骨骼及其子骨骼生效，False为仅对该骨骼生效，默认为True", 
                    "param_name": "applyToChild", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增虚拟世界动作融合功能接口：设置屏蔽骨骼动画中的指定骨骼", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelSetAnimAllBoneMask", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置是否屏蔽动画中所有骨骼的动画，若开启骨骼屏蔽后，该骨骼将不再播放该动画中的动作。该接口会对该动画中所有骨骼生效，可通过参数ignoreBoneList来指定不受影响的骨骼名称。通过屏蔽指定骨骼的动画可实现同一个骨骼模型同时在不同骨骼上播放不同的动作动画，从而实现快捷的动作融合。", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "模型的动画", 
                    "param_name": "animationName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "忽视的骨骼名称列表。在这个列表中的骨骼将不会被影响。输入空列表时则对所有骨骼执行这次设置。", 
                    "param_name": "ignoreBonesList", 
                    "param_type": "list(str)"
                }, 
                {
                    "param_comment": "是否启用该骨骼的动画。True为不屏蔽，启动该骨骼的动画。False为屏蔽，不启动该骨骼的动画。", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "True为对ignoreBoneList中的骨骼的子骨骼也生效，False为仅对ignoreBoneList中的骨骼生效，默认为True。若ignoreBoneList为空列表，则applyToChild无效果。", 
                    "param_name": "applyToChild", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增虚拟世界动作融合功能接口：设置屏蔽骨骼动画中的所有骨骼", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelCancelAllBoneMask", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "取消动画中的所有骨骼屏蔽。", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "模型的动画", 
                    "param_name": "animationName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增虚拟世界动作融合功能接口：取消屏蔽骨骼动画中的骨骼屏蔽", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelSetAnimLayer", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置骨骼动画的层级，动画层级越大，则优先度越高，骨骼模型的骨骼优先播放优先度最高的动画，相同层级的动画则优先播放率先播放的动画。", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "模型的动画", 
                    "param_name": "animationName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "动画层级， 正整数，范围为0~255", 
                    "param_name": "layer", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增虚拟世界动作融合功能接口：设置骨骼动画层级", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelRegisterAnim1DControlParam", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "当同时播放多个骨骼动画时，新建用于控制动画进行1D线性混合的参数。目前线性混合仅支持对两个动画进行混合。新建的参数值范围为[0,1]。指定的骨骼将会按照这个参数的值对两个动画进行线性混合。", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "混合的第一个动画名称，当1D参数的值为0时指定的骨骼仅播放这个动画。", 
                    "param_name": "leftAniName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "混合的第二个动画名称，当1D参数的值为1时指定的骨骼仅播放这个动画。", 
                    "param_name": "rightAniName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "自定义的1D参数名称。该参数新建后的初始值为0。", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增虚拟世界动作融合功能接口：注册用于控制两个动画融合的1D控制参数", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelSetAnim1DControlParam", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "新建动画的1D控制参数后，使用该接口对相应的参数进行控制。", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "使用接口RegisterAnim1DControlParam所新建的自定义1D参数名称。该参数新建后的初始值为0。", 
                    "param_name": "paramName", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "参数的值，范围为[0,1]。当1D参数的值为0时仅播放接口RegisterAnim1DControlParam中的leftAniName参数指定的动画，当1D参数的值为1时仅播放接口RegisterAnim1DControlParam中的rightAniName参数指定的动画", 
                    "param_name": "value", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "新增虚拟世界动作融合功能接口：设置用于控制两个动画融合的1D控制参数的值", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelSetBoxCollider", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置模型的包围盒", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "模型包围盒各个方向的长度,(x,y,z)", 
                    "param_name": "lengths", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "模型包围盒中心的偏移,(x,y,z),默认为(0.0,0.0,0.0)", 
                    "param_name": "offset", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置模型的包围盒", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelRemove", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "销毁虚拟世界中的模型", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否销毁成功"
            }, 
            "state": [
                {
                    "comment": "销毁模型", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelRotate", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "模型绕某个轴旋转多少度", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "旋转角度，为了避免数值过大出现浮点误差，建议角度范围控制在-360度到360度", 
                    "param_name": "degreeAngle", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "旋转轴(x, y, z)", 
                    "param_name": "axis", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "模型绕某个轴旋转多少度", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelSetPos", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置模型坐标", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "坐标(x, y, z)", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置模型的坐标", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelGetPos", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "获取模型的坐标", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "模型的坐标(x, y, z), 模型不存在的话则返回None"
            }, 
            "state": [
                {
                    "comment": "获取模型的坐标", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelSetRot", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置模型的旋转角度", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "旋转角度(x, y, z)初始默认为(0, 0, 0)，指向z轴负方向。 为了避免数值过大出现浮点误差，建议各维度角度控制范围在-360度到360度", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置模型的旋转角度", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelGetRot", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "返回模型的旋转角度", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "旋转角度(x, y, z), 模型不存在则返回None"
            }, 
            "state": [
                {
                    "comment": "返回模型的旋转角度", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelSetScale", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置模型的缩放值", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "缩放值(x, y, z)", 
                    "param_name": "scales", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置模型的缩放值", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelMoveTo", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置模型平移运动", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "坐标值(x, y, z)", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "单位秒，运动时长（大于0的浮点数）", 
                    "param_name": "time", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "时间变化函数, 默认值为clientApi.GetMinecraftEnum().TimeEaseType.linear, 参数不在枚举值中也当作linear", 
                    "param_name": "ease", 
                    "param_type": "TimeEaseType"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置模型平移运动", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelRotateTo", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "设置模型旋转运动", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "旋转值(x, y, z)", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "单位秒，运动时长（大于0的浮点数）", 
                    "param_name": "time", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "时间变化函数, 默认值为clientApi.GetMinecraftEnum().TimeEaseType.linear, 参数不在枚举值中也当作linear", 
                    "param_name": "ease", 
                    "param_type": "TimeEaseType"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置模型旋转运动", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "ModelStopActions", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "停止模型的移动和旋转运动", 
            "doc_class_path": [
                "虚拟世界/模型"
            ], 
            "param": [
                {
                    "param_comment": "模型对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否停止成功"
            }, 
            "state": [
                {
                    "comment": "停止模型的移动和旋转运动", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "MoveToVirtualWorld", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "把对象从主世界移到虚拟世界, 非绑定的序列帧，文本，粒子需要调用该方法后才会出现在虚拟世界中，绑定的可以省略调用该方法。", 
            "doc_class_path": [
                "虚拟世界/其它对象"
            ], 
            "param": [
                {
                    "param_comment": "对象类型枚举, 支持VirtualWorldObjectType.Sfx, VirtualWorldObjectType.Textboard和VirtualWorldObjectType.Particle", 
                    "param_name": "virtualWorldObjectType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "要移动的对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "把对象从主世界移到虚拟世界", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "BindModel", 
            "path": "client.component.virtualWorldCompClient.VirtualWorldCompClient", 
            "desc": "把对象绑定到模型上, 支持绑定序列帧，粒子，文本和其它模型", 
            "doc_class_path": [
                "虚拟世界/其它对象"
            ], 
            "param": [
                {
                    "param_comment": "对象类型枚举, 支持VirtualWorldObjectType.Sfx, VirtualWorldObjectType.Textboard和VirtualWorldObjectType.Particle, VirtualWorldObjectType.Model", 
                    "param_name": "virtualWorldObjectType", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "要被绑定的对象的id", 
                    "param_name": "objId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "绑定到的目标对象的id, 该对象删掉时，绑定在上面的对象也会删除", 
                    "param_name": "targetId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "绑定后相对目标的位置偏移", 
                    "param_name": "posOffset", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "绑定后相对目标的旋转角度偏移", 
                    "param_name": "rotOffset", 
                    "param_type": "tuple(float,float,float)"
                }, 
                {
                    "param_comment": "要绑定到目标对象哪个骨骼，默认为root", 
                    "param_name": "boneName", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "对象绑定到模型上", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.attrCompClient.AttrCompClient": [
        {
            "name": "isEntityInLava", 
            "path": "client.component.attrCompClient.AttrCompClient", 
            "desc": "实体是否在岩浆中", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否在岩浆中，True为在岩浆中，False为不在岩浆中"
            }, 
            "state": [
                {
                    "comment": "获取实体是否在岩浆中", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "liaoyi"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "isEntityOnGround", 
            "path": "client.component.attrCompClient.AttrCompClient", 
            "desc": "实体是否触地", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否触地，True为触地，False为不触地"
            }, 
            "state": [
                {
                    "comment": "获取实体是否触地", 
                    "operation": "新增", 
                    "version": "1.22", 
                    "author": "liaoyi"
                }, 
                {
                    "comment": "添加备注\"客户端实体刚创建时引擎计算还没完成，此时获取该实体是否着地将返回默认值True，需要延迟一帧进行获取才能获取到正确的数据\"", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "sutao"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetAttrValue", 
            "path": "client.component.attrCompClient.AttrCompClient", 
            "desc": "获取属性值，包括生命值，饥饿度，移速", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "[AttrType枚举](../../枚举值/AttrType.md)", 
                    "param_name": "attrType", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "属性结果"
            }, 
            "state": [
                {
                    "comment": "新增客户端获取属性的接口", 
                    "operation": "调整", 
                    "version": "2.0", 
                    "author": "guanmingyu"
                }, 
                {
                    "comment": "新增对AttrType.FOLLOW_RANGE,AttrType.KNOCKBACK_RESISTANCE,AttrType.JUMP_STRENGTH,AttrType.ARMOR的支持", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetAttrMaxValue", 
            "path": "client.component.attrCompClient.AttrCompClient", 
            "desc": "获取属性最大值，包括生命值，饥饿度，移速等", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "[AttrType枚举](../../枚举值/AttrType.md)", 
                    "param_name": "type", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "属性值结果"
            }, 
            "state": [
                {
                    "comment": "新增客户端获取属性最大值的接口", 
                    "operation": "调整", 
                    "version": "2.0", 
                    "author": "guanmingyu"
                }, 
                {
                    "comment": "新增对AttrType.FOLLOW_RANGE,AttrType.KNOCKBACK_RESISTANCE,AttrType.JUMP_STRENGTH的支持", 
                    "operation": "调整", 
                    "version": "2.10", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.actorMotionCompClient.ActorMotionComponentClient": [
        {
            "name": "GetInputVector", 
            "path": "client.component.actorMotionCompClient.ActorMotionComponentClient", 
            "desc": "获取方向键（移动轮盘）的输入", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "返回一个单位向量，向量第一项为向左的大小，第二项为向前的大小"
            }, 
            "state": [
                {
                    "comment": "修复了无法正常获取到LockInputVector的输入量的BUG", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "LockInputVector", 
            "path": "client.component.actorMotionCompClient.ActorMotionComponentClient", 
            "desc": "锁定本地玩家方向键（移动轮盘）的输入，可使本地玩家持续向指定方向前行，且不会再受玩家输入影响", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "输入向量，第一项控制向左的大小，第二项控制向前的大小。传入(0, 0)时玩家将会被强制固定在原地，不允许移动。", 
                    "param_name": "inputVector", 
                    "param_type": "tuple(float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否锁定成功，True:成功  False:失败"
            }, 
            "state": [
                {
                    "comment": "修复了潜行状态下移动速度不变的BUG，修复了GetInputVector无法正常获取到LockInputVector的输入量的BUG", 
                    "operation": "调整", 
                    "version": "2.6", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "UnlockInputVector", 
            "path": "client.component.actorMotionCompClient.ActorMotionComponentClient", 
            "desc": "解锁本地玩家方向键（移动轮盘）的输入", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否解锁成功，True:成功  False:失败"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetMotion", 
            "path": "client.component.actorMotionCompClient.ActorMotionComponentClient", 
            "desc": "设置瞬时的移动方向向量，用于本地玩家", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [
                {
                    "param_comment": "世界坐标系下的向量，该方向为世界坐标系下的向量，以x,z,y三个轴的正方向为正值，可以通过当前玩家的rot组件判断目前玩家面向的方向，可在开发模式下打开F3观察数值变化。", 
                    "param_name": "motion", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "优化文档说明", 
                    "operation": "调整", 
                    "version": "1.24", 
                    "author": "likaiyu"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetMotion", 
            "path": "client.component.actorMotionCompClient.ActorMotionComponentClient", 
            "desc": "获取生物的瞬时移动方向向量。与服务端不同，客户端不会计算摩擦等因素，获取到的是上一帧的向量，与服务器获取到的值会不相等", 
            "doc_class_path": [
                "实体/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "瞬时移动方向向量，异常时返回None"
            }, 
            "state": [
                {
                    "comment": "增加获取生物瞬时移动方向向量接口", 
                    "operation": "新增", 
                    "version": "1.18", 
                    "author": "gzhuabo"
                }, 
                {
                    "comment": "修复了不能获取非玩家实体的问题", 
                    "operation": "修复", 
                    "version": "2.8", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "BeginSprinting", 
            "path": "client.component.actorMotionCompClient.ActorMotionComponentClient", 
            "desc": "使本地玩家进入并保持向前疾跑/冲刺状态", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "EndSprinting", 
            "path": "client.component.actorMotionCompClient.ActorMotionComponentClient", 
            "desc": "使本地玩家结束向前疾跑/冲刺状态", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetMousePosition", 
            "path": "client.component.actorMotionCompClient.ActorMotionComponentClient", 
            "desc": "获取鼠标位置", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "返回一个tuple，第一个元素为x坐标，第一个元素为y坐标，非PC会返回None"
            }, 
            "state": [
                {
                    "comment": "获得鼠标位置接口", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "LockVerticalMove", 
            "path": "client.component.actorMotionCompClient.ActorMotionComponentClient", 
            "desc": "模拟上升或下降，调用后一直上升或下降", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True 上升， False 下降", 
                    "param_name": "flag", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "模拟上升或下降", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "hxj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "UnLockVerticalMove", 
            "path": "client.component.actorMotionCompClient.ActorMotionComponentClient", 
            "desc": "解除上升或下降状态", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "解除上升或下降状态", 
                    "operation": "新增", 
                    "version": "2.6", 
                    "author": "hxj"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "server.component.dimensionCompServer.DimensionCompServer": [
        {
            "name": "ChangePlayerDimension", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "传送玩家", 
            "doc_class_path": [
                "玩家/行为"
            ], 
            "param": [
                {
                    "param_comment": "维度，0-overWorld; 1-nether; 2-theEnd", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "传送的坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "新增接口使用备注", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetEntityDimensionId", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "获取实体所在维度", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "维度id，0-主世界; 1-下界; 2-末地; 或其他自定义维度"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "ChangeEntityDimension", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "传送实体", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "维度id，0-主世界; 1-下界; 2-末地; 或其他自定义维度", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "传送的坐标，假如输入None，那么就优先选择目标维度的传送门作为目的地，其次使用维度坐标映射逻辑确定目的地", 
                    "param_name": "pos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "该接口无法对玩家使用，玩家请使用ChangePlayerDimension", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "likaiyu"
                }, 
                {
                    "comment": "传送实体", 
                    "operation": "新增", 
                    "version": "1.19.0", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "MirrorDimension", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "复制不同dimension的地形", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "原dimensionId", 
                    "param_name": "fromId", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "目标dimensionId", 
                    "param_name": "toId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "CreateDimension", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "创建新的dimension", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "维度，0/1/2维度是不需要创建的。创建大于20的维度，需要在dimension_config.json中注册，注意，维度21是不可用的", 
                    "param_name": "dimensionId", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否创建成功"
            }, 
            "state": [
                {
                    "comment": "支持自定义维度的创建", 
                    "operation": "调整", 
                    "version": "1.22", 
                    "author": "xltang"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "RegisterEntityAOIEvent", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "注册感应区域，有实体进入时和离开时会有消息通知", 
            "doc_class_path": [
                "event.NewOnEntityAreaEvent"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "注册的感应区域名", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "感应区域的坐标范围，依次为minX, minY, minZ, maxX, maxY, maxZ", 
                    "param_name": "aabb", 
                    "param_type": "tuple(float,float,float,float,float,float)"
                }, 
                {
                    "param_comment": "忽略的实体id列表", 
                    "param_name": "ignoredEntities", 
                    "param_type": "list(str)"
                }, 
                {
                    "param_comment": "期望响应的实体类型，不传则响应所有的实体类型[EntityType枚举](../枚举值/EntityType.md)", 
                    "param_name": "entityType", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否注册成功"
            }, 
            "state": [
                {
                    "comment": "新增期待响应的实体类型的参数", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "guanmingyu"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "UnRegisterEntityAOIEvent", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "反注册感应区域", 
            "doc_class_path": [
                "event.NewOnEntityAreaEvent"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "需要反注册的感应区域名", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否注册成功"
            }, 
            "state": [], 
            "side": "服务端"
        }, 
        {
            "name": "CreateEntityAOI", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "注册感应区域，有实体进入时和离开时会触发回调函数func", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "注册的感应区域名", 
                    "param_name": "name", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "感应区域的坐标范围，依次为minX, minY, minZ, maxX, maxY, maxZ", 
                    "param_name": "aabb", 
                    "param_type": "tuple(float,float,float,float,float,float)"
                }, 
                {
                    "param_comment": "回调函数，参数dict请看备注", 
                    "param_name": "func", 
                    "param_type": "function"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否注册成功"
            }, 
            "state": [
                {
                    "comment": "新增注册感应区域，有实体进入时和离开时会触发回调函数func", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "DeleteEntityAOI", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "删除使用[CreateEntityAOI](#createentityaoi)注册的感应区", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "需要删除的感应区域名", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否删除成功"
            }, 
            "state": [
                {
                    "comment": "删除使用[CreateEntityAOI](#createentityaoi)注册的感应区", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "cxz"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetUseLocalTime", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "让某个维度拥有自己的局部时间规则，开启后该维度可以拥有与其他维度不同的时间与是否昼夜更替的规则", 
            "doc_class_path": [
                "世界/时间"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否开启局部时间规则", 
                    "param_name": "value", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "让某个维度拥有自己的局部时间规则，开启后该维度可以拥有与其他维度不同的时间与是否昼夜更替的规则", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetUseLocalTime", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "获取某个维度是否设置了使用局部时间规则", 
            "doc_class_path": [
                "世界/时间"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否使用局部时间规则"
            }, 
            "state": [
                {
                    "comment": "获取某个维度是否设置了使用局部时间规则", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetLocalTime", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "设置使用局部时间规则维度的时间", 
            "doc_class_path": [
                "世界/时间"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "时间，单位为帧数。表示该存档从新建起经过的时间，而非当前游戏天内的时间。mc中一个游戏天相当于现实的20分钟，即24000帧", 
                    "param_name": "time", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置使用局部时间规则维度的时间", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetLocalTimeOfDay", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "设置使用局部时间规则维度在一天内所在的时间", 
            "doc_class_path": [
                "世界/时间"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "时间，单位为帧数，表示游戏天内的时间，范围为0到24000。mc中一个游戏天相当于现实的20分钟，即24000帧", 
                    "param_name": "timeOfDay", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置使用局部时间规则维度在一天内所在的时间", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetLocalTime", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "获取维度的时间", 
            "doc_class_path": [
                "世界/时间"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "时间，单位为帧数，表示该存档从新建起经过的时间，而非当前游戏天内的时间。mc中一个游戏天相当于现实的20分钟，即24000帧"
            }, 
            "state": [
                {
                    "comment": "获取维度的时间", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "SetLocalDoDayNightCycle", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "设置使用局部时间规则的维度是否打开昼夜更替", 
            "doc_class_path": [
                "世界/时间"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "是否打开昼夜更替", 
                    "param_name": "value", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否设置成功"
            }, 
            "state": [
                {
                    "comment": "设置使用局部时间规则的维度是否打开昼夜更替", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }, 
        {
            "name": "GetLocalDoDayNightCycle", 
            "path": "server.component.dimensionCompServer.DimensionCompServer", 
            "desc": "获取维度是否打开昼夜更替", 
            "doc_class_path": [
                "世界/时间"
            ], 
            "param": [
                {
                    "param_comment": "维度id", 
                    "param_name": "dimension", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否打开昼夜更替"
            }, 
            "state": [
                {
                    "comment": "获取维度是否打开昼夜更替", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "czh"
                }
            ], 
            "side": "服务端"
        }
    ], 
    "client.component.gameCompClient.GameComponentClient": [
        {
            "name": "ShowHealthBar", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "设置是否显示血条", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "True为显示。开启后可用health组件的SetColor、ShowHealth接口，单独设置某个实体的血条颜色及是否显示", 
                    "param_name": "show", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetNameDeeptest", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "设置名字是否透视", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "True为不透视。默认情况下为透视", 
                    "param_name": "deeptest", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetScreenSize", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取游戏分辨率", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float)", 
                "return_comment": "宽高（像素）"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetRenderLocalPlayer", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "设置本地玩家是否渲染", 
            "doc_class_path": [
                "实体/渲染"
            ], 
            "param": [
                {
                    "param_comment": "True为渲染", 
                    "param_name": "render", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "AddPickBlacklist", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "添加使用camera组件（例如GetChosen接口、PickFacing接口）选取实体时的黑名单，即该实体不会被选取到", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "ClearPickBlacklist", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "清除使用camera组件（例如GetChosen接口、PickFacing接口）选取实体的黑名单", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "HasEntity", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "判断 entity 是否存在", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "0表示不存在，1表示存在"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "IsEntityAlive", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "判断生物实体是否存活或非生物实体是否存在", 
            "doc_class_path": [
                "世界/实体管理"
            ], 
            "param": [
                {
                    "param_comment": "实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "false表示生物实体已死亡或非生物实体已销毁，true表示生物实体存活或非生物实体存在"
            }, 
            "state": [
                {
                    "comment": "客户端接口，判断生物实体是否存活或非生物实体是否存在", 
                    "operation": "新增", 
                    "version": "1.23", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CheckWordsValid", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "检查语句是否合法，即不包含敏感词", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "语句", 
                    "param_name": "words", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True:语句合法<br>False:语句非法"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetFps", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取fps", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [], 
            "return": {
                "return_type": "float", 
                "return_comment": "当前fps值"
            }, 
            "state": [
                {
                    "comment": "获取fps", 
                    "operation": "新增", 
                    "version": "2.4", 
                    "author": "hxj"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CheckNameValid", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "检查昵称是否合法，即不包含敏感词", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "昵称", 
                    "param_name": "name", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "True:昵称合法 False:昵称非法"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetScreenViewInfo", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取游戏视角信息。首先获得当前分辨率下UI放大倍数，计算方式可参考<a href=\"../../../mcguide/18-界面与交互/1-界面编辑器使用说明.html#《我的世界》界面适配方法\">《我的世界》界面适配方法</a>。则当前游戏视角的宽度的计算方式为：若当前分辨率的宽度能被该放大倍数整除，则等于当前分辨率，若不能，则等于当前分辨率加放大倍数再减去当前分辨率对放大倍数求余的结果，当前游戏视角的高度计算方法类似。例：以分辨率为1792，828的手机计算，画布是分辨率的3倍，所以x = 1792 + 3 - 1 = 1794；y = 828，该接口返回的结果为(1794.0, 828.0, 0.0, 0.0)", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float,float)", 
                "return_comment": "依次为宽、高、x偏移、y偏移"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetPopupNotice", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "在本地玩家的物品栏上方弹出popup类型通知，位置位于tip类型消息下方", 
            "doc_class_path": [
                "世界/消息"
            ], 
            "param": [
                {
                    "param_comment": "消息内容,可以在消息前增加extraClientApi.GenerateColor(\"RED\")字符来设置颜色，具体参考样例", 
                    "param_name": "message", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "消息子标题内容,效果同message，也可设置颜色，位置位于message上方", 
                    "param_name": "subtitle", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetPopupState", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "设置Popup消息栏状态", 
            "doc_class_path": [
                "世界/消息"
            ], 
            "param": [
                {
                    "param_comment": "状态值，0为原版开启状态，1为关闭，2为使用接口设置的物品dict中customTips的第一行作为弹出信息", 
                    "param_name": "state", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否成功"
            }, 
            "state": [
                {
                    "comment": "设置Popup消息栏状态", 
                    "operation": "新增", 
                    "version": "2.8", 
                    "author": "cxz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetTipMessage", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "在本地玩家的物品栏上方弹出tip类型通知，位置位于popup类型通知上方", 
            "doc_class_path": [
                "世界/消息"
            ], 
            "param": [
                {
                    "param_comment": "消息内容,可以在消息前增加extraClientApi.GenerateColor(\"RED\")字符来设置颜色，具体参考样例", 
                    "param_name": "message", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "AddTimer", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "添加客户端触发的定时器，非重复", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "延迟时间，单位秒", 
                    "param_name": "delay", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "定时器触发函数", 
                    "param_name": "func", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "变长参数，可以不设置", 
                    "param_name": "*args", 
                    "param_type": "any"
                }, 
                {
                    "param_comment": "字典变长参数，可以不设置", 
                    "param_name": "**kwargs", 
                    "param_type": "any"
                }
            ], 
            "return": {
                "return_type": "CallLater", 
                "return_comment": "返回单次触发的定时器实例，传入func不是函数类型时返回None"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "AddRepeatedTimer", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "添加客户端触发的定时器，重复执行", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "延迟时间，单位秒", 
                    "param_name": "delay", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "定时器触发函数", 
                    "param_name": "func", 
                    "param_type": "function"
                }, 
                {
                    "param_comment": "变长参数，可以不设置", 
                    "param_name": "*args", 
                    "param_type": "any"
                }, 
                {
                    "param_comment": "字典变长参数，可以不设置", 
                    "param_name": "**kwargs", 
                    "param_type": "any"
                }
            ], 
            "return": {
                "return_type": "CallLater", 
                "return_comment": "返回触发的定时器实例，传入func不是函数类型时返回None"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "CancelTimer", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "取消定时器", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "AddTimer和AddRepeatedTimer时返回的定时器实例", 
                    "param_name": "timer", 
                    "param_type": "CallLater"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SimulateTouchWithMouse", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "模拟使用鼠标控制UI（PC F11快捷键）", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True:进入鼠标模式，False:退出鼠标模式", 
                    "param_name": "touch", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "模拟结果"
            }, 
            "state": [
                {
                    "comment": "新增模拟使用鼠标控制UI（PC的F11快捷键）", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "gzhuabo"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetCurrentDimension", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取客户端当前维度", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "维度id。客户端未登录完成或正在切维度时返回-1"
            }, 
            "state": [
                {
                    "comment": "获取客户端当前维度", 
                    "operation": "新增", 
                    "version": "1.21", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetChinese", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取langStr对应的中文，可参考PC开发包中\\handheld\\localization\\handheld\\data\\resource_packs\\vanilla\\texts\\zh_CN.lang", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "传入的langStr", 
                    "param_name": "langStr", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "langStr对应的中文，若找不到对应的中文，则会返回langStr本身,字符编码为Unicode"
            }, 
            "state": [
                {
                    "comment": "返回值添加字符编码描述", 
                    "operation": "修复", 
                    "version": "2.12", 
                    "author": "qiuyukun"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetEmoteSwitch", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "设置是否开启表情功能，默认PC端关闭，手机端开启，且该接口只能在手机端使用，在原生UI初始化前调用设置", 
            "doc_class_path": [
                "原生UI"
            ], 
            "param": [
                {
                    "param_comment": "是否开启表情", 
                    "param_name": "flag", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置成功返回true，设置失败返回false"
            }, 
            "state": [
                {
                    "comment": "设置表情开关", 
                    "operation": "新增", 
                    "version": "2.3", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPlayerGameType", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取指定玩家的游戏模式", 
            "doc_class_path": [
                "玩家/游戏模式"
            ], 
            "param": [
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "[GameType枚举](../../枚举值/GameType.md)"
            }, 
            "state": [
                {
                    "comment": "客户端获取玩家游戏模式", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPlayerExp", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取玩家当前等级下的经验值", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "是否为百分比, 如果设置返回百分比为False，则返回玩家当前等级下经验的绝对值（非当前玩家总经验值）。", 
                    "param_name": "isPercent", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "float", 
                "return_comment": "玩家经验值"
            }, 
            "state": [
                {
                    "comment": "获取玩家当前等级下的经验值", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPlayerCurLevelExp", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取玩家当前等级需要的经验值", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "玩家当前等级需要的经验值"
            }, 
            "state": [
                {
                    "comment": "获取玩家当前等级需要的经验值", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPlayerTotalExp", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取玩家的总经验值", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "总经验值，正整数。获取失败的情况下返回-1。"
            }, 
            "state": [
                {
                    "comment": "获取玩家的总经验值", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetCurrentAirSupply", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "玩家当前氧气储备值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "玩家id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "玩家当前氧气储备值"
            }, 
            "state": [
                {
                    "comment": "玩家当前氧气储备值", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetMaxAirSupply", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "玩家最大氧气储备值", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "实体id", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "玩家最大氧气储备值"
            }, 
            "state": [
                {
                    "comment": "玩家最大氧气储备值", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetRiderId", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取玩家坐骑entityid", 
            "doc_class_path": [
                "实体/属性"
            ], 
            "param": [
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "str", 
                "return_comment": "获取玩家坐骑entityid，无骑乘时返回None"
            }, 
            "state": [
                {
                    "comment": "获取玩家坐骑entityid", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetArmorValue", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取玩家护甲值", 
            "doc_class_path": [
                "玩家/属性"
            ], 
            "param": [
                {
                    "param_comment": "玩家id", 
                    "param_name": "playerId", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "int", 
                "return_comment": "获取玩家护甲值"
            }, 
            "state": [
                {
                    "comment": "获取玩家护甲值", 
                    "operation": "新增", 
                    "version": "2.5", 
                    "author": "huangxiaojie03"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetEntitiesAround", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取区域内的entity列表", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "某个entityId", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "正方体区域半径", 
                    "param_name": "radius", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "过滤设置字典", 
                    "param_name": "filters", 
                    "param_type": "dict"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "返回entityId的list"
            }, 
            "state": [
                {
                    "comment": "客户端获取区域内的entity列表", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetEntitiesInSquareArea", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取区域内的entity列表", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "该参数已废弃", 
                    "param_name": "entityId", 
                    "param_type": "None"
                }, 
                {
                    "param_comment": "初始位置", 
                    "param_name": "startPos", 
                    "param_type": "tuple(int,int,int)"
                }, 
                {
                    "param_comment": "结束位置，结束位置应大于初始位置，否则会返回空列表", 
                    "param_name": "endPos", 
                    "param_type": "tuple(int,int,int)"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "返回entityId的list"
            }, 
            "state": [
                {
                    "comment": "客户端获取区域内的entity列表", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetEntitiesAroundByType", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取区域内的某类型的entity列表", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "区域中心的entityId,如某个玩家的entityid", 
                    "param_name": "entityId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "区域半径", 
                    "param_name": "radius", 
                    "param_type": "int"
                }, 
                {
                    "param_comment": "[EntityType枚举](../../枚举值/EntityType.md)", 
                    "param_name": "entityType", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "list(str)", 
                "return_comment": "返回entityId的list"
            }, 
            "state": [
                {
                    "comment": "客户端获取区域内的某类型的entity列表", 
                    "operation": "新增", 
                    "version": "2.7", 
                    "author": "yangzhiwei"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetAllScoreboardObjects", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取所有记分板项", 
            "doc_class_path": [
                "世界/记分板"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#记分板记分准则信息字典#记分板记分准则信息字典\">记分准则信息字典</a>列表"
            }, 
            "state": [
                {
                    "comment": "获取所有记分板项", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetAllPlayerScoreboardObjects", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取玩家记分项", 
            "doc_class_path": [
                "世界/记分板"
            ], 
            "param": [], 
            "return": {
                "return_type": "list(dict)", 
                "return_comment": "<a href=\"../../../../mcguide/20-玩法开发/10-基本概念/1-我的世界基础概念.html#玩家记分项信息字典列表#玩家记分项信息字典列表\">玩家记分项信息字典</a>列表"
            }, 
            "state": [
                {
                    "comment": "获取玩家记分项", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "xsf"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "EnableFontBatchRender", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "是否开启字体合批", 
            "doc_class_path": [
                "自定义UI/通用"
            ], 
            "param": [
                {
                    "param_comment": "True开启，False关闭", 
                    "param_name": "enable", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "", 
                "return_comment": ""
            }, 
            "state": [
                {
                    "comment": "是否开启字体合批", 
                    "operation": "新增", 
                    "version": "2.12", 
                    "author": "gx"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "CanSee", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "判断起始对象是否可看见目标对象,基于对象的Head位置判断", 
            "doc_class_path": [
                "世界/地图"
            ], 
            "param": [
                {
                    "param_comment": "起始对象ID", 
                    "param_name": "fromId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "目标对象ID", 
                    "param_name": "targetId", 
                    "param_type": "str"
                }, 
                {
                    "param_comment": "视野距离,默认值8.0", 
                    "param_name": "viewRange", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "只判断固体方块遮挡,默认True; False则液体方块也会遮挡", 
                    "param_name": "onlySolid", 
                    "param_type": "bool"
                }, 
                {
                    "param_comment": "视野X轴角度,默认值180.0度", 
                    "param_name": "angleX", 
                    "param_type": "float"
                }, 
                {
                    "param_comment": "视野Y轴角度,默认值180.0度", 
                    "param_name": "angleY", 
                    "param_type": "float"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否可见"
            }, 
            "state": [
                {
                    "comment": "添加对象是否可看见目标的客户端接口", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "xgb"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetPistonMaxInteractionCount", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取活塞/粘性活塞最多推动的方块数量，默认为12个方块，可能被其他开发者修改。", 
            "doc_class_path": [
                "世界/游戏规则"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "最大推动的方块数量"
            }, 
            "state": [
                {
                    "comment": "获取活塞/粘性活塞最多推动的方块数量", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "gx"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetClipboardContent", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "设置系统剪贴板内容", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [
                {
                    "param_comment": "需要设置的剪贴板内容", 
                    "param_name": "content", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置系统剪贴板内容", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetClipboardContent", 
            "path": "client.component.gameCompClient.GameComponentClient", 
            "desc": "获取系统剪贴板内容", 
            "doc_class_path": [
                "通用/工具"
            ], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "剪贴板内容，获取失败时返回None"
            }, 
            "state": [
                {
                    "comment": "获取系统剪贴板内容", 
                    "operation": "新增", 
                    "version": "3.3", 
                    "author": "xujiarong02"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.particleTransComp.ParticleTransComp": [
        {
            "name": "GetPos", 
            "path": "client.component.particleTransComp.ParticleTransComp", 
            "desc": "获取粒子发射器的世界坐标位置", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "返回粒子发射器的世界坐标位置"
            }, 
            "state": [
                {
                    "comment": "获取粒子发射器的世界坐标位置。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetPos", 
            "path": "client.component.particleTransComp.ParticleTransComp", 
            "desc": "设置粒子发射器的世界坐标位置", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [
                {
                    "param_comment": "世界坐标", 
                    "param_name": "pos", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "GetRot", 
            "path": "client.component.particleTransComp.ParticleTransComp", 
            "desc": "获取粒子发射器的旋转角度", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [], 
            "return": {
                "return_type": "tuple(float,float,float)", 
                "return_comment": "返回粒子发射器的旋转角度"
            }, 
            "state": [
                {
                    "comment": "获取粒子发射器的旋转角度。", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetRotUseZXY", 
            "path": "client.component.particleTransComp.ParticleTransComp", 
            "desc": "设置粒子发射器的旋转，旋转顺序按照绕z,x,y轴旋转", 
            "doc_class_path": [
                "特效/粒子"
            ], 
            "param": [
                {
                    "param_comment": "绕局部坐标系的+z，+x，+y轴旋转的角度，旋转顺序按照绕z,x,y轴旋转。", 
                    "param_name": "rot", 
                    "param_type": "tuple(float,float,float)"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置粒子发射器的旋转，旋转顺序按照绕z,x,y轴旋转", 
                    "operation": "新增", 
                    "version": "1.24", 
                    "author": "xujiarong"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.ui.controls.stackPanelUIControl.StackPanelUIControl": [
        {
            "name": "SetOrientation", 
            "path": "client.ui.controls.stackPanelUIControl.StackPanelUIControl", 
            "desc": "设置stackPanel的排列方向", 
            "doc_class_path": [], 
            "param": [
                {
                    "param_comment": "stackPanel的排列方向，取值有限为[\"vertical\", \"horizontal\"]，分别表示垂直方向，水平方向", 
                    "param_name": "orientation", 
                    "param_type": "str"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置stackPanel的排列方向", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetOrientation", 
            "path": "client.ui.controls.stackPanelUIControl.StackPanelUIControl", 
            "desc": "获取stackPanel的排列方向", 
            "doc_class_path": [], 
            "param": [], 
            "return": {
                "return_type": "str", 
                "return_comment": "stackPanel的排列方向，取值有限为[\"vertical\", \"horizontal\"]，分别表示垂直方向，水平方向"
            }, 
            "state": [
                {
                    "comment": "获取stackPanel的排列方向", 
                    "operation": "新增", 
                    "version": "2.1", 
                    "author": "mayexing"
                }
            ], 
            "side": "客户端"
        }
    ], 
    "client.component.operationCompClient.OperationCompClient": [
        {
            "name": "SetCanMove", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置是否响应移动", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True为可移动", 
                    "param_name": "move", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "调整接口使用说明", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "IsCanMove", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "获取玩家是否响应移动", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否响应移动"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否响应移动", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "wkm"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCanJump", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置是否响应跳跃（以及在水中浮起）", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True为可跳跃", 
                    "param_name": "jump", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "IsCanJump", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "获取玩家是否响应跳跃（以及在水中浮起）", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否响应跳跃（以及在水中浮起）"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否响应跳跃（以及在水中浮起）", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "wkm"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCanAttack", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置是否响应攻击", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True为可攻击", 
                    "param_name": "attack", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "IsCanAttack", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "获取玩家是否响应攻击", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否响应攻击"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否响应攻击", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "wkm"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCanWalkMode", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置是否响应切换行走模式", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True为可切换", 
                    "param_name": "walkmode", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "IsCanWalkMode", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "获取玩家是否响应切换行走模式", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否响应切换行走模式"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否响应切换行走模式", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "wkm"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCanPerspective", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置是否响应切换视角", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True为可切换", 
                    "param_name": "persp", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "IsCanPerspective", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "获取玩家是否响应切换视角", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否响应切换视角"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否响应切换视角", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "wkm"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCanPause", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置是否响应暂停按钮", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True为可打开暂停页面", 
                    "param_name": "pause", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "IsCanPause", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "获取玩家是否响应暂停按钮", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否响应暂停按钮"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否响应暂停按钮", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "wkm"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCanPauseScreen", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置是否可以打开暂停界面", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True为可打开暂停页面", 
                    "param_name": "pause", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "修复文档导出警告", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "bl"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "IsCanPauseScreen", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "获取玩家是否可以打开暂停界面", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否可以打开暂停界面"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否可以打开暂停界面", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "wkm"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCanChat", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置是否响应聊天按钮", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True为可打开聊天页面", 
                    "param_name": "chat", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "IsCanChat", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "获取玩家是否响应聊天按钮", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否响应聊天按钮"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否响应聊天按钮", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "wkm"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCanScreenShot", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置是否响应截图按钮", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True为可截图", 
                    "param_name": "shot", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "IsCanScreenShot", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "获取玩家是否响应截图按钮", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否响应截图按钮"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否响应截图按钮", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "wkm"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCanOpenInv", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置是否响应打开背包按钮", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True为可打开背包", 
                    "param_name": "open", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "IsCanOpenInv", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "获取玩家是否响应打开背包按钮", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否响应打开背包按钮"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否响应打开背包按钮", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "wkm"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCanDrag", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置是否响应屏幕拖动", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True为可拖动屏幕", 
                    "param_name": "drag", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "IsCanDrag", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "获取玩家是否响应屏幕拖动", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否响应屏幕拖动"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否响应屏幕拖动", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "wkm"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCanInair", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置是否响应上升下降按钮（飞在空中时右下角的三个按钮）", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True为可点击", 
                    "param_name": "inair", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "IsCanInair", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "获取玩家是否响应打上升下降按钮", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "bool", 
                "return_comment": "是否响应打上升下降按钮"
            }, 
            "state": [
                {
                    "comment": "获取玩家是否响应打上升下降按钮", 
                    "operation": "新增", 
                    "version": "2.11", 
                    "author": "wkm"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetCanAll", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "同时设置SetCanMove，SetCanJump，SetCanAttack，SetCanWalkMode，SetCanPerspective，SetCanPause，SetCanChat，SetCanScreenShot，SetCanOpenInv，SetCanDrag，SetCanInair", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True为全部响应", 
                    "param_name": "all", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [], 
            "side": "客户端"
        }, 
        {
            "name": "SetMoveLock", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置是否锁住移动。实际上为是否响应十字键与遥感的操作。", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "True为锁住", 
                    "param_name": "movelock", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "调整接口使用说明", 
                    "operation": "调整", 
                    "version": "1.23", 
                    "author": "likaiyu"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetHoldTimeThreshold", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置长按判定时间，即按着屏幕多长时间会触发长按操作", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "时间，单位毫秒。默认为400", 
                    "param_name": "time", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置是否成功"
            }, 
            "state": [
                {
                    "comment": "设置长按判定时间", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "GetHoldTimeThresholdInMs", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "获取长按判定时间，即按着屏幕多长时间会触发长按操作", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [], 
            "return": {
                "return_type": "int", 
                "return_comment": "时间，单位毫秒。默认为400"
            }, 
            "state": [
                {
                    "comment": "获取长按判定时间", 
                    "operation": "新增", 
                    "version": "1.19", 
                    "author": "czh"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetControlMode", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置控制模式", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "控制模式，0:摇杆并点击互动, 1:摇杆并瞄准十字线, 2:方向键并点击互动", 
                    "param_name": "mode", 
                    "param_type": "int"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置成功返回true，失败返回false"
            }, 
            "state": [
                {
                    "comment": "设置控制模式", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }, 
        {
            "name": "SetControlModeLock", 
            "path": "client.component.operationCompClient.OperationCompClient", 
            "desc": "设置控制模式是否可以被改变", 
            "doc_class_path": [
                "控制"
            ], 
            "param": [
                {
                    "param_comment": "true则控制模式锁定，无法打开对应设置界面，false则控制模式可以被改变", 
                    "param_name": "lock", 
                    "param_type": "bool"
                }
            ], 
            "return": {
                "return_type": "bool", 
                "return_comment": "设置成功返回true，失败返回false"
            }, 
            "state": [
                {
                    "comment": "设置控制模式是否可以被改变", 
                    "operation": "新增", 
                    "version": "3.2", 
                    "author": "lrz"
                }
            ], 
            "side": "客户端"
        }
    ]
}